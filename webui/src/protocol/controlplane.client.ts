// @generated by protobuf-ts 2.9.6 with parameter optimize_code_size
// @generated from protobuf file "controlplane.proto" (package "francenuage.fr.api.controlplane.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Hypervisor } from "./controlplane";
import type { StopInstanceResponse } from "./controlplane";
import type { StopInstanceRequest } from "./controlplane";
import type { StartInstanceResponse } from "./controlplane";
import type { StartInstanceRequest } from "./controlplane";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListInstancesResponse } from "./controlplane";
import type { ListInstancesRequest } from "./controlplane";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * ControlPlane service provides operations to manage virtual machine instances.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.Hypervisor
 */
export interface IHypervisorClient {
  /**
   * ListInstances retrieves information about all available instances.
   * Returns a collection of instance details including their current status and resource usage.
   *
   * @generated from protobuf rpc: ListInstances(francenuage.fr.api.controlplane.v1.ListInstancesRequest) returns (francenuage.fr.api.controlplane.v1.ListInstancesResponse);
   */
  listInstances(
    input: ListInstancesRequest,
    options?: RpcOptions,
  ): UnaryCall<ListInstancesRequest, ListInstancesResponse>;
  /**
   * StartInstance initiates a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StartInstance(francenuage.fr.api.controlplane.v1.StartInstanceRequest) returns (francenuage.fr.api.controlplane.v1.StartInstanceResponse);
   */
  startInstance(
    input: StartInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StartInstanceRequest, StartInstanceResponse>;
  /**
   * StopInstance halts a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StopInstance(francenuage.fr.api.controlplane.v1.StopInstanceRequest) returns (francenuage.fr.api.controlplane.v1.StopInstanceResponse);
   */
  stopInstance(
    input: StopInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StopInstanceRequest, StopInstanceResponse>;
}
/**
 * ControlPlane service provides operations to manage virtual machine instances.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.Hypervisor
 */
export class HypervisorClient implements IHypervisorClient, ServiceInfo {
  typeName = Hypervisor.typeName;
  methods = Hypervisor.methods;
  options = Hypervisor.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * ListInstances retrieves information about all available instances.
   * Returns a collection of instance details including their current status and resource usage.
   *
   * @generated from protobuf rpc: ListInstances(francenuage.fr.api.controlplane.v1.ListInstancesRequest) returns (francenuage.fr.api.controlplane.v1.ListInstancesResponse);
   */
  listInstances(
    input: ListInstancesRequest,
    options?: RpcOptions,
  ): UnaryCall<ListInstancesRequest, ListInstancesResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListInstancesRequest, ListInstancesResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * StartInstance initiates a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StartInstance(francenuage.fr.api.controlplane.v1.StartInstanceRequest) returns (francenuage.fr.api.controlplane.v1.StartInstanceResponse);
   */
  startInstance(
    input: StartInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StartInstanceRequest, StartInstanceResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StartInstanceRequest, StartInstanceResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * StopInstance halts a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StopInstance(francenuage.fr.api.controlplane.v1.StopInstanceRequest) returns (francenuage.fr.api.controlplane.v1.StopInstanceResponse);
   */
  stopInstance(
    input: StopInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StopInstanceRequest, StopInstanceResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StopInstanceRequest, StopInstanceResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
