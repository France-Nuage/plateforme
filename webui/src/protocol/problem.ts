// @generated by protobuf-ts 2.9.6 with parameter optimize_code_size
// @generated from protobuf file "problem.proto" (package "francenuage.fr.api.controlplane.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Problem details object as defined by RFC7807
 * This provides a standardized format for error reporting in APIs
 *
 * @generated from protobuf message francenuage.fr.api.controlplane.v1.ProblemDetails
 */
export interface ProblemDetails {
  /**
   * A URI reference [RFC3986] that identifies the problem type.
   * When dereferenced, it SHOULD provide human-readable documentation for the problem type.
   * When this member is not present, its value is assumed to be "about:blank".
   * Consumers MUST use the "type" string as the primary identifier for the problem type.
   * Note that this accepts relative URIs which must be resolved relative to the document's base URI.
   * Consumers SHOULD NOT automatically dereference the type URI.
   *
   * @generated from protobuf field: string type = 1;
   */
  type: string;
  /**
   * A short, human-readable summary of the problem type.
   * It SHOULD NOT change from occurrence to occurrence of the problem,
   * except for purposes of localization.
   * This string is advisory and included only for users who are not aware
   * of the semantics of the URI and do not have the ability to discover them.
   *
   * @generated from protobuf field: string title = 2;
   */
  title: string;
  /**
   * The status code for this occurrence of the problem.
   * This is advisory and conveys the status code used for the convenience of the consumer.
   * Consumers can use the status member to determine what the original status code
   * used by the generator was, in cases where it has been changed,
   * and when messages persist without transport information.
   *
   * @generated from protobuf field: francenuage.fr.api.controlplane.v1.StatusCode status = 3;
   */
  status: StatusCode;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   * The detail member, if present, ought to focus on helping the client
   * correct the problem, rather than giving debugging information.
   * Consumers SHOULD NOT parse the "detail" member for information;
   * extensions are more suitable and less error-prone ways to obtain such information.
   *
   * @generated from protobuf field: string detail = 4;
   */
  detail: string;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   * It may or may not yield further information if dereferenced.
   * Note that this accepts relative URIs which must be resolved relative
   * to the document's base URI.
   *
   * @generated from protobuf field: string instance = 5;
   */
  instance: string;
  /**
   * Additional information about the problem.
   * This can be used to include extensions as defined in RFC7807 Section 3.2.
   * Extensions are used to convey additional information that may be of use to some consumers.
   * Extensions SHOULD be defined when there's a need to convey additional
   * information that doesn't naturally fit into the standard fields above.
   *
   * @generated from protobuf field: map<string, string> extensions = 6;
   */
  extensions: {
    [key: string]: string;
  };
}
/**
 * Status codes that can be used with ProblemDetails
 *
 * @generated from protobuf enum francenuage.fr.api.controlplane.v1.StatusCode
 */
export enum StatusCode {
  /**
   * Unspecified status - should generally be avoided
   *
   * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,
  /**
   * The server has no knowledge of the requested resource
   *
   * @generated from protobuf enum value: NOT_FOUND = 1;
   */
  NOT_FOUND = 1,
  /**
   * The server rejected the request as invalid
   *
   * @generated from protobuf enum value: INVALID_ARGUMENT = 2;
   */
  INVALID_ARGUMENT = 2,
  /**
   * The operation cannot be performed in the current state
   *
   * @generated from protobuf enum value: FAILED_PRECONDITION = 3;
   */
  FAILED_PRECONDITION = 3,
  /**
   * The requested operation was rejected due to rate limiting
   *
   * @generated from protobuf enum value: RESOURCE_EXHAUSTED = 4;
   */
  RESOURCE_EXHAUSTED = 4,
  /**
   * The server is currently unavailable
   *
   * @generated from protobuf enum value: UNAVAILABLE = 5;
   */
  UNAVAILABLE = 5,
  /**
   * The operation was rejected due to access restrictions
   *
   * @generated from protobuf enum value: PERMISSION_DENIED = 6;
   */
  PERMISSION_DENIED = 6,
  /**
   * There was an internal server error
   *
   * @generated from protobuf enum value: INTERNAL_ERROR = 7;
   */
  INTERNAL_ERROR = 7,
  /**
   * The requested operation is not implemented
   *
   * @generated from protobuf enum value: UNIMPLEMENTED = 8;
   */
  UNIMPLEMENTED = 8,
  /**
   * A timeout occurred while processing the request
   *
   * @generated from protobuf enum value: DEADLINE_EXCEEDED = 9;
   */
  DEADLINE_EXCEEDED = 9,
  /**
   * The operation was cancelled
   *
   * @generated from protobuf enum value: CANCELLED = 10;
   */
  CANCELLED = 10,
  /**
   * A required resource could not be allocated
   *
   * @generated from protobuf enum value: RESOURCE_UNAVAILABLE = 11;
   */
  RESOURCE_UNAVAILABLE = 11,
}
// @generated message type with reflection information, may provide speed optimized methods
class ProblemDetails$Type extends MessageType<ProblemDetails> {
  constructor() {
    super("francenuage.fr.api.controlplane.v1.ProblemDetails", [
      { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: "status",
        kind: "enum",
        T: () => ["francenuage.fr.api.controlplane.v1.StatusCode", StatusCode],
      },
      { no: 4, name: "detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: "instance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 6,
        name: "extensions",
        kind: "map",
        K: 9 /*ScalarType.STRING*/,
        V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      },
    ]);
  }
}
/**
 * @generated MessageType for protobuf message francenuage.fr.api.controlplane.v1.ProblemDetails
 */
export const ProblemDetails = new ProblemDetails$Type();
