// @generated by protobuf-ts 2.11.0 with parameter optimize_code_size
// @generated from protobuf file "hypervisors.proto" (package "francenuage.fr.api.controlplane.v1.hypervisors", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';

import { Hypervisors } from './hypervisors';
import type { DetachHypervisorResponse } from './hypervisors';
import type { DetachHypervisorRequest } from './hypervisors';
import type { RegisterHypervisorResponse } from './hypervisors';
import type { RegisterHypervisorRequest } from './hypervisors';
import type { ListHypervisorsResponse } from './hypervisors';
import type { ListHypervisorsRequest } from './hypervisors';

/**
 * Hypervisors service provides operations to manage hypervisors.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.hypervisors.Hypervisors
 */
export interface IHypervisorsClient {
  /**
   * ListHypervisors retrieves information about all registered hypervisors.
   * Returns a collection of hypervisor details.
   *
   * @generated from protobuf rpc: ListHypervisors
   */
  listHypervisors(
    input: ListHypervisorsRequest,
    options?: RpcOptions,
  ): UnaryCall<ListHypervisorsRequest, ListHypervisorsResponse>;
  /**
   * RegisterHypervisor adds a new hypervisor to the system.
   * Returns an empty response on success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: RegisterHypervisor
   */
  registerHypervisor(
    input: RegisterHypervisorRequest,
    options?: RpcOptions,
  ): UnaryCall<RegisterHypervisorRequest, RegisterHypervisorResponse>;
  /**
   * DetachHypervisor removes a hypervisor from the system.
   * Returns an empty response on success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: DetachHypervisor
   */
  detachHypervisor(
    input: DetachHypervisorRequest,
    options?: RpcOptions,
  ): UnaryCall<DetachHypervisorRequest, DetachHypervisorResponse>;
}
/**
 * Hypervisors service provides operations to manage hypervisors.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.hypervisors.Hypervisors
 */
export class HypervisorsClient implements IHypervisorsClient, ServiceInfo {
  typeName = Hypervisors.typeName;
  methods = Hypervisors.methods;
  options = Hypervisors.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * ListHypervisors retrieves information about all registered hypervisors.
   * Returns a collection of hypervisor details.
   *
   * @generated from protobuf rpc: ListHypervisors
   */
  listHypervisors(
    input: ListHypervisorsRequest,
    options?: RpcOptions,
  ): UnaryCall<ListHypervisorsRequest, ListHypervisorsResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListHypervisorsRequest, ListHypervisorsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * RegisterHypervisor adds a new hypervisor to the system.
   * Returns an empty response on success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: RegisterHypervisor
   */
  registerHypervisor(
    input: RegisterHypervisorRequest,
    options?: RpcOptions,
  ): UnaryCall<RegisterHypervisorRequest, RegisterHypervisorResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      RegisterHypervisorRequest,
      RegisterHypervisorResponse
    >('unary', this._transport, method, opt, input);
  }
  /**
   * DetachHypervisor removes a hypervisor from the system.
   * Returns an empty response on success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: DetachHypervisor
   */
  detachHypervisor(
    input: DetachHypervisorRequest,
    options?: RpcOptions,
  ): UnaryCall<DetachHypervisorRequest, DetachHypervisorResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<DetachHypervisorRequest, DetachHypervisorResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
