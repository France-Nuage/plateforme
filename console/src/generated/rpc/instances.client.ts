// @generated by protobuf-ts 2.11.0 with parameter optimize_code_size
// @generated from protobuf file "instances.proto" (package "francenuage.fr.api.controlplane.v1.instances", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';

import { Instances } from './instances';
import type { StopInstanceResponse } from './instances';
import type { StopInstanceRequest } from './instances';
import type { StartInstanceResponse } from './instances';
import type { StartInstanceRequest } from './instances';
import type { DeleteInstanceResponse } from './instances';
import type { DeleteInstanceRequest } from './instances';
import type { CreateInstanceResponse } from './instances';
import type { CreateInstanceRequest } from './instances';
import type { Instance } from './instances';
import type { CloneInstanceRequest } from './instances';
import type { ListInstancesResponse } from './instances';
import type { ListInstancesRequest } from './instances';

/**
 * Instances service provides operations to manage instances.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.instances.Instances
 */
export interface IInstancesClient {
  /**
   * ListInstances retrieves information about all available instances.
   * Returns a collection of instance details including their current status and resource usage.
   *
   * @generated from protobuf rpc: ListInstances
   */
  listInstances(
    input: ListInstancesRequest,
    options?: RpcOptions,
  ): UnaryCall<ListInstancesRequest, ListInstancesResponse>;
  /**
   * CloneInstance provisions a new instance based on a given existing instance.
   * Returns the cloned instance.
   *
   * @generated from protobuf rpc: CloneInstance
   */
  cloneInstance(
    input: CloneInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<CloneInstanceRequest, Instance>;
  /**
   * CreateInstance provisions a new instance based on the specified configuration.
   * Returns details of the newly created instance or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: CreateInstance
   */
  createInstance(
    input: CreateInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateInstanceRequest, CreateInstanceResponse>;
  /**
   * DeleteInstance deletes a given instance.
   * Returns an empty message or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: DeleteInstance
   */
  deleteInstance(
    input: DeleteInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<DeleteInstanceRequest, DeleteInstanceResponse>;
  /**
   * StartInstance initiates a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StartInstance
   */
  startInstance(
    input: StartInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StartInstanceRequest, StartInstanceResponse>;
  /**
   * StopInstance halts a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StopInstance
   */
  stopInstance(
    input: StopInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StopInstanceRequest, StopInstanceResponse>;
}
/**
 * Instances service provides operations to manage instances.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.instances.Instances
 */
export class InstancesClient implements IInstancesClient, ServiceInfo {
  typeName = Instances.typeName;
  methods = Instances.methods;
  options = Instances.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * ListInstances retrieves information about all available instances.
   * Returns a collection of instance details including their current status and resource usage.
   *
   * @generated from protobuf rpc: ListInstances
   */
  listInstances(
    input: ListInstancesRequest,
    options?: RpcOptions,
  ): UnaryCall<ListInstancesRequest, ListInstancesResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListInstancesRequest, ListInstancesResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * CloneInstance provisions a new instance based on a given existing instance.
   * Returns the cloned instance.
   *
   * @generated from protobuf rpc: CloneInstance
   */
  cloneInstance(
    input: CloneInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<CloneInstanceRequest, Instance> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CloneInstanceRequest, Instance>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * CreateInstance provisions a new instance based on the specified configuration.
   * Returns details of the newly created instance or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: CreateInstance
   */
  createInstance(
    input: CreateInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateInstanceRequest, CreateInstanceResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateInstanceRequest, CreateInstanceResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * DeleteInstance deletes a given instance.
   * Returns an empty message or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: DeleteInstance
   */
  deleteInstance(
    input: DeleteInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<DeleteInstanceRequest, DeleteInstanceResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<DeleteInstanceRequest, DeleteInstanceResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * StartInstance initiates a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StartInstance
   */
  startInstance(
    input: StartInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StartInstanceRequest, StartInstanceResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StartInstanceRequest, StartInstanceResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * StopInstance halts a specific instance identified by its unique ID.
   * Returns a response indicating success or a ProblemDetails on failure.
   *
   * @generated from protobuf rpc: StopInstance
   */
  stopInstance(
    input: StopInstanceRequest,
    options?: RpcOptions,
  ): UnaryCall<StopInstanceRequest, StopInstanceResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StopInstanceRequest, StopInstanceResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
