// @generated by protobuf-ts 2.11.1 with parameter optimize_code_size
// @generated from protobuf file "infrastructure.proto" (package "francenuage.fr.api.controlplane.v1.infrastructure", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';

import { ZeroTrustNetworkTypes } from './infrastructure';
import type { ListZeroTrustNetworkTypesResponse } from './infrastructure';
import type { ListZeroTrustNetworkTypesRequest } from './infrastructure';
import { ZeroTrustNetworks } from './infrastructure';
import type { ListZeroTrustNetworksResponse } from './infrastructure';
import type { ListZeroTrustNetworksRequest } from './infrastructure';
import { Datacenters } from './infrastructure';
import type { ListDatacentersResponse } from './infrastructure';
import type { ListDatacentersRequest } from './infrastructure';

/**
 * Datacenters service providers operations to manage datacenter resources.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.infrastructure.Datacenters
 */
export interface IDatacentersClient {
  /**
   * List retrieves information about Human-readable available datacenters.
   * Returns a collection of datacenters.
   *
   * @generated from protobuf rpc: List
   */
  list(
    input: ListDatacentersRequest,
    options?: RpcOptions,
  ): UnaryCall<ListDatacentersRequest, ListDatacentersResponse>;
}
/**
 * Datacenters service providers operations to manage datacenter resources.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.infrastructure.Datacenters
 */
export class DatacentersClient implements IDatacentersClient, ServiceInfo {
  typeName = Datacenters.typeName;
  methods = Datacenters.methods;
  options = Datacenters.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * List retrieves information about Human-readable available datacenters.
   * Returns a collection of datacenters.
   *
   * @generated from protobuf rpc: List
   */
  list(
    input: ListDatacentersRequest,
    options?: RpcOptions,
  ): UnaryCall<ListDatacentersRequest, ListDatacentersResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListDatacentersRequest, ListDatacentersResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
/**
 * ZeroTrustNetworks service provides operations to manage zero trust network resources.
 * Zero trust networks implement security models where no user or device is trusted by default.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.infrastructure.ZeroTrustNetworks
 */
export interface IZeroTrustNetworksClient {
  /**
   * List retrieves information about all available zero trust networks.
   * Returns a collection of zero trust networks.
   *
   * @generated from protobuf rpc: List
   */
  list(
    input: ListZeroTrustNetworksRequest,
    options?: RpcOptions,
  ): UnaryCall<ListZeroTrustNetworksRequest, ListZeroTrustNetworksResponse>;
}
/**
 * ZeroTrustNetworks service provides operations to manage zero trust network resources.
 * Zero trust networks implement security models where no user or device is trusted by default.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.infrastructure.ZeroTrustNetworks
 */
export class ZeroTrustNetworksClient
  implements IZeroTrustNetworksClient, ServiceInfo
{
  typeName = ZeroTrustNetworks.typeName;
  methods = ZeroTrustNetworks.methods;
  options = ZeroTrustNetworks.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * List retrieves information about all available zero trust networks.
   * Returns a collection of zero trust networks.
   *
   * @generated from protobuf rpc: List
   */
  list(
    input: ListZeroTrustNetworksRequest,
    options?: RpcOptions,
  ): UnaryCall<ListZeroTrustNetworksRequest, ListZeroTrustNetworksResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      ListZeroTrustNetworksRequest,
      ListZeroTrustNetworksResponse
    >('unary', this._transport, method, opt, input);
  }
}
/**
 * ZeroTrustNetworkTypes service provides operations to manage zero trust network type definitions.
 * Network types define different categories or configurations of zero trust networks.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.infrastructure.ZeroTrustNetworkTypes
 */
export interface IZeroTrustNetworkTypesClient {
  /**
   * List retrieves information about all available zero trust network types.
   * Returns a collection of zero trust network types.
   *
   * @generated from protobuf rpc: List
   */
  list(
    input: ListZeroTrustNetworkTypesRequest,
    options?: RpcOptions,
  ): UnaryCall<
    ListZeroTrustNetworkTypesRequest,
    ListZeroTrustNetworkTypesResponse
  >;
}
/**
 * ZeroTrustNetworkTypes service provides operations to manage zero trust network type definitions.
 * Network types define different categories or configurations of zero trust networks.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.infrastructure.ZeroTrustNetworkTypes
 */
export class ZeroTrustNetworkTypesClient
  implements IZeroTrustNetworkTypesClient, ServiceInfo
{
  typeName = ZeroTrustNetworkTypes.typeName;
  methods = ZeroTrustNetworkTypes.methods;
  options = ZeroTrustNetworkTypes.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * List retrieves information about all available zero trust network types.
   * Returns a collection of zero trust network types.
   *
   * @generated from protobuf rpc: List
   */
  list(
    input: ListZeroTrustNetworkTypesRequest,
    options?: RpcOptions,
  ): UnaryCall<
    ListZeroTrustNetworkTypesRequest,
    ListZeroTrustNetworkTypesResponse
  > {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      ListZeroTrustNetworkTypesRequest,
      ListZeroTrustNetworkTypesResponse
    >('unary', this._transport, method, opt, input);
  }
}
