// @generated by protobuf-ts 2.11.0 with parameter optimize_code_size
// @generated from protobuf file "resources.proto" (package "francenuage.fr.api.controlplane.v1.resources", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Resources } from "./resources";
import type { CreateProjectResponse } from "./resources";
import type { CreateProjectRequest } from "./resources";
import type { ListProjectsResponse } from "./resources";
import type { ListProjectsRequest } from "./resources";
import type { CreateOrganizationResponse } from "./resources";
import type { CreateOrganizationRequest } from "./resources";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListOrganizationsResponse } from "./resources";
import type { ListOrganizationsRequest } from "./resources";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Resources service provides operations to manage organizational resources such as
 * Organizations and Projects.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.resources.Resources
 */
export interface IResourcesClient {
    /**
     * ListOrganizations retrieves information about all available organizations.
     * Returns a collection of organizations.
     *
     * @generated from protobuf rpc: ListOrganizations
     */
    listOrganizations(input: ListOrganizationsRequest, options?: RpcOptions): UnaryCall<ListOrganizationsRequest, ListOrganizationsResponse>;
    /**
     * CreateOrganization creates a new organization with the specified name.
     * Returns the newly created organization.
     *
     * @generated from protobuf rpc: CreateOrganization
     */
    createOrganization(input: CreateOrganizationRequest, options?: RpcOptions): UnaryCall<CreateOrganizationRequest, CreateOrganizationResponse>;
    /**
     * ListProjects retrieves information about all available projects for a specific organization.
     * Returns a collection of projects.
     *
     * @generated from protobuf rpc: ListProjects
     */
    listProjects(input: ListProjectsRequest, options?: RpcOptions): UnaryCall<ListProjectsRequest, ListProjectsResponse>;
    /**
     * CreateProject creates a new project with the specified name within an organization.
     * Returns the newly created project.
     *
     * @generated from protobuf rpc: CreateProject
     */
    createProject(input: CreateProjectRequest, options?: RpcOptions): UnaryCall<CreateProjectRequest, CreateProjectResponse>;
}
/**
 * Resources service provides operations to manage organizational resources such as
 * Organizations and Projects.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.resources.Resources
 */
export class ResourcesClient implements IResourcesClient, ServiceInfo {
    typeName = Resources.typeName;
    methods = Resources.methods;
    options = Resources.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * ListOrganizations retrieves information about all available organizations.
     * Returns a collection of organizations.
     *
     * @generated from protobuf rpc: ListOrganizations
     */
    listOrganizations(input: ListOrganizationsRequest, options?: RpcOptions): UnaryCall<ListOrganizationsRequest, ListOrganizationsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListOrganizationsRequest, ListOrganizationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CreateOrganization creates a new organization with the specified name.
     * Returns the newly created organization.
     *
     * @generated from protobuf rpc: CreateOrganization
     */
    createOrganization(input: CreateOrganizationRequest, options?: RpcOptions): UnaryCall<CreateOrganizationRequest, CreateOrganizationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrganizationRequest, CreateOrganizationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListProjects retrieves information about all available projects for a specific organization.
     * Returns a collection of projects.
     *
     * @generated from protobuf rpc: ListProjects
     */
    listProjects(input: ListProjectsRequest, options?: RpcOptions): UnaryCall<ListProjectsRequest, ListProjectsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListProjectsRequest, ListProjectsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CreateProject creates a new project with the specified name within an organization.
     * Returns the newly created project.
     *
     * @generated from protobuf rpc: CreateProject
     */
    createProject(input: CreateProjectRequest, options?: RpcOptions): UnaryCall<CreateProjectRequest, CreateProjectResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateProjectRequest, CreateProjectResponse>("unary", this._transport, method, opt, input);
    }
}
