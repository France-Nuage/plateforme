/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: WgBKdGHdVFBy
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

// plasmic-import: GyTJhs9veKrj/component
import BtnSideBar from '../../BtnSideBar';
import TextField from '../../TextField';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: A9xYAhwSD6i3/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicSideBar.module.css';
// plasmic-import: INMXktOfIWiD/icon
import BellIcon from './icons/PlasmicIcon__Bell';
// plasmic-import: TueurUSDtevy/icon
import CircleIcon from './icons/PlasmicIcon__Circle';
// plasmic-import: 0zFkNWu9LQOC/icon
import DevSquareIcon from './icons/PlasmicIcon__DevSquare';
// plasmic-import: HOWLf5KCV6xi/icon
import FactureIcon from './icons/PlasmicIcon__Facture';
// plasmic-import: MqRFF7vxUCiv/icon
import HomeIcon from './icons/PlasmicIcon__Home';
// plasmic-import: CnqcBI0upv9T/icon
import Icon4Icon from './icons/PlasmicIcon__Icon4';
// plasmic-import: M5Yt0pb7IRm_/icon
import Icon10Icon from './icons/PlasmicIcon__Icon10';
// plasmic-import: wy92u1XfZPXm/icon
import Icon11Icon from './icons/PlasmicIcon__Icon11';
// plasmic-import: WgBKdGHdVFBy/css

import SearchIcon from './icons/PlasmicIcon__Search';
// plasmic-import: q8GlA5e81ML_/icon
import SettingsIcon from './icons/PlasmicIcon__Settings';
// plasmic-import: LPIiQLy4lvIE/icon
import UserIcon from './icons/PlasmicIcon__User';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: tmJQKBQDJEoe/icon

createPlasmicElementProxy;

export type PlasmicSideBar__VariantMembers = {};
export type PlasmicSideBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideBar__VariantsArgs;
export const PlasmicSideBar__VariantProps = new Array<VariantPropType>();

export type PlasmicSideBar__ArgsType = {};
type ArgPropType = keyof PlasmicSideBar__ArgsType;
export const PlasmicSideBar__ArgProps = new Array<ArgPropType>();

export type PlasmicSideBar__OverridesType = {
  root?: Flex__<'div'>;
  recherche?: Flex__<'div'>;
  textField?: Flex__<typeof TextField>;
  divider?: Flex__<'div'>;
  general?: Flex__<'div'>;
  tableauDeBord?: Flex__<typeof BtnSideBar>;
  equipes2?: Flex__<typeof BtnSideBar>;
  plan?: Flex__<typeof BtnSideBar>;
  parametre?: Flex__<typeof BtnSideBar>;
  divider2?: Flex__<'div'>;
  projet?: Flex__<'div'>;
  divider3?: Flex__<'div'>;
  profil?: Flex__<'div'>;
};

export interface DefaultSideBarProps {
  className?: string;
}

const $$ = {};

function PlasmicSideBar__RenderFunc(props: {
  variants: PlasmicSideBar__VariantsArgs;
  args: PlasmicSideBar__ArgsType;
  overrides: PlasmicSideBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'textField.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'activeSidebarItem',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 'Tableau de bord',
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
      )}
    >
      <Stack__
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__idNp)}
      >
        <Stack__
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__eryGf)}
        >
          <Stack__
            as={'div'}
            data-plasmic-name={'recherche'}
            data-plasmic-override={overrides.recherche}
            hasGap={true}
            className={classNames(projectcss.all, sty.recherche)}
          >
            <TextField
              data-plasmic-name={'textField'}
              data-plasmic-override={overrides.textField}
              className={classNames('__wab_instance', sty.textField)}
              end={
                <CircleIcon
                  className={classNames(projectcss.all, sty.svg__fd1Xj)}
                  role={'img'}
                />
              }
              iconStart={true}
              inputMode={'text'}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7W2Hx,
                  )}
                >
                  {'Label'}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ['textField', 'value']).apply(
                  null,
                  eventArgs,
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={'Rechercher...'}
              showLabel={false}
              start={
                <SearchIcon
                  className={classNames(projectcss.all, sty.svg__zpqF9)}
                  role={'img'}
                />
              }
              type={'text'}
              value={generateStateValueProp($state, ['textField', 'value'])}
            />

            <Stack__
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fk1Vd)}
            >
              <BellIcon
                className={classNames(projectcss.all, sty.svg___0ECqB)}
                role={'img'}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__z95Q7,
                )}
                href={'#'}
                platform={'react'}
              >
                {'Notification'}
              </PlasmicLink__>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={'divider'}
            data-plasmic-override={overrides.divider}
            className={classNames(projectcss.all, sty.divider)}
          />

          <Stack__
            as={'div'}
            data-plasmic-name={'general'}
            data-plasmic-override={overrides.general}
            hasGap={true}
            className={classNames(projectcss.all, sty.general)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__z3XLo)}>
              <BtnSideBar
                data-plasmic-name={'tableauDeBord'}
                data-plasmic-override={overrides.tableauDeBord}
                className={classNames('__wab_instance', sty.tableauDeBord)}
                link={`/`}
                nom={'Tableau de bord'}
              >
                <HomeIcon
                  className={classNames(projectcss.all, sty.svg___6URSb)}
                  role={'img'}
                />
              </BtnSideBar>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___01Fke)}>
              <BtnSideBar
                data-plasmic-name={'equipes2'}
                data-plasmic-override={overrides.equipes2}
                className={classNames('__wab_instance', sty.equipes2)}
                link={`/`}
                nom={'\u00c9quipes'}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dwOfF)}>
              <BtnSideBar
                data-plasmic-name={'plan'}
                data-plasmic-override={overrides.plan}
                className={classNames('__wab_instance', sty.plan)}
                link={`/`}
                nom={'Plan et facturation'}
              >
                <FactureIcon
                  className={classNames(projectcss.all, sty.svg___7X8Xe)}
                  role={'img'}
                />
              </BtnSideBar>
            </div>
            <BtnSideBar
              data-plasmic-name={'parametre'}
              data-plasmic-override={overrides.parametre}
              className={classNames('__wab_instance', sty.parametre)}
              link={`/`}
              nom={'Param\u00e8tres g\u00e9n\u00e9raux'}
            >
              <SettingsIcon
                className={classNames(projectcss.all, sty.svg__wsiQy)}
                role={'img'}
              />
            </BtnSideBar>
          </Stack__>
          <div
            data-plasmic-name={'divider2'}
            data-plasmic-override={overrides.divider2}
            className={classNames(projectcss.all, sty.divider2)}
          />

          <Stack__
            as={'div'}
            data-plasmic-name={'projet'}
            data-plasmic-override={overrides.projet}
            hasGap={true}
            className={classNames(projectcss.all, sty.projet)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aGplf,
              )}
            >
              {'PROJET'}
            </div>
            <Stack__
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jKyRd)}
            >
              <DevSquareIcon
                className={classNames(projectcss.all, sty.svg__uuk36)}
                role={'img'}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___35TtG,
                )}
                href={'https://www.plasmic.app/'}
                platform={'react'}
              >
                {'Instances'}
              </PlasmicLink__>
            </Stack__>
            <Stack__
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lQhaN)}
            >
              <DevSquareIcon
                className={classNames(projectcss.all, sty.svg__nNcbA)}
                role={'img'}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__oYrVb,
                )}
                href={'https://www.plasmic.app/'}
                platform={'react'}
              >
                {'Services'}
              </PlasmicLink__>
            </Stack__>
            <Stack__
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__l5EJl)}
            >
              <UserIcon
                className={classNames(projectcss.all, sty.svg__bf85V)}
                role={'img'}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___998AI,
                )}
                href={'https://www.plasmic.app/'}
                platform={'react'}
              >
                {'Membres'}
              </PlasmicLink__>
            </Stack__>
            <Stack__
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pitv8)}
            >
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__rqh5L)}
                role={'img'}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__s6Hfv,
                )}
                href={'https://www.plasmic.app/'}
                platform={'react'}
              >
                {'Param\u00e8tres du projet'}
              </PlasmicLink__>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={'divider3'}
          data-plasmic-override={overrides.divider3}
          className={classNames(projectcss.all, sty.divider3)}
        />

        <Stack__
          as={'div'}
          data-plasmic-name={'profil'}
          data-plasmic-override={overrides.profil}
          hasGap={true}
          className={classNames(projectcss.all, sty.profil)}
        >
          <Stack__
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__n30Jz)}
          >
            <Icon11Icon
              className={classNames(projectcss.all, sty.svg__pc0LT)}
              role={'img'}
            />

            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___2570G,
              )}
              href={'https://www.plasmic.app/'}
              platform={'react'}
            >
              {'Profil'}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nwccv)}
          >
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__imKm)}
              role={'img'}
            />

            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___0W0QO,
              )}
              href={'https://www.plasmic.app/'}
              platform={'react'}
            >
              {'Param\u00e8tres du projet'}
            </PlasmicLink__>
          </Stack__>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'recherche',
    'textField',
    'divider',
    'general',
    'tableauDeBord',
    'equipes2',
    'plan',
    'parametre',
    'divider2',
    'projet',
    'divider3',
    'profil',
  ],
  recherche: ['recherche', 'textField'],
  textField: ['textField'],
  divider: ['divider'],
  general: ['general', 'tableauDeBord', 'equipes2', 'plan', 'parametre'],
  tableauDeBord: ['tableauDeBord'],
  equipes2: ['equipes2'],
  plan: ['plan'],
  parametre: ['parametre'],
  divider2: ['divider2'],
  projet: ['projet'],
  divider3: ['divider3'],
  profil: ['profil'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  recherche: 'div';
  textField: typeof TextField;
  divider: 'div';
  general: 'div';
  tableauDeBord: typeof BtnSideBar;
  equipes2: typeof BtnSideBar;
  plan: typeof BtnSideBar;
  parametre: typeof BtnSideBar;
  divider2: 'div';
  projet: 'div';
  divider3: 'div';
  profil: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBar__VariantsArgs;
    args?: PlasmicSideBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSideBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSideBar__ArgProps,
          internalVariantPropNames: PlasmicSideBar__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicSideBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSideBar';
  } else {
    func.displayName = `PlasmicSideBar.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBar = Object.assign(
  // Top-level PlasmicSideBar renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    recherche: makeNodeComponent('recherche'),
    textField: makeNodeComponent('textField'),
    divider: makeNodeComponent('divider'),
    general: makeNodeComponent('general'),
    tableauDeBord: makeNodeComponent('tableauDeBord'),
    equipes2: makeNodeComponent('equipes2'),
    plan: makeNodeComponent('plan'),
    parametre: makeNodeComponent('parametre'),
    divider2: makeNodeComponent('divider2'),
    projet: makeNodeComponent('projet'),
    divider3: makeNodeComponent('divider3'),
    profil: makeNodeComponent('profil'),

    // Metadata about props expected for PlasmicSideBar
    internalVariantProps: PlasmicSideBar__VariantProps,
    internalArgProps: PlasmicSideBar__ArgProps,
  },
);

export default PlasmicSideBar;
/* prettier-ignore-end */
