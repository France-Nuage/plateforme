/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: WgBKdGHdVFBy
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

// plasmic-import: GyTJhs9veKrj/component
import BtnSideBar from '../../BtnSideBar';
import TextField from '../../TextField';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: A9xYAhwSD6i3/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicSideBar.module.css';
// plasmic-import: CnqcBI0upv9T/icon
import BellIcon from './icons/PlasmicIcon__Bell';
// plasmic-import: tmJQKBQDJEoe/icon
import ChevronRightIcon from './icons/PlasmicIcon__ChevronRight';
// plasmic-import: TueurUSDtevy/icon
import CircleIcon from './icons/PlasmicIcon__Circle';
// plasmic-import: 0zFkNWu9LQOC/icon
import DevSquareIcon from './icons/PlasmicIcon__DevSquare';
// plasmic-import: HOWLf5KCV6xi/icon
import FactureIcon from './icons/PlasmicIcon__Facture';
// plasmic-import: INMXktOfIWiD/icon
import HomeIcon from './icons/PlasmicIcon__Home';
// plasmic-import: M5Yt0pb7IRm_/icon
import Icon10Icon from './icons/PlasmicIcon__Icon10';
// plasmic-import: MqRFF7vxUCiv/icon
import Icon11Icon from './icons/PlasmicIcon__Icon11';
// plasmic-import: WgBKdGHdVFBy/css

import SearchIcon from './icons/PlasmicIcon__Search';
// plasmic-import: q8GlA5e81ML_/icon
import SettingsIcon from './icons/PlasmicIcon__Settings';
// plasmic-import: LPIiQLy4lvIE/icon
import UserIcon from './icons/PlasmicIcon__User';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: s_RpDhzeQJX7/icon

createPlasmicElementProxy;

export type PlasmicSideBar__VariantMembers = {
  isOpen: 'isOpen';
  tableauDeBord2: 'tableauDeBord2';
  equipes: 'equipes';
  plan2: 'plan2';
  parametresGeneraux: 'parametresGeneraux';
  instances: 'instances';
  services: 'services';
  membres: 'membres';
  parametreDuProjet: 'parametreDuProjet';
};
export type PlasmicSideBar__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<'isOpen'>;
  tableauDeBord2?: SingleBooleanChoiceArg<'tableauDeBord2'>;
  equipes?: SingleBooleanChoiceArg<'equipes'>;
  plan2?: SingleBooleanChoiceArg<'plan2'>;
  parametresGeneraux?: SingleBooleanChoiceArg<'parametresGeneraux'>;
  instances?: SingleBooleanChoiceArg<'instances'>;
  services?: SingleBooleanChoiceArg<'services'>;
  membres?: SingleBooleanChoiceArg<'membres'>;
  parametreDuProjet?: SingleBooleanChoiceArg<'parametreDuProjet'>;
};
type VariantPropType = keyof PlasmicSideBar__VariantsArgs;
export const PlasmicSideBar__VariantProps = new Array<VariantPropType>(
  'isOpen',
  'tableauDeBord2',
  'equipes',
  'plan2',
  'parametresGeneraux',
  'instances',
  'services',
  'membres',
  'parametreDuProjet',
);

export type PlasmicSideBar__ArgsType = {};
type ArgPropType = keyof PlasmicSideBar__ArgsType;
export const PlasmicSideBar__ArgProps = new Array<ArgPropType>();

export type PlasmicSideBar__OverridesType = {
  root?: Flex__<'div'>;
  recherche?: Flex__<'div'>;
  textField?: Flex__<typeof TextField>;
  divider?: Flex__<'div'>;
  general?: Flex__<'div'>;
  tableauDeBord?: Flex__<typeof BtnSideBar>;
  equipes2?: Flex__<typeof BtnSideBar>;
  plan?: Flex__<typeof BtnSideBar>;
  parametre?: Flex__<typeof BtnSideBar>;
  divider2?: Flex__<'div'>;
  projet?: Flex__<'div'>;
  parametre3?: Flex__<typeof BtnSideBar>;
  parametre6?: Flex__<typeof BtnSideBar>;
  parametre4?: Flex__<typeof BtnSideBar>;
  parametre5?: Flex__<typeof BtnSideBar>;
  divider3?: Flex__<'div'>;
  profil?: Flex__<'div'>;
  parametre7?: Flex__<typeof BtnSideBar>;
  parametre9?: Flex__<typeof BtnSideBar>;
};

export interface DefaultSideBarProps {
  isOpen?: SingleBooleanChoiceArg<'isOpen'>;
  tableauDeBord2?: SingleBooleanChoiceArg<'tableauDeBord2'>;
  equipes?: SingleBooleanChoiceArg<'equipes'>;
  plan2?: SingleBooleanChoiceArg<'plan2'>;
  parametresGeneraux?: SingleBooleanChoiceArg<'parametresGeneraux'>;
  instances?: SingleBooleanChoiceArg<'instances'>;
  services?: SingleBooleanChoiceArg<'services'>;
  membres?: SingleBooleanChoiceArg<'membres'>;
  parametreDuProjet?: SingleBooleanChoiceArg<'parametreDuProjet'>;
  className?: string;
}

const $$ = {};

function PlasmicSideBar__RenderFunc(props: {
  variants: PlasmicSideBar__VariantsArgs;
  args: PlasmicSideBar__ArgsType;
  overrides: PlasmicSideBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'textField.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'activeSidebarItem',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 'Tableau de bord',
      },
      {
        path: 'isVisible',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },
      {
        path: 'isOpen',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen,
      },
      {
        path: 'tableauDeBord2',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.tableauDeBord2,
      },
      {
        path: 'equipes',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.equipes,
      },
      {
        path: 'plan2',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.plan2,
      },
      {
        path: 'parametresGeneraux',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.parametresGeneraux,
      },
      {
        path: 'instances',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.instances,
      },
      {
        path: 'services',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.services,
      },
      {
        path: 'membres',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.membres,
      },
      {
        path: 'parametreDuProjet',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.parametreDuProjet,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootequipes]: hasVariant($state, 'equipes', 'equipes'),
          [sty.rootisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
          [sty.roottableauDeBord2]: hasVariant(
            $state,
            'tableauDeBord2',
            'tableauDeBord2',
          ),
        },
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___4XPnC, {
          [sty.freeBoxequipes___4XPnChZrY4]: hasVariant(
            $state,
            'equipes',
            'equipes',
          ),
          [sty.freeBoxinstances___4XPnC7Riwu]: hasVariant(
            $state,
            'instances',
            'instances',
          ),
          [sty.freeBoxisOpen___4XPnCvo8B3]: hasVariant(
            $state,
            'isOpen',
            'isOpen',
          ),
          [sty.freeBoxservices___4XPnCbgQlv]: hasVariant(
            $state,
            'services',
            'services',
          ),
          [sty.freeBoxtableauDeBord2___4XPnCBlPhl]: hasVariant(
            $state,
            'tableauDeBord2',
            'tableauDeBord2',
          ),
        })}
      >
        <Stack__
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__idNp, {
            [sty.freeBoxequipes__idNpHZrY4]: hasVariant(
              $state,
              'equipes',
              'equipes',
            ),
            [sty.freeBoxisOpen__idNpVo8B3]: hasVariant(
              $state,
              'isOpen',
              'isOpen',
            ),
          })}
        >
          <Stack__
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eryGf)}
          >
            <Stack__
              as={'div'}
              data-plasmic-name={'recherche'}
              data-plasmic-override={overrides.recherche}
              hasGap={true}
              className={classNames(projectcss.all, sty.recherche)}
            >
              <TextField
                data-plasmic-name={'textField'}
                data-plasmic-override={overrides.textField}
                className={classNames('__wab_instance', sty.textField)}
                end={
                  <CircleIcon
                    className={classNames(projectcss.all, sty.svg__fd1Xj)}
                    role={'img'}
                  />
                }
                iconStart={true}
                inputMode={'text'}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7W2Hx,
                    )}
                  >
                    {'Label'}
                  </div>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    'textField',
                    'value',
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={'Rechercher...'}
                showLabel={false}
                start={
                  <SearchIcon
                    className={classNames(projectcss.all, sty.svg__zpqF9)}
                    role={'img'}
                  />
                }
                type={'text'}
                value={generateStateValueProp($state, ['textField', 'value'])}
              />
            </Stack__>
            <div
              data-plasmic-name={'divider'}
              data-plasmic-override={overrides.divider}
              className={classNames(projectcss.all, sty.divider)}
            />

            <Stack__
              as={'div'}
              data-plasmic-name={'general'}
              data-plasmic-override={overrides.general}
              hasGap={true}
              className={classNames(projectcss.all, sty.general)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__z3XLo)}>
                <BtnSideBar
                  data-plasmic-name={'tableauDeBord'}
                  data-plasmic-override={overrides.tableauDeBord}
                  className={classNames('__wab_instance', sty.tableauDeBord, {
                    [sty.tableauDeBordisOpen]: hasVariant(
                      $state,
                      'isOpen',
                      'isOpen',
                    ),
                    [sty.tableauDeBordmembres]: hasVariant(
                      $state,
                      'membres',
                      'membres',
                    ),
                    [sty.tableauDeBordparametreDuProjet]: hasVariant(
                      $state,
                      'parametreDuProjet',
                      'parametreDuProjet',
                    ),
                    [sty.tableauDeBordservices]: hasVariant(
                      $state,
                      'services',
                      'services',
                    ),
                    [sty.tableauDeBordtableauDeBord2]: hasVariant(
                      $state,
                      'tableauDeBord2',
                      'tableauDeBord2',
                    ),
                  })}
                  isActive={
                    hasVariant($state, 'tableauDeBord2', 'tableauDeBord2')
                      ? true
                      : undefined
                  }
                  link={
                    hasVariant($state, 'tableauDeBord2', 'tableauDeBord2')
                      ? `/`
                      : hasVariant($state, 'isOpen', 'isOpen') &&
                          hasVariant(globalVariants, 'screen', 'mobile')
                        ? `/`
                        : `/`
                  }
                  nom={'Tableau de bord'}
                >
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg___6URSb)}
                    role={'img'}
                  />
                </BtnSideBar>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___01Fke)}>
                <BtnSideBar
                  data-plasmic-name={'equipes2'}
                  data-plasmic-override={overrides.equipes2}
                  className={classNames('__wab_instance', sty.equipes2, {
                    [sty.equipes2equipes]: hasVariant(
                      $state,
                      'equipes',
                      'equipes',
                    ),
                  })}
                  isActive={
                    hasVariant($state, 'equipes', 'equipes') ? true : undefined
                  }
                  link={`/`}
                  nom={'\u00c9quipes'}
                >
                  <UserIcon
                    className={classNames(projectcss.all, sty.svg__j3Qoq)}
                    role={'img'}
                  />
                </BtnSideBar>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dwOfF)}>
                <BtnSideBar
                  data-plasmic-name={'plan'}
                  data-plasmic-override={overrides.plan}
                  className={classNames('__wab_instance', sty.plan, {
                    [sty.planplan2]: hasVariant($state, 'plan2', 'plan2'),
                  })}
                  isActive={
                    hasVariant($state, 'plan2', 'plan2') ? true : undefined
                  }
                  link={`/`}
                  nom={'Plan et facturation'}
                >
                  <FactureIcon
                    className={classNames(projectcss.all, sty.svg___7X8Xe)}
                    role={'img'}
                  />
                </BtnSideBar>
              </div>
              <BtnSideBar
                data-plasmic-name={'parametre'}
                data-plasmic-override={overrides.parametre}
                className={classNames('__wab_instance', sty.parametre, {
                  [sty.parametreparametresGeneraux]: hasVariant(
                    $state,
                    'parametresGeneraux',
                    'parametresGeneraux',
                  ),
                  [sty.parametreplan2]: hasVariant($state, 'plan2', 'plan2'),
                })}
                isActive={
                  hasVariant($state, 'parametresGeneraux', 'parametresGeneraux')
                    ? true
                    : undefined
                }
                link={`/`}
                nom={'Param\u00e8tres g\u00e9n\u00e9raux'}
              >
                <SettingsIcon
                  className={classNames(projectcss.all, sty.svg__wsiQy)}
                  role={'img'}
                />
              </BtnSideBar>
            </Stack__>
            <div
              data-plasmic-name={'divider2'}
              data-plasmic-override={overrides.divider2}
              className={classNames(projectcss.all, sty.divider2)}
            />

            <Stack__
              as={'div'}
              data-plasmic-name={'projet'}
              data-plasmic-override={overrides.projet}
              hasGap={true}
              className={classNames(projectcss.all, sty.projet, {
                [sty.projetisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aGplf,
                )}
              >
                {'PROJET'}
              </div>
              <BtnSideBar
                data-plasmic-name={'parametre3'}
                data-plasmic-override={overrides.parametre3}
                className={classNames('__wab_instance', sty.parametre3, {
                  [sty.parametre3equipes]: hasVariant(
                    $state,
                    'equipes',
                    'equipes',
                  ),
                  [sty.parametre3instances]: hasVariant(
                    $state,
                    'instances',
                    'instances',
                  ),
                  [sty.parametre3isOpen]: hasVariant(
                    $state,
                    'isOpen',
                    'isOpen',
                  ),
                  [sty.parametre3membres]: hasVariant(
                    $state,
                    'membres',
                    'membres',
                  ),
                  [sty.parametre3parametreDuProjet]: hasVariant(
                    $state,
                    'parametreDuProjet',
                    'parametreDuProjet',
                  ),
                  [sty.parametre3services]: hasVariant(
                    $state,
                    'services',
                    'services',
                  ),
                  [sty.parametre3tableauDeBord2]: hasVariant(
                    $state,
                    'tableauDeBord2',
                    'tableauDeBord2',
                  ),
                })}
                isActive={
                  hasVariant($state, 'instances', 'instances')
                    ? true
                    : undefined
                }
                link={
                  hasVariant($state, 'parametreDuProjet', 'parametreDuProjet')
                    ? `/instances`
                    : hasVariant($state, 'membres', 'membres')
                      ? `/instances`
                      : hasVariant($state, 'services', 'services')
                        ? `/instances`
                        : hasVariant($state, 'instances', 'instances')
                          ? `/instances`
                          : hasVariant($state, 'isOpen', 'isOpen') &&
                              hasVariant(globalVariants, 'screen', 'mobile')
                            ? `/instances`
                            : `/instances`
                }
                nom={'Instances'}
              >
                <DevSquareIcon
                  className={classNames(projectcss.all, sty.svg__aeTd)}
                  role={'img'}
                />
              </BtnSideBar>
              <BtnSideBar
                data-plasmic-name={'parametre6'}
                data-plasmic-override={overrides.parametre6}
                className={classNames('__wab_instance', sty.parametre6, {
                  [sty.parametre6isOpen]: hasVariant(
                    $state,
                    'isOpen',
                    'isOpen',
                  ),
                  [sty.parametre6services]: hasVariant(
                    $state,
                    'services',
                    'services',
                  ),
                })}
                isActive={
                  hasVariant($state, 'services', 'services') ? true : undefined
                }
                link={`/`}
                nom={'Services'}
              >
                <DevSquareIcon
                  className={classNames(projectcss.all, sty.svg__pGfe2)}
                  role={'img'}
                />
              </BtnSideBar>
              <BtnSideBar
                data-plasmic-name={'parametre4'}
                data-plasmic-override={overrides.parametre4}
                className={classNames('__wab_instance', sty.parametre4, {
                  [sty.parametre4membres]: hasVariant(
                    $state,
                    'membres',
                    'membres',
                  ),
                })}
                isActive={
                  hasVariant($state, 'membres', 'membres') ? true : undefined
                }
                link={`/`}
                nom={'Membres'}
              >
                <UserIcon
                  className={classNames(projectcss.all, sty.svg__zzrJu)}
                  role={'img'}
                />
              </BtnSideBar>
              <BtnSideBar
                data-plasmic-name={'parametre5'}
                data-plasmic-override={overrides.parametre5}
                className={classNames('__wab_instance', sty.parametre5, {
                  [sty.parametre5parametreDuProjet]: hasVariant(
                    $state,
                    'parametreDuProjet',
                    'parametreDuProjet',
                  ),
                })}
                isActive={
                  hasVariant($state, 'parametreDuProjet', 'parametreDuProjet')
                    ? true
                    : undefined
                }
                link={`/`}
                nom={'Param\u00e8tres du projet'}
              >
                <BellIcon
                  className={classNames(projectcss.all, sty.svg__aupw)}
                  role={'img'}
                />
              </BtnSideBar>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={'divider3'}
            data-plasmic-override={overrides.divider3}
            className={classNames(projectcss.all, sty.divider3)}
          />

          <Stack__
            as={'div'}
            data-plasmic-name={'profil'}
            data-plasmic-override={overrides.profil}
            hasGap={true}
            className={classNames(projectcss.all, sty.profil)}
          >
            <Stack__
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__n30Jz)}
            >
              <BtnSideBar
                data-plasmic-name={'parametre7'}
                data-plasmic-override={overrides.parametre7}
                className={classNames('__wab_instance', sty.parametre7, {
                  [sty.parametre7isOpen]: hasVariant(
                    $state,
                    'isOpen',
                    'isOpen',
                  ),
                  [sty.parametre7parametreDuProjet]: hasVariant(
                    $state,
                    'parametreDuProjet',
                    'parametreDuProjet',
                  ),
                })}
                link={`/`}
                nom={'Profil'}
              >
                <Icon11Icon
                  className={classNames(projectcss.all, sty.svg__zftOu)}
                  role={'img'}
                />
              </BtnSideBar>
              <BtnSideBar
                data-plasmic-name={'parametre9'}
                data-plasmic-override={overrides.parametre9}
                className={classNames('__wab_instance', sty.parametre9)}
                link={`/`}
                nom={'FAQ'}
              >
                <Icon10Icon
                  className={classNames(projectcss.all, sty.svg__m2Ofs)}
                  role={'img'}
                />
              </BtnSideBar>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          className={classNames(projectcss.all, sty.freeBox__vJyR1, {
            [sty.freeBoxisOpen__vJyR1Vo8B3]: hasVariant(
              $state,
              'isOpen',
              'isOpen',
            ),
          })}
          onClick={async (event) => {
            const $steps = {};

            $steps['updateIsClose'] = true
              ? (() => {
                  const actionArgs = { vgroup: 'isOpen', operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === 'string') {
                      value = [value];
                    }

                    const oldValue = $stateGet($state, vgroup);
                    $stateSet($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps['updateIsClose'] != null &&
              typeof $steps['updateIsClose'] === 'object' &&
              typeof $steps['updateIsClose'].then === 'function'
            ) {
              $steps['updateIsClose'] = await $steps['updateIsClose'];
            }
          }}
        >
          <ChevronRightIcon
            className={classNames(projectcss.all, sty.svg__e0FkA, {
              [sty.svgisOpen__e0FkAvo8B3]: hasVariant(
                $state,
                'isOpen',
                'isOpen',
              ),
            })}
            role={'img'}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'recherche',
    'textField',
    'divider',
    'general',
    'tableauDeBord',
    'equipes2',
    'plan',
    'parametre',
    'divider2',
    'projet',
    'parametre3',
    'parametre6',
    'parametre4',
    'parametre5',
    'divider3',
    'profil',
    'parametre7',
    'parametre9',
  ],
  recherche: ['recherche', 'textField'],
  textField: ['textField'],
  divider: ['divider'],
  general: ['general', 'tableauDeBord', 'equipes2', 'plan', 'parametre'],
  tableauDeBord: ['tableauDeBord'],
  equipes2: ['equipes2'],
  plan: ['plan'],
  parametre: ['parametre'],
  divider2: ['divider2'],
  projet: ['projet', 'parametre3', 'parametre6', 'parametre4', 'parametre5'],
  parametre3: ['parametre3'],
  parametre6: ['parametre6'],
  parametre4: ['parametre4'],
  parametre5: ['parametre5'],
  divider3: ['divider3'],
  profil: ['profil', 'parametre7', 'parametre9'],
  parametre7: ['parametre7'],
  parametre9: ['parametre9'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  recherche: 'div';
  textField: typeof TextField;
  divider: 'div';
  general: 'div';
  tableauDeBord: typeof BtnSideBar;
  equipes2: typeof BtnSideBar;
  plan: typeof BtnSideBar;
  parametre: typeof BtnSideBar;
  divider2: 'div';
  projet: 'div';
  parametre3: typeof BtnSideBar;
  parametre6: typeof BtnSideBar;
  parametre4: typeof BtnSideBar;
  parametre5: typeof BtnSideBar;
  divider3: 'div';
  profil: 'div';
  parametre7: typeof BtnSideBar;
  parametre9: typeof BtnSideBar;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBar__VariantsArgs;
    args?: PlasmicSideBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSideBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSideBar__ArgProps,
          internalVariantPropNames: PlasmicSideBar__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicSideBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSideBar';
  } else {
    func.displayName = `PlasmicSideBar.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBar = Object.assign(
  // Top-level PlasmicSideBar renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    recherche: makeNodeComponent('recherche'),
    textField: makeNodeComponent('textField'),
    divider: makeNodeComponent('divider'),
    general: makeNodeComponent('general'),
    tableauDeBord: makeNodeComponent('tableauDeBord'),
    equipes2: makeNodeComponent('equipes2'),
    plan: makeNodeComponent('plan'),
    parametre: makeNodeComponent('parametre'),
    divider2: makeNodeComponent('divider2'),
    projet: makeNodeComponent('projet'),
    parametre3: makeNodeComponent('parametre3'),
    parametre6: makeNodeComponent('parametre6'),
    parametre4: makeNodeComponent('parametre4'),
    parametre5: makeNodeComponent('parametre5'),
    divider3: makeNodeComponent('divider3'),
    profil: makeNodeComponent('profil'),
    parametre7: makeNodeComponent('parametre7'),
    parametre9: makeNodeComponent('parametre9'),

    // Metadata about props expected for PlasmicSideBar
    internalVariantProps: PlasmicSideBar__VariantProps,
    internalArgProps: PlasmicSideBar__ArgProps,
  },
);

export default PlasmicSideBar;
/* prettier-ignore-end */
