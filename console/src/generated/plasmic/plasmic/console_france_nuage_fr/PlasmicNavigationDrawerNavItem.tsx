/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: A9xYAhwSD6i3
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

import FormTextInput from '../../FormTextInput';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: hFREyvMXF-HZ/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicNavigationDrawerNavItem.module.css';
// plasmic-import: A9xYAhwSD6i3/css

import UserIcon from './icons/PlasmicIcon__User';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: HOWLf5KCV6xi/icon

createPlasmicElementProxy;

export type PlasmicNavigationDrawerNavItem__VariantMembers = {
  isActive: 'isActive';
};
export type PlasmicNavigationDrawerNavItem__VariantsArgs = {
  isActive?: SingleBooleanChoiceArg<'isActive'>;
};
type VariantPropType = keyof PlasmicNavigationDrawerNavItem__VariantsArgs;
export const PlasmicNavigationDrawerNavItem__VariantProps =
  new Array<VariantPropType>('isActive');

export type PlasmicNavigationDrawerNavItem__ArgsType = {
  nom?: string;
  children?: React.ReactNode;
  link?: string;
};
type ArgPropType = keyof PlasmicNavigationDrawerNavItem__ArgsType;
export const PlasmicNavigationDrawerNavItem__ArgProps = new Array<ArgPropType>(
  'nom',
  'children',
  'link',
);

export type PlasmicNavigationDrawerNavItem__OverridesType = {
  root?: Flex__<'div'>;
  freeBox?: Flex__<'div'>;
  link?: Flex__<'a'>;
  textInput?: Flex__<typeof FormTextInput>;
};

export interface DefaultNavigationDrawerNavItemProps {
  nom?: string;
  children?: React.ReactNode;
  link?: string;
  isActive?: SingleBooleanChoiceArg<'isActive'>;
  className?: string;
}

const $$ = {};

function PlasmicNavigationDrawerNavItem__RenderFunc(props: {
  variants: PlasmicNavigationDrawerNavItem__VariantsArgs;
  args: PlasmicNavigationDrawerNavItem__ArgsType;
  overrides: PlasmicNavigationDrawerNavItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          nom: 'txt',
          link: '#',
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'isActive',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return (
                  (window.location.pathname || '').replace(/\/$/, '') ===
                  $props.link
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.isActive,
      },
      {
        path: 'textInput.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <Stack__
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootisActive]: hasVariant($state, 'isActive', 'isActive') },
      )}
    >
      <div
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <UserIcon
              className={classNames(projectcss.all, sty.svg__h3UDg)}
              role={'img'}
            />
          ),

          value: args.children,
        })}
      </div>
      <PlasmicLink__
        data-plasmic-name={'link'}
        data-plasmic-override={overrides.link}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link,
          { [sty.linkisActive]: hasVariant($state, 'isActive', 'isActive') },
        )}
        href={(() => {
          try {
            return $props.link;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === 'PlasmicUndefinedDataError'
            ) {
              return 'https://www.plasmic.app/';
            }
            throw e;
          }
        })()}
        platform={'react'}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.nom;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return '#';
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </PlasmicLink__>
      <FormTextInput
        data-plasmic-name={'textInput'}
        data-plasmic-override={overrides.textInput}
        className={classNames('__wab_instance', sty.textInput)}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ['textInput', 'value']).apply(
            null,
            eventArgs,
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        placeholder={'rechercher...'}
        value={generateStateValueProp($state, ['textInput', 'value'])}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'freeBox', 'link', 'textInput'],
  freeBox: ['freeBox'],
  link: ['link'],
  textInput: ['textInput'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  freeBox: 'div';
  link: 'a';
  textInput: typeof FormTextInput;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationDrawerNavItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationDrawerNavItem__VariantsArgs;
    args?: PlasmicNavigationDrawerNavItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationDrawerNavItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigationDrawerNavItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationDrawerNavItem__ArgProps,
          internalVariantPropNames:
            PlasmicNavigationDrawerNavItem__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicNavigationDrawerNavItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNavigationDrawerNavItem';
  } else {
    func.displayName = `PlasmicNavigationDrawerNavItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationDrawerNavItem = Object.assign(
  // Top-level PlasmicNavigationDrawerNavItem renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent('freeBox'),
    link: makeNodeComponent('link'),
    textInput: makeNodeComponent('textInput'),

    // Metadata about props expected for PlasmicNavigationDrawerNavItem
    internalVariantProps: PlasmicNavigationDrawerNavItem__VariantProps,
    internalArgProps: PlasmicNavigationDrawerNavItem__ArgProps,
  },
);

export default PlasmicNavigationDrawerNavItem;
/* prettier-ignore-end */
