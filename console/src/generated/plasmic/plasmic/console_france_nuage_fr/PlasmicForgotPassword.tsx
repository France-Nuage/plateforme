/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: 6-9MXKdE86hS
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

import { ConsoleProvider } from '../../../../providers/ConsoleProvider';
// plasmic-import: vWN9dmdYefpY/codeComponent
import ConsoleBackground from '../../ConsoleBackground';
// plasmic-import: 9OJlOmM7wOCx/component
import ConsoleLogo from '../../ConsoleLogo';
// plasmic-import: hFREyvMXF-HZ/component
import FormButton from '../../FormButton';
// plasmic-import: 0unuJERr1LKB/component
import FormCard from '../../FormCard';
// plasmic-import: HmfUjAC5XXE-/component
import FormInputGroup from '../../FormInputGroup';
// plasmic-import: yVRH58qXB1fB/component
import FormLink from '../../FormLink';
// plasmic-import: BPkDJbnqSOZ0/component
import FormText from '../../FormText';
// plasmic-import: VlFvtDh9iBdw/component
import FormTextInput from '../../FormTextInput';
// plasmic-import: MRElL_DPUhFE/component
import FormTitle from '../../FormTitle';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicForgotPassword.module.css';
// plasmic-import: wUZakWTdeWBo/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: INMXktOfIWiD/icon
import ChevronDownIcon from './icons/PlasmicIcon__ChevronDown';
// plasmic-import: 6-9MXKdE86hS/css

import CircleIcon from './icons/PlasmicIcon__Circle';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicForgotPassword__VariantMembers = {};
export type PlasmicForgotPassword__VariantsArgs = {};
type VariantPropType = keyof PlasmicForgotPassword__VariantsArgs;
export const PlasmicForgotPassword__VariantProps = new Array<VariantPropType>();

export type PlasmicForgotPassword__ArgsType = {};
type ArgPropType = keyof PlasmicForgotPassword__ArgsType;
export const PlasmicForgotPassword__ArgProps = new Array<ArgPropType>();

export type PlasmicForgotPassword__OverridesType = {
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  consoleBackground?: Flex__<typeof ConsoleBackground>;
  formCard?: Flex__<typeof FormCard>;
  formTitle?: Flex__<typeof FormTitle>;
  formInputGroup?: Flex__<typeof FormInputGroup>;
  email?: Flex__<typeof FormTextInput>;
  login?: Flex__<typeof FormButton>;
  text?: Flex__<'div'>;
  logIn?: Flex__<'div'>;
  rememberIt?: Flex__<typeof FormText>;
  signUpLink?: Flex__<typeof FormLink>;
};

export interface DefaultForgotPasswordProps {
  className?: string;
}

const $$ = {};

function PlasmicForgotPassword__RenderFunc(props: {
  variants: PlasmicForgotPassword__VariantsArgs;
  args: PlasmicForgotPassword__ArgsType;
  overrides: PlasmicForgotPassword__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'email.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <ConsoleProvider
          data-plasmic-name={'consoleProvider'}
          data-plasmic-override={overrides.consoleProvider}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            '__wab_instance',
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.consoleProvider,
          )}
          ref={(ref) => {
            $refs['consoleProvider'] = ref;
          }}
        >
          <DataCtxReader__>
            {($ctx) => (
              <ConsoleBackground
                data-plasmic-name={'consoleBackground'}
                data-plasmic-override={overrides.consoleBackground}
                className={classNames('__wab_instance', sty.consoleBackground)}
                content={
                  <FormCard
                    data-plasmic-name={'formCard'}
                    data-plasmic-override={overrides.formCard}
                    className={classNames('__wab_instance', sty.formCard)}
                    content={
                      <React.Fragment>
                        <FormTitle
                          data-plasmic-name={'formTitle'}
                          data-plasmic-override={overrides.formTitle}
                          className={classNames(
                            '__wab_instance',
                            sty.formTitle,
                          )}
                          subtitle={
                            'Entrez votre email ci-dessous pour recevoir un lien de r\u00e9initialisation de mot de passe.'
                          }
                          title={'Mot de passe oubli\u00e9?'}
                        />

                        <FormInputGroup
                          data-plasmic-name={'formInputGroup'}
                          data-plasmic-override={overrides.formInputGroup}
                          className={classNames(
                            '__wab_instance',
                            sty.formInputGroup,
                          )}
                          inputs={
                            <React.Fragment>
                              {(() => {
                                const child$Props = {
                                  autoComplete: ['email'],
                                  className: classNames(
                                    '__wab_instance',
                                    sty.email,
                                  ),
                                  inputMode: 'email',
                                  inputType: 'email',
                                  label: 'Email',
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      'email',
                                      'value',
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  placeholder: ``,
                                  value: generateStateValueProp($state, [
                                    'email',
                                    'value',
                                  ]),
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: 'email.value',
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries,
                                      }) =>
                                        (() => {
                                          try {
                                            return $ctx.query.email;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                'PlasmicUndefinedDataError'
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                    },
                                  ],
                                  [],
                                );
                                return (
                                  <FormTextInput
                                    data-plasmic-name={'email'}
                                    data-plasmic-override={overrides.email}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <FormButton
                                data-plasmic-name={'login'}
                                data-plasmic-override={overrides.login}
                                className={classNames(
                                  '__wab_instance',
                                  sty.login,
                                )}
                                disabled={true}
                                label={
                                  <div
                                    data-plasmic-name={'text'}
                                    data-plasmic-override={overrides.text}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text,
                                    )}
                                  >
                                    {'Envoyer le lien de r\u00e9initialisation'}
                                  </div>
                                }
                                onClick={async (event) => {
                                  const $steps = {};
                                }}
                              />

                              <Stack__
                                as={'div'}
                                data-plasmic-name={'logIn'}
                                data-plasmic-override={overrides.logIn}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.logIn,
                                )}
                              >
                                <FormText
                                  data-plasmic-name={'rememberIt'}
                                  data-plasmic-override={overrides.rememberIt}
                                  className={classNames(
                                    '__wab_instance',
                                    sty.rememberIt,
                                  )}
                                  text={"Tu t'en souviens ?"}
                                />

                                <FormLink
                                  data-plasmic-name={'signUpLink'}
                                  data-plasmic-override={overrides.signUpLink}
                                  className={classNames(
                                    '__wab_instance',
                                    sty.signUpLink,
                                  )}
                                  content={'Se connecter'}
                                  destination={(() => {
                                    try {
                                      return (
                                        '/login?email=' +
                                        ($state.email.value || '')
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          'PlasmicUndefinedDataError'
                                      ) {
                                        return `/login`;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </Stack__>
                            </React.Fragment>
                          }
                        />
                      </React.Fragment>
                    }
                  />
                }
              />
            )}
          </DataCtxReader__>
        </ConsoleProvider>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  consoleProvider: [
    'consoleProvider',
    'consoleBackground',
    'formCard',
    'formTitle',
    'formInputGroup',
    'email',
    'login',
    'text',
    'logIn',
    'rememberIt',
    'signUpLink',
  ],
  consoleBackground: [
    'consoleBackground',
    'formCard',
    'formTitle',
    'formInputGroup',
    'email',
    'login',
    'text',
    'logIn',
    'rememberIt',
    'signUpLink',
  ],
  formCard: [
    'formCard',
    'formTitle',
    'formInputGroup',
    'email',
    'login',
    'text',
    'logIn',
    'rememberIt',
    'signUpLink',
  ],
  formTitle: ['formTitle'],
  formInputGroup: [
    'formInputGroup',
    'email',
    'login',
    'text',
    'logIn',
    'rememberIt',
    'signUpLink',
  ],
  email: ['email'],
  login: ['login', 'text'],
  text: ['text'],
  logIn: ['logIn', 'rememberIt', 'signUpLink'],
  rememberIt: ['rememberIt'],
  signUpLink: ['signUpLink'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  consoleProvider: typeof ConsoleProvider;
  consoleBackground: typeof ConsoleBackground;
  formCard: typeof FormCard;
  formTitle: typeof FormTitle;
  formInputGroup: typeof FormInputGroup;
  email: typeof FormTextInput;
  login: typeof FormButton;
  text: 'div';
  logIn: 'div';
  rememberIt: typeof FormText;
  signUpLink: typeof FormLink;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicForgotPassword__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicForgotPassword__VariantsArgs;
    args?: PlasmicForgotPassword__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicForgotPassword__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicForgotPassword__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicForgotPassword__ArgProps,
          internalVariantPropNames: PlasmicForgotPassword__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicForgotPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'consoleProvider') {
    func.displayName = 'PlasmicForgotPassword';
  } else {
    func.displayName = `PlasmicForgotPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicForgotPassword = Object.assign(
  // Top-level PlasmicForgotPassword renders the root element
  makeNodeComponent('consoleProvider'),
  {
    // Helper components rendering sub-elements
    consoleBackground: makeNodeComponent('consoleBackground'),
    formCard: makeNodeComponent('formCard'),
    formTitle: makeNodeComponent('formTitle'),
    formInputGroup: makeNodeComponent('formInputGroup'),
    email: makeNodeComponent('email'),
    login: makeNodeComponent('login'),
    text: makeNodeComponent('text'),
    logIn: makeNodeComponent('logIn'),
    rememberIt: makeNodeComponent('rememberIt'),
    signUpLink: makeNodeComponent('signUpLink'),

    // Metadata about props expected for PlasmicForgotPassword
    internalVariantProps: PlasmicForgotPassword__VariantProps,
    internalArgProps: PlasmicForgotPassword__ArgProps,

    // Page metadata
    pageMetadata: {
      title: 'Mot de passe oublié',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  },
);

export default PlasmicForgotPassword;
/* prettier-ignore-end */
