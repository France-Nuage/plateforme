/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: WgBKdGHdVFBy
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

import FormTextField from '../../FormTextField';
// plasmic-import: GyTJhs9veKrj/component
import NavigationDrawerNavDivider from '../../NavigationDrawerNavDivider';
// plasmic-import: T0IP1vhdYD3X/component
import NavigationDrawerNavItem from '../../NavigationDrawerNavItem';
// plasmic-import: A9xYAhwSD6i3/component
import NavigationDrawerNavTitle from '../../NavigationDrawerNavTitle';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: KBwZn7y1ejAO/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicNavigationDrawer.module.css';
// plasmic-import: CnqcBI0upv9T/icon
import BellIcon from './icons/PlasmicIcon__Bell';
// plasmic-import: tmJQKBQDJEoe/icon
import ChevronRightIcon from './icons/PlasmicIcon__ChevronRight';
// plasmic-import: TueurUSDtevy/icon
import CircleIcon from './icons/PlasmicIcon__Circle';
// plasmic-import: 0zFkNWu9LQOC/icon
import DevSquareIcon from './icons/PlasmicIcon__DevSquare';
// plasmic-import: HOWLf5KCV6xi/icon
import FactureIcon from './icons/PlasmicIcon__Facture';
// plasmic-import: INMXktOfIWiD/icon
import HomeIcon from './icons/PlasmicIcon__Home';
// plasmic-import: M5Yt0pb7IRm_/icon
import Icon10Icon from './icons/PlasmicIcon__Icon10';
// plasmic-import: MqRFF7vxUCiv/icon
import Icon11Icon from './icons/PlasmicIcon__Icon11';
// plasmic-import: WgBKdGHdVFBy/css

import SearchIcon from './icons/PlasmicIcon__Search';
// plasmic-import: q8GlA5e81ML_/icon
import SettingsIcon from './icons/PlasmicIcon__Settings';
// plasmic-import: LPIiQLy4lvIE/icon
import UserIcon from './icons/PlasmicIcon__User';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: s_RpDhzeQJX7/icon

createPlasmicElementProxy;

export type PlasmicNavigationDrawer__VariantMembers = {
  isOpen: 'isOpen';
};
export type PlasmicNavigationDrawer__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<'isOpen'>;
};
type VariantPropType = keyof PlasmicNavigationDrawer__VariantsArgs;
export const PlasmicNavigationDrawer__VariantProps = new Array<VariantPropType>(
  'isOpen',
);

export type PlasmicNavigationDrawer__ArgsType = {};
type ArgPropType = keyof PlasmicNavigationDrawer__ArgsType;
export const PlasmicNavigationDrawer__ArgProps = new Array<ArgPropType>();

export type PlasmicNavigationDrawer__OverridesType = {
  drawer?: Flex__<'div'>;
  search?: Flex__<typeof FormTextField>;
  text?: Flex__<'div'>;
  dashboard?: Flex__<typeof NavigationDrawerNavItem>;
  teams?: Flex__<typeof NavigationDrawerNavItem>;
  plan?: Flex__<typeof NavigationDrawerNavItem>;
  settings?: Flex__<typeof NavigationDrawerNavItem>;
  project?: Flex__<typeof NavigationDrawerNavTitle>;
  instances2?: Flex__<typeof NavigationDrawerNavItem>;
  services2?: Flex__<typeof NavigationDrawerNavItem>;
  membres2?: Flex__<typeof NavigationDrawerNavItem>;
  projectSettings?: Flex__<typeof NavigationDrawerNavItem>;
  profile?: Flex__<typeof NavigationDrawerNavItem>;
  faq?: Flex__<typeof NavigationDrawerNavItem>;
};

export interface DefaultNavigationDrawerProps {
  isOpen?: SingleBooleanChoiceArg<'isOpen'>;
  className?: string;
}

const $$ = {};

function PlasmicNavigationDrawer__RenderFunc(props: {
  variants: PlasmicNavigationDrawer__VariantsArgs;
  args: PlasmicNavigationDrawer__ArgsType;
  overrides: PlasmicNavigationDrawer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'search.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'activeSidebarItem',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 'Tableau de bord',
      },
      {
        path: 'isVisible',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },
      {
        path: 'isOpen',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <Stack__
      as={'div'}
      data-plasmic-name={'drawer'}
      data-plasmic-override={overrides.drawer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.drawer,
        { [sty.drawerisOpen]: hasVariant($state, 'isOpen', 'isOpen') },
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__f81Z1, {
          [sty.freeBoxisOpen__f81Z1Vo8B3]: hasVariant(
            $state,
            'isOpen',
            'isOpen',
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__qA2N, {
            [sty.freeBoxisOpen__qA2Nvo8B3]: hasVariant(
              $state,
              'isOpen',
              'isOpen',
            ),
          })}
        >
          <FormTextField
            data-plasmic-name={'search'}
            data-plasmic-override={overrides.search}
            className={classNames('__wab_instance', sty.search, {
              [sty.searchisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            end={
              <CircleIcon
                className={classNames(projectcss.all, sty.svg__fd1Xj)}
                role={'img'}
              />
            }
            iconStart={true}
            inputMode={'text'}
            label={
              <div
                data-plasmic-name={'text'}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text,
                )}
              >
                {'Label'}
              </div>
            }
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ['search', 'value']).apply(
                null,
                eventArgs,
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={'Rechercher...'}
            showLabel={false}
            start={
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__zpqF9, {
                  [sty.svgisOpen__zpqF9Vo8B3]: hasVariant(
                    $state,
                    'isOpen',
                    'isOpen',
                  ),
                })}
                role={'img'}
              />
            }
            type={'text'}
            value={generateStateValueProp($state, ['search', 'value'])}
          />

          <NavigationDrawerNavDivider
            className={classNames(
              '__wab_instance',
              sty.navigationDrawerNavDivider__pKcOb,
            )}
          />

          <NavigationDrawerNavItem
            data-plasmic-name={'dashboard'}
            data-plasmic-override={overrides.dashboard}
            className={classNames('__wab_instance', sty.dashboard, {
              [sty.dashboardisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            isActive={(() => {
              try {
                return undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === 'PlasmicUndefinedDataError'
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            link={
              hasVariant($state, 'isOpen', 'isOpen') &&
              hasVariant(globalVariants, 'screen', 'mobile')
                ? `/`
                : `/`
            }
            nom={'Tableau de bord'}
          >
            <HomeIcon
              className={classNames(projectcss.all, sty.svg___6URSb)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavItem
            data-plasmic-name={'teams'}
            data-plasmic-override={overrides.teams}
            className={classNames('__wab_instance', sty.teams)}
            link={`/`}
            nom={'\u00c9quipes'}
          >
            <UserIcon
              className={classNames(projectcss.all, sty.svg__j3Qoq)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavItem
            data-plasmic-name={'plan'}
            data-plasmic-override={overrides.plan}
            className={classNames('__wab_instance', sty.plan, {
              [sty.planisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            link={`/`}
            nom={'Plan et facturation'}
          >
            <FactureIcon
              className={classNames(projectcss.all, sty.svg___7X8Xe)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavItem
            data-plasmic-name={'settings'}
            data-plasmic-override={overrides.settings}
            className={classNames('__wab_instance', sty.settings, {
              [sty.settingsisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            link={`/`}
            nom={'Param\u00e8tres g\u00e9n\u00e9raux'}
          >
            <SettingsIcon
              className={classNames(projectcss.all, sty.svg__wsiQy)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavDivider
            className={classNames(
              '__wab_instance',
              sty.navigationDrawerNavDivider__kdgJ6,
            )}
          />

          <NavigationDrawerNavTitle
            data-plasmic-name={'project'}
            data-plasmic-override={overrides.project}
            className={classNames('__wab_instance', sty.project)}
            title={'PROJET'}
          />

          <NavigationDrawerNavItem
            data-plasmic-name={'instances2'}
            data-plasmic-override={overrides.instances2}
            className={classNames('__wab_instance', sty.instances2, {
              [sty.instances2isOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            link={
              hasVariant($state, 'isOpen', 'isOpen') &&
              hasVariant(globalVariants, 'screen', 'mobile')
                ? `/instances`
                : `/instances`
            }
            nom={'Instances'}
          >
            <DevSquareIcon
              className={classNames(projectcss.all, sty.svg__aeTd)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavItem
            data-plasmic-name={'services2'}
            data-plasmic-override={overrides.services2}
            className={classNames('__wab_instance', sty.services2, {
              [sty.services2isOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            link={`/`}
            nom={'Services'}
          >
            <DevSquareIcon
              className={classNames(projectcss.all, sty.svg__pGfe2)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavItem
            data-plasmic-name={'membres2'}
            data-plasmic-override={overrides.membres2}
            className={classNames('__wab_instance', sty.membres2)}
            link={`/`}
            nom={'Membres'}
          >
            <UserIcon
              className={classNames(projectcss.all, sty.svg__zzrJu)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavItem
            data-plasmic-name={'projectSettings'}
            data-plasmic-override={overrides.projectSettings}
            className={classNames('__wab_instance', sty.projectSettings)}
            link={`/`}
            nom={'Param\u00e8tres du projet'}
          >
            <BellIcon
              className={classNames(projectcss.all, sty.svg__aupw)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__n8Yax, {
            [sty.freeBoxisOpen__n8YaxVo8B3]: hasVariant(
              $state,
              'isOpen',
              'isOpen',
            ),
          })}
        >
          <NavigationDrawerNavDivider
            className={classNames(
              '__wab_instance',
              sty.navigationDrawerNavDivider___4E6YD,
            )}
          />

          <NavigationDrawerNavItem
            data-plasmic-name={'profile'}
            data-plasmic-override={overrides.profile}
            className={classNames('__wab_instance', sty.profile, {
              [sty.profileisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            link={`/`}
            nom={'Profil'}
          >
            <Icon11Icon
              className={classNames(projectcss.all, sty.svg__zftOu)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
          <NavigationDrawerNavItem
            data-plasmic-name={'faq'}
            data-plasmic-override={overrides.faq}
            className={classNames('__wab_instance', sty.faq)}
            link={`/`}
            nom={'FAQ'}
          >
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__m2Ofs)}
              role={'img'}
            />
          </NavigationDrawerNavItem>
        </div>
      </div>
      {(
        hasVariant($state, 'isOpen', 'isOpen')
          ? true
          : hasVariant(globalVariants, 'screen', 'mobile')
            ? true
            : hasVariant(globalVariants, 'screen', 'tablet')
              ? true
              : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___5KE3R, {
            [sty.freeBoxisOpen___5KE3Rvo8B3]: hasVariant(
              $state,
              'isOpen',
              'isOpen',
            ),
          })}
          onClick={async (event) => {
            const $steps = {};

            $steps['updateIsOpen'] = true
              ? (() => {
                  const actionArgs = { vgroup: 'isOpen', operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === 'string') {
                      value = [value];
                    }

                    const oldValue = $stateGet($state, vgroup);
                    $stateSet($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps['updateIsOpen'] != null &&
              typeof $steps['updateIsOpen'] === 'object' &&
              typeof $steps['updateIsOpen'].then === 'function'
            ) {
              $steps['updateIsOpen'] = await $steps['updateIsOpen'];
            }
          }}
        >
          <ChevronRightIcon
            className={classNames(projectcss.all, sty.svg___2KwqK, {
              [sty.svgisOpen___2KwqKvo8B3]: hasVariant(
                $state,
                'isOpen',
                'isOpen',
              ),
            })}
            role={'img'}
          />
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  drawer: [
    'drawer',
    'search',
    'text',
    'dashboard',
    'teams',
    'plan',
    'settings',
    'project',
    'instances2',
    'services2',
    'membres2',
    'projectSettings',
    'profile',
    'faq',
  ],
  search: ['search', 'text'],
  text: ['text'],
  dashboard: ['dashboard'],
  teams: ['teams'],
  plan: ['plan'],
  settings: ['settings'],
  project: ['project'],
  instances2: ['instances2'],
  services2: ['services2'],
  membres2: ['membres2'],
  projectSettings: ['projectSettings'],
  profile: ['profile'],
  faq: ['faq'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  drawer: 'div';
  search: typeof FormTextField;
  text: 'div';
  dashboard: typeof NavigationDrawerNavItem;
  teams: typeof NavigationDrawerNavItem;
  plan: typeof NavigationDrawerNavItem;
  settings: typeof NavigationDrawerNavItem;
  project: typeof NavigationDrawerNavTitle;
  instances2: typeof NavigationDrawerNavItem;
  services2: typeof NavigationDrawerNavItem;
  membres2: typeof NavigationDrawerNavItem;
  projectSettings: typeof NavigationDrawerNavItem;
  profile: typeof NavigationDrawerNavItem;
  faq: typeof NavigationDrawerNavItem;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationDrawer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationDrawer__VariantsArgs;
    args?: PlasmicNavigationDrawer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationDrawer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigationDrawer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationDrawer__ArgProps,
          internalVariantPropNames: PlasmicNavigationDrawer__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicNavigationDrawer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'drawer') {
    func.displayName = 'PlasmicNavigationDrawer';
  } else {
    func.displayName = `PlasmicNavigationDrawer.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationDrawer = Object.assign(
  // Top-level PlasmicNavigationDrawer renders the root element
  makeNodeComponent('drawer'),
  {
    // Helper components rendering sub-elements
    search: makeNodeComponent('search'),
    text: makeNodeComponent('text'),
    dashboard: makeNodeComponent('dashboard'),
    teams: makeNodeComponent('teams'),
    plan: makeNodeComponent('plan'),
    settings: makeNodeComponent('settings'),
    project: makeNodeComponent('project'),
    instances2: makeNodeComponent('instances2'),
    services2: makeNodeComponent('services2'),
    membres2: makeNodeComponent('membres2'),
    projectSettings: makeNodeComponent('projectSettings'),
    profile: makeNodeComponent('profile'),
    faq: makeNodeComponent('faq'),

    // Metadata about props expected for PlasmicNavigationDrawer
    internalVariantProps: PlasmicNavigationDrawer__VariantProps,
    internalArgProps: PlasmicNavigationDrawer__ArgProps,
  },
);

export default PlasmicNavigationDrawer;
/* prettier-ignore-end */
