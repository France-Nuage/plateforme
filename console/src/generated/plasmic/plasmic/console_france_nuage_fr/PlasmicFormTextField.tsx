/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: GyTJhs9veKrj
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import { BaseTextField } from '@plasmicpkgs/react-aria/skinny/registerTextField';
import * as React from 'react';

// plasmic-import: IsGIox3XaKsi/component
import FormDescription from '../../FormDescription';
import FormLabel from '../../FormLabel';
// plasmic-import: u-FGr4L8Yprh/component
import FormTextInput from '../../FormTextInput';
// plasmic-import: hFREyvMXF-HZ/component
import FormTextarea from '../../FormTextarea';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicFormTextField.module.css';
// plasmic-import: lV6eYbXtJGqM/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: GyTJhs9veKrj/css

import CircleIcon from './icons/PlasmicIcon__Circle';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: INMXktOfIWiD/icon

createPlasmicElementProxy;

export type PlasmicFormTextField__VariantMembers = {
  multiLine: 'multiLine';
  iconStart: 'iconStart';
  iconEnd: 'iconEnd';
};
export type PlasmicFormTextField__VariantsArgs = {
  multiLine?: SingleBooleanChoiceArg<'multiLine'>;
  iconStart?: SingleBooleanChoiceArg<'iconStart'>;
  iconEnd?: SingleBooleanChoiceArg<'iconEnd'>;
};
type VariantPropType = keyof PlasmicFormTextField__VariantsArgs;
export const PlasmicFormTextField__VariantProps = new Array<VariantPropType>(
  'multiLine',
  'iconStart',
  'iconEnd',
);

export type PlasmicFormTextField__ArgsType = {
  value?: string;
  placeholder?: string;
  showLabel?: boolean;
  showDescription?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  type?: 'text' | 'search' | 'url' | 'tel' | 'email' | 'password';
  inputMode?:
    | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
  autoComplete?:
    | 'on'
    | 'off'
    | 'name'
    | 'honorific-prefix'
    | 'given-name'
    | 'additional-name'
    | 'family-name'
    | 'honorific-suffix'
    | 'nickname'
    | 'email'
    | 'username'
    | 'new-password'
    | 'current-password'
    | 'one-time-code'
    | 'organization-title'
    | 'organization'
    | 'street-address'
    | 'shipping'
    | 'billing'
    | 'address-line1'
    | 'address-line2'
    | 'address-line3'
    | 'address-level4'
    | 'address-level3'
    | 'address-level2'
    | 'address-level1'
    | 'country'
    | 'country-name'
    | 'postal-code'
    | 'cc-name'
    | 'cc-given-name'
    | 'cc-additional-name'
    | 'cc-family-name'
    | 'cc-number'
    | 'cc-exp'
    | 'cc-exp-month'
    | 'cc-exp-year'
    | 'cc-csc'
    | 'cc-type'
    | 'transaction-currency'
    | 'transaction-amount'
    | 'language'
    | 'bday'
    | 'bday-day'
    | 'bday-month'
    | 'bday-year'
    | 'sex'
    | 'tel'
    | 'tel-country-code'
    | 'tel-national'
    | 'tel-area-code'
    | 'tel-local'
    | 'tel-local-suffix'
    | 'tel-local-prefix'
    | 'tel-extension'
    | 'impp'
    | 'url'
    | 'photo'
    | 'webauthn';
  ariaLabel?: string;
  onChange?: (val: string) => void;
  label?: React.ReactNode;
  start?: React.ReactNode;
  end?: React.ReactNode;
  description?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFormTextField__ArgsType;
export const PlasmicFormTextField__ArgProps = new Array<ArgPropType>(
  'value',
  'placeholder',
  'showLabel',
  'showDescription',
  'disabled',
  'readOnly',
  'autoFocus',
  'type',
  'inputMode',
  'autoComplete',
  'ariaLabel',
  'onChange',
  'label',
  'start',
  'end',
  'description',
);

export type PlasmicFormTextField__OverridesType = {
  ariaTextField?: Flex__<typeof BaseTextField>;
  formLabel?: Flex__<typeof FormLabel>;
  textInput?: Flex__<typeof FormTextInput>;
  textAreaInput?: Flex__<typeof FormTextarea>;
  formDescription?: Flex__<typeof FormDescription>;
};

export interface DefaultFormTextFieldProps {
  value?: string;
  placeholder?: string;
  showLabel?: boolean;
  showDescription?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  type?: 'text' | 'search' | 'url' | 'tel' | 'email' | 'password';
  inputMode?:
    | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
  autoComplete?:
    | 'on'
    | 'off'
    | 'name'
    | 'honorific-prefix'
    | 'given-name'
    | 'additional-name'
    | 'family-name'
    | 'honorific-suffix'
    | 'nickname'
    | 'email'
    | 'username'
    | 'new-password'
    | 'current-password'
    | 'one-time-code'
    | 'organization-title'
    | 'organization'
    | 'street-address'
    | 'shipping'
    | 'billing'
    | 'address-line1'
    | 'address-line2'
    | 'address-line3'
    | 'address-level4'
    | 'address-level3'
    | 'address-level2'
    | 'address-level1'
    | 'country'
    | 'country-name'
    | 'postal-code'
    | 'cc-name'
    | 'cc-given-name'
    | 'cc-additional-name'
    | 'cc-family-name'
    | 'cc-number'
    | 'cc-exp'
    | 'cc-exp-month'
    | 'cc-exp-year'
    | 'cc-csc'
    | 'cc-type'
    | 'transaction-currency'
    | 'transaction-amount'
    | 'language'
    | 'bday'
    | 'bday-day'
    | 'bday-month'
    | 'bday-year'
    | 'sex'
    | 'tel'
    | 'tel-country-code'
    | 'tel-national'
    | 'tel-area-code'
    | 'tel-local'
    | 'tel-local-suffix'
    | 'tel-local-prefix'
    | 'tel-extension'
    | 'impp'
    | 'url'
    | 'photo'
    | 'webauthn';
  ariaLabel?: string;
  onChange?: (val: string) => void;
  label?: React.ReactNode;
  start?: React.ReactNode;
  end?: React.ReactNode;
  description?: React.ReactNode;
  multiLine?: SingleBooleanChoiceArg<'multiLine'>;
  iconStart?: SingleBooleanChoiceArg<'iconStart'>;
  iconEnd?: SingleBooleanChoiceArg<'iconEnd'>;
  className?: string;
}

const $$ = {};

function PlasmicFormTextField__RenderFunc(props: {
  variants: PlasmicFormTextField__VariantsArgs;
  args: PlasmicFormTextField__ArgsType;
  overrides: PlasmicFormTextField__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showLabel: true,
          showDescription: false,
          readOnly: false,
          autoFocus: false,
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'ariaTextField.value',
        type: 'writable',
        variableType: 'text',

        valueProp: 'value',
        onChangeProp: 'onChange',
      },
      {
        path: 'multiLine',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.multiLine,
      },
      {
        path: 'iconStart',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconStart,
      },
      {
        path: 'iconEnd',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconEnd,
      },
      {
        path: 'textInput.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'textAreaInput.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    disabled: false,
    readonly: false,
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants((prev) => {
        if (!Object.keys(changes).some((k) => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    [],
  );

  return (
    <BaseTextField
      data-plasmic-name={'ariaTextField'}
      data-plasmic-override={overrides.ariaTextField}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      autoComplete={args.autoComplete}
      autoFocus={args.autoFocus}
      className={classNames(
        '__wab_instance',
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.ariaTextField,
        {
          [sty.ariaTextFieldiconEnd]: hasVariant($state, 'iconEnd', 'iconEnd'),
          [sty.ariaTextFieldiconEnd_iconStart]:
            hasVariant($state, 'iconStart', 'iconStart') &&
            hasVariant($state, 'iconEnd', 'iconEnd'),
          [sty.ariaTextFieldiconStart]: hasVariant(
            $state,
            'iconStart',
            'iconStart',
          ),
          [sty.ariaTextFieldmultiLine]: hasVariant(
            $state,
            'multiLine',
            'multiLine',
          ),
        },
      )}
      inputMode={args.inputMode}
      isDisabled={args.disabled}
      isReadOnly={args.readOnly}
      onChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ['ariaTextField', 'value']).apply(
          null,
          eventArgs,
        );
      }}
      plasmicUpdateVariant={updateVariant}
      type={args.type}
      value={generateStateValueProp($state, ['ariaTextField', 'value'])}
    >
      {$props.showLabel ? (
        <FormLabel
          data-plasmic-name={'formLabel'}
          data-plasmic-override={overrides.formLabel}
          className={classNames('__wab_instance', sty.formLabel, {
            [sty.formLabelmultiLine]: hasVariant(
              $state,
              'multiLine',
              'multiLine',
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: 'Label',
            value: args.label,
          })}
        </FormLabel>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__mtEqN, {
          [sty.freeBoxiconEnd__mtEqNuUhFc]: hasVariant(
            $state,
            'iconEnd',
            'iconEnd',
          ),
          [sty.freeBoxiconStart__mtEqNh2TYc]: hasVariant(
            $state,
            'iconStart',
            'iconStart',
          ),
          [sty.freeBoxmultiLine__mtEqNz20Dv]: hasVariant(
            $state,
            'multiLine',
            'multiLine',
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__fUuip, {
            [sty.freeBoxiconStart__fUuiph2TYc]: hasVariant(
              $state,
              'iconStart',
              'iconStart',
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___3RjsA, {
              [sty.freeBoxiconStart___3RjsAh2TYc]: hasVariant(
                $state,
                'iconStart',
                'iconStart',
              ),
              [sty.freeBoxmultiLine___3RjsAz20Dv]: hasVariant(
                $state,
                'multiLine',
                'multiLine',
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <CircleIcon
                  className={classNames(projectcss.all, sty.svg__eNAt)}
                  role={'img'}
                />
              ),

              value: args.start,
              className: classNames(sty.slotTargetStart, {
                [sty.slotTargetStarticonStart]: hasVariant(
                  $state,
                  'iconStart',
                  'iconStart',
                ),
              }),
            })}
          </div>
          {(hasVariant($state, 'multiLine', 'multiLine') ? false : true) ? (
            <FormTextInput
              data-plasmic-name={'textInput'}
              data-plasmic-override={overrides.textInput}
              disabled={$ccVariants['disabled'] ? true : undefined}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ['textInput', 'value']).apply(
                  null,
                  eventArgs,
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              padded={
                hasVariant($state, 'iconStart', 'iconStart') &&
                hasVariant($state, 'iconEnd', 'iconEnd')
                  ? ['right', 'left']
                  : hasVariant($state, 'iconEnd', 'iconEnd')
                    ? ['right']
                    : hasVariant($state, 'iconStart', 'iconStart')
                      ? ['left']
                      : undefined
              }
              placeholder={args.placeholder}
              value={generateStateValueProp($state, ['textInput', 'value'])}
            />
          ) : null}
        </div>
        {(hasVariant($state, 'multiLine', 'multiLine') ? true : false) ? (
          <FormTextarea
            data-plasmic-name={'textAreaInput'}
            data-plasmic-override={overrides.textAreaInput}
            className={classNames('__wab_instance', {
              [sty.textAreaInputmultiLine]: hasVariant(
                $state,
                'multiLine',
                'multiLine',
              ),
            })}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                'textAreaInput',
                'value',
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            padded={
              hasVariant($state, 'iconStart', 'iconStart') &&
              hasVariant($state, 'iconEnd', 'iconEnd')
                ? ['right', 'left']
                : hasVariant($state, 'iconEnd', 'iconEnd')
                  ? ['right']
                  : hasVariant($state, 'iconStart', 'iconStart')
                    ? ['left']
                    : undefined
            }
            placeholder={args.placeholder}
            value={generateStateValueProp($state, ['textAreaInput', 'value'])}
          />
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__ydhA8, {
            [sty.freeBoxiconEnd__ydhA8UUhFc]: hasVariant(
              $state,
              'iconEnd',
              'iconEnd',
            ),
            [sty.freeBoxiconStart__ydhA8H2TYc]: hasVariant(
              $state,
              'iconStart',
              'iconStart',
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CircleIcon
                className={classNames(projectcss.all, sty.svg__e41O)}
                role={'img'}
              />
            ),

            value: args.end,
            className: classNames(sty.slotTargetEnd, {
              [sty.slotTargetEndiconEnd]: hasVariant(
                $state,
                'iconEnd',
                'iconEnd',
              ),
            }),
          })}
        </div>
      </div>
      {$props.showDescription ? (
        <FormDescription
          data-plasmic-name={'formDescription'}
          data-plasmic-override={overrides.formDescription}
          className={classNames('__wab_instance', sty.formDescription)}
        >
          {renderPlasmicSlot({
            defaultContents: 'Description...',
            value: args.description,
          })}
        </FormDescription>
      ) : null}
    </BaseTextField>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaTextField: [
    'ariaTextField',
    'formLabel',
    'textInput',
    'textAreaInput',
    'formDescription',
  ],
  formLabel: ['formLabel'],
  textInput: ['textInput'],
  textAreaInput: ['textAreaInput'],
  formDescription: ['formDescription'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaTextField: typeof BaseTextField;
  formLabel: typeof FormLabel;
  textInput: typeof FormTextInput;
  textAreaInput: typeof FormTextarea;
  formDescription: typeof FormDescription;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormTextField__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormTextField__VariantsArgs;
    args?: PlasmicFormTextField__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormTextField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormTextField__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormTextField__ArgProps,
          internalVariantPropNames: PlasmicFormTextField__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicFormTextField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'ariaTextField') {
    func.displayName = 'PlasmicFormTextField';
  } else {
    func.displayName = `PlasmicFormTextField.${nodeName}`;
  }
  return func;
}

export const PlasmicFormTextField = Object.assign(
  // Top-level PlasmicFormTextField renders the root element
  makeNodeComponent('ariaTextField'),
  {
    // Helper components rendering sub-elements
    formLabel: makeNodeComponent('formLabel'),
    textInput: makeNodeComponent('textInput'),
    textAreaInput: makeNodeComponent('textAreaInput'),
    formDescription: makeNodeComponent('formDescription'),

    // Metadata about props expected for PlasmicFormTextField
    internalVariantProps: PlasmicFormTextField__VariantProps,
    internalArgProps: PlasmicFormTextField__ArgProps,
  },
);

export default PlasmicFormTextField;
/* prettier-ignore-end */
