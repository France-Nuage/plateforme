/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: LO3RxoimlbTk
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import { BaseSlider } from '@plasmicpkgs/react-aria/skinny/registerSlider';
// plasmic-import: u-FGr4L8Yprh/component
import { BaseSliderOutput } from '@plasmicpkgs/react-aria/skinny/registerSliderOutput';
import { BaseSliderTrack } from '@plasmicpkgs/react-aria/skinny/registerSliderTrack';
import * as React from 'react';

// plasmic-import: 2MR3Rnvxp1rh/component
import FormDescription from '../../FormDescription';
import FormLabel from '../../FormLabel';
import FormSliderThumb from '../../FormSliderThumb';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicFormSlider.module.css';
// plasmic-import: lV6eYbXtJGqM/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: LO3RxoimlbTk/css

createPlasmicElementProxy;

export type PlasmicFormSlider__VariantMembers = {};
export type PlasmicFormSlider__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormSlider__VariantsArgs;
export const PlasmicFormSlider__VariantProps = new Array<VariantPropType>();

export type PlasmicFormSlider__ArgsType = {
  value?: number;
  showLabel?: boolean;
  showOutputText?: boolean;
  showDescription?: boolean;
  step?: number;
  minValue?: number;
  maxValue?: number;
  outputText?: string;
  filled?: boolean;
  disabled?: boolean;
  onChange?: (val: number) => void;
  ariaLabel?: string;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFormSlider__ArgsType;
export const PlasmicFormSlider__ArgProps = new Array<ArgPropType>(
  'value',
  'showLabel',
  'showOutputText',
  'showDescription',
  'step',
  'minValue',
  'maxValue',
  'outputText',
  'filled',
  'disabled',
  'onChange',
  'ariaLabel',
  'label',
  'thumbs',
);

export type PlasmicFormSlider__OverridesType = {
  ariaSlider?: Flex__<typeof BaseSlider>;
  formLabel?: Flex__<typeof FormLabel>;
  ariaSliderOutput?: Flex__<typeof BaseSliderOutput>;
  background?: Flex__<'div'>;
  ariaSliderTrack?: Flex__<typeof BaseSliderTrack>;
  foreground?: Flex__<'div'>;
  formDescription?: Flex__<typeof FormDescription>;
};

export interface DefaultFormSliderProps {
  value?: number;
  showLabel?: boolean;
  showOutputText?: boolean;
  showDescription?: boolean;
  step?: number;
  minValue?: number;
  maxValue?: number;
  outputText?: string;
  filled?: boolean;
  disabled?: boolean;
  onChange?: (val: number) => void;
  ariaLabel?: string;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicFormSlider__RenderFunc(props: {
  variants: PlasmicFormSlider__VariantsArgs;
  args: PlasmicFormSlider__ArgsType;
  overrides: PlasmicFormSlider__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showLabel: true,
          showOutputText: true,
          showDescription: false,
          filled: true,
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'ariaSlider.value',
        type: 'writable',
        variableType: 'number',

        valueProp: 'value',
        onChangeProp: 'onChange',
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    disabled: false,
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants((prev) => {
        if (!Object.keys(changes).some((k) => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    [],
  );

  return (
    <BaseSlider
      data-plasmic-name={'ariaSlider'}
      data-plasmic-override={overrides.ariaSlider}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        '__wab_instance',
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.ariaSlider,
      )}
      defaultValue={0}
      isDisabled={args.disabled}
      maxValue={args.maxValue}
      minValue={args.minValue}
      onChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ['ariaSlider', 'value']).apply(
          null,
          eventArgs,
        );
      }}
      orientation={'horizontal'}
      plasmicUpdateVariant={updateVariant}
      step={args.step}
      value={generateStateValueProp($state, ['ariaSlider', 'value'])}
    >
      {$props.showLabel || $props.showOutputText ? (
        <Stack__
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wjt5)}
        >
          {$props.showLabel ? (
            <FormLabel
              data-plasmic-name={'formLabel'}
              data-plasmic-override={overrides.formLabel}
              className={classNames('__wab_instance', sty.formLabel)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c8DFd,
                    )}
                  >
                    {'Label'}
                  </div>
                ),
                value: args.label,
              })}
            </FormLabel>
          ) : null}
          {(() => {
            try {
              return $props.showOutputText;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <BaseSliderOutput
              data-plasmic-name={'ariaSliderOutput'}
              data-plasmic-override={overrides.ariaSliderOutput}
              className={classNames('__wab_instance', sty.ariaSliderOutput)}
            >
              <React.Fragment>
                {$props.outputText ?? $state.ariaSlider.value}
              </React.Fragment>
            </BaseSliderOutput>
          ) : null}
        </Stack__>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__ymuC4)}>
        <div
          data-plasmic-name={'background'}
          data-plasmic-override={overrides.background}
          className={classNames(projectcss.all, sty.background)}
        >
          <BaseSliderTrack
            data-plasmic-name={'ariaSliderTrack'}
            data-plasmic-override={overrides.ariaSliderTrack}
            className={classNames('__wab_instance', sty.ariaSliderTrack)}
            progressBar={
              $props.filled ? (
                <div
                  data-plasmic-name={'foreground'}
                  data-plasmic-override={overrides.foreground}
                  className={classNames(projectcss.all, sty.foreground)}
                />
              ) : null
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <FormSliderThumb
                  className={classNames(
                    '__wab_instance',
                    sty.formSliderThumb__mG3Kx,
                  )}
                />
              ),

              value: args.thumbs,
            })}
          </BaseSliderTrack>
        </div>
      </div>
      {$props.showDescription ? (
        <FormDescription
          data-plasmic-name={'formDescription'}
          data-plasmic-override={overrides.formDescription}
          className={classNames('__wab_instance', sty.formDescription)}
        />
      ) : null}
    </BaseSlider>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaSlider: [
    'ariaSlider',
    'formLabel',
    'ariaSliderOutput',
    'background',
    'ariaSliderTrack',
    'foreground',
    'formDescription',
  ],
  formLabel: ['formLabel'],
  ariaSliderOutput: ['ariaSliderOutput'],
  background: ['background', 'ariaSliderTrack', 'foreground'],
  ariaSliderTrack: ['ariaSliderTrack', 'foreground'],
  foreground: ['foreground'],
  formDescription: ['formDescription'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaSlider: typeof BaseSlider;
  formLabel: typeof FormLabel;
  ariaSliderOutput: typeof BaseSliderOutput;
  background: 'div';
  ariaSliderTrack: typeof BaseSliderTrack;
  foreground: 'div';
  formDescription: typeof FormDescription;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormSlider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormSlider__VariantsArgs;
    args?: PlasmicFormSlider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormSlider__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormSlider__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormSlider__ArgProps,
          internalVariantPropNames: PlasmicFormSlider__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicFormSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'ariaSlider') {
    func.displayName = 'PlasmicFormSlider';
  } else {
    func.displayName = `PlasmicFormSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicFormSlider = Object.assign(
  // Top-level PlasmicFormSlider renders the root element
  makeNodeComponent('ariaSlider'),
  {
    // Helper components rendering sub-elements
    formLabel: makeNodeComponent('formLabel'),
    ariaSliderOutput: makeNodeComponent('ariaSliderOutput'),
    background: makeNodeComponent('background'),
    ariaSliderTrack: makeNodeComponent('ariaSliderTrack'),
    foreground: makeNodeComponent('foreground'),
    formDescription: makeNodeComponent('formDescription'),

    // Metadata about props expected for PlasmicFormSlider
    internalVariantProps: PlasmicFormSlider__VariantProps,
    internalArgProps: PlasmicFormSlider__ArgProps,
  },
);

export default PlasmicFormSlider;
/* prettier-ignore-end */
