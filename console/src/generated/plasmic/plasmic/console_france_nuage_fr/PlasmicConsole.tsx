/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: d1MlGr7C5K9L
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

import { ConsoleProvider } from '../../../../providers/ConsoleProvider';
// plasmic-import: vWN9dmdYefpY/codeComponent
import ConsoleBreadcrumb from '../../ConsoleBreadcrumb';
// plasmic-import: PEgOxZRQTA56/component
import NavigationDrawer from '../../NavigationDrawer';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicConsole.module.css';
// plasmic-import: WgBKdGHdVFBy/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: d1MlGr7C5K9L/css

createPlasmicElementProxy;

export type PlasmicConsole__VariantMembers = {};
export type PlasmicConsole__VariantsArgs = {};
type VariantPropType = keyof PlasmicConsole__VariantsArgs;
export const PlasmicConsole__VariantProps = new Array<VariantPropType>();

export type PlasmicConsole__ArgsType = {};
type ArgPropType = keyof PlasmicConsole__ArgsType;
export const PlasmicConsole__ArgProps = new Array<ArgPropType>();

export type PlasmicConsole__OverridesType = {
  root?: Flex__<'div'>;
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  consoleBreadcrumb?: Flex__<typeof ConsoleBreadcrumb>;
  navigationDrawer?: Flex__<typeof NavigationDrawer>;
};

export interface DefaultConsoleProps {
  className?: string;
}

const $$ = {};

function PlasmicConsole__RenderFunc(props: {
  variants: PlasmicConsole__VariantsArgs;
  args: PlasmicConsole__ArgsType;
  overrides: PlasmicConsole__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
          )}
        >
          <ConsoleProvider
            data-plasmic-name={'consoleProvider'}
            data-plasmic-override={overrides.consoleProvider}
            className={classNames('__wab_instance', sty.consoleProvider)}
            ref={(ref) => {
              $refs['consoleProvider'] = ref;
            }}
          >
            <DataCtxReader__>
              {($ctx) => (
                <React.Fragment>
                  <ConsoleBreadcrumb
                    data-plasmic-name={'consoleBreadcrumb'}
                    data-plasmic-override={overrides.consoleBreadcrumb}
                    className={classNames(
                      '__wab_instance',
                      sty.consoleBreadcrumb,
                    )}
                  />

                  <NavigationDrawer
                    data-plasmic-name={'navigationDrawer'}
                    data-plasmic-override={overrides.navigationDrawer}
                    className={classNames(
                      '__wab_instance',
                      sty.navigationDrawer,
                    )}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ConsoleProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'consoleProvider', 'consoleBreadcrumb', 'navigationDrawer'],
  consoleProvider: ['consoleProvider', 'consoleBreadcrumb', 'navigationDrawer'],
  consoleBreadcrumb: ['consoleBreadcrumb'],
  navigationDrawer: ['navigationDrawer'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  consoleProvider: typeof ConsoleProvider;
  consoleBreadcrumb: typeof ConsoleBreadcrumb;
  navigationDrawer: typeof NavigationDrawer;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConsole__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConsole__VariantsArgs;
    args?: PlasmicConsole__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConsole__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConsole__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConsole__ArgProps,
          internalVariantPropNames: PlasmicConsole__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicConsole__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicConsole';
  } else {
    func.displayName = `PlasmicConsole.${nodeName}`;
  }
  return func;
}

export const PlasmicConsole = Object.assign(
  // Top-level PlasmicConsole renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    consoleProvider: makeNodeComponent('consoleProvider'),
    consoleBreadcrumb: makeNodeComponent('consoleBreadcrumb'),
    navigationDrawer: makeNodeComponent('navigationDrawer'),

    // Metadata about props expected for PlasmicConsole
    internalVariantProps: PlasmicConsole__VariantProps,
    internalArgProps: PlasmicConsole__ArgProps,

    // Key-value metadata
    metadata: { role: 'user' },

    // Page metadata
    pageMetadata: {
      title: 'Console',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  },
);

export default PlasmicConsole;
/* prettier-ignore-end */
