/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: 87eVTdt3lw8O
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

import { ConsoleProvider } from '../../../../providers/ConsoleProvider';
// plasmic-import: vWN9dmdYefpY/codeComponent
import ConsoleBackground from '../../ConsoleBackground';
// plasmic-import: yVRH58qXB1fB/component
import ConsoleLogo from '../../ConsoleLogo';
// plasmic-import: 9OJlOmM7wOCx/component
import FormButton from '../../FormButton';
// plasmic-import: 0unuJERr1LKB/component
import FormCard from '../../FormCard';
// plasmic-import: HmfUjAC5XXE-/component
import FormInputGroup from '../../FormInputGroup';
// plasmic-import: hFREyvMXF-HZ/component
import FormLink from '../../FormLink';
// plasmic-import: BPkDJbnqSOZ0/component
import FormText from '../../FormText';
// plasmic-import: VlFvtDh9iBdw/component
import FormTextInput from '../../FormTextInput';
// plasmic-import: MRElL_DPUhFE/component
import FormTitle from '../../FormTitle';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: wUZakWTdeWBo/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicLogin.module.css';
// plasmic-import: INMXktOfIWiD/icon
import ChevronDownIcon from './icons/PlasmicIcon__ChevronDown';
// plasmic-import: 87eVTdt3lw8O/css

import CircleIcon from './icons/PlasmicIcon__Circle';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  consoleBackground?: Flex__<typeof ConsoleBackground>;
  formCard?: Flex__<typeof FormCard>;
  formTitle?: Flex__<typeof FormTitle>;
  formInputGroup?: Flex__<typeof FormInputGroup>;
  email?: Flex__<typeof FormTextInput>;
  password?: Flex__<typeof FormTextInput>;
  forgotPassword?: Flex__<typeof FormLink>;
  login?: Flex__<typeof FormButton>;
  login2?: Flex__<typeof FormButton>;
  logIn?: Flex__<'div'>;
  noAccount?: Flex__<typeof FormText>;
  signUpLink?: Flex__<typeof FormLink>;
};

export interface DefaultLoginProps {
  className?: string;
}

const $$ = {};

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'email.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'password.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'email2',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => '',
      },
      {
        path: 'password2',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => '',
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <ConsoleProvider
          data-plasmic-name={'consoleProvider'}
          data-plasmic-override={overrides.consoleProvider}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            '__wab_instance',
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.consoleProvider,
          )}
          ref={(ref) => {
            $refs['consoleProvider'] = ref;
          }}
        >
          <DataCtxReader__>
            {($ctx) => (
              <ConsoleBackground
                data-plasmic-name={'consoleBackground'}
                data-plasmic-override={overrides.consoleBackground}
                className={classNames('__wab_instance', sty.consoleBackground)}
                content={
                  <FormCard
                    data-plasmic-name={'formCard'}
                    data-plasmic-override={overrides.formCard}
                    className={classNames('__wab_instance', sty.formCard)}
                    content={
                      <React.Fragment>
                        <FormTitle
                          data-plasmic-name={'formTitle'}
                          data-plasmic-override={overrides.formTitle}
                          className={classNames(
                            '__wab_instance',
                            sty.formTitle,
                          )}
                          subtitle={
                            'Acc\u00e9der \u00e0 votre espace France Nuage'
                          }
                          title={'Se connecter'}
                        />

                        <FormInputGroup
                          data-plasmic-name={'formInputGroup'}
                          data-plasmic-override={overrides.formInputGroup}
                          className={classNames(
                            '__wab_instance',
                            sty.formInputGroup,
                          )}
                          inputs={
                            <React.Fragment>
                              <FormTextInput
                                data-plasmic-name={'email'}
                                data-plasmic-override={overrides.email}
                                autoComplete={['email']}
                                className={classNames(
                                  '__wab_instance',
                                  sty.email,
                                )}
                                inputMode={'email'}
                                inputType={'email'}
                                label={'Email'}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    'email',
                                    'value',
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={``}
                                value={generateStateValueProp($state, [
                                  'email',
                                  'value',
                                ])}
                              />

                              <FormTextInput
                                data-plasmic-name={'password'}
                                data-plasmic-override={overrides.password}
                                autoComplete={['new-password']}
                                className={classNames(
                                  '__wab_instance',
                                  sty.password,
                                )}
                                inputMode={'none'}
                                inputType={'password'}
                                label={'Mot de passe'}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    'password',
                                    'value',
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={``}
                                value={generateStateValueProp($state, [
                                  'password',
                                  'value',
                                ])}
                              />

                              <FormLink
                                data-plasmic-name={'forgotPassword'}
                                data-plasmic-override={overrides.forgotPassword}
                                className={classNames(
                                  '__wab_instance',
                                  sty.forgotPassword,
                                )}
                                content={'Mot de passe oubli\u00e9 ?'}
                                destination={(() => {
                                  try {
                                    return (
                                      '/forgot-password?email=' +
                                      ($state.email.value || '')
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        'PlasmicUndefinedDataError'
                                    ) {
                                      return `/forgot-password`;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <FormButton
                                data-plasmic-name={'login'}
                                data-plasmic-override={overrides.login}
                                className={classNames(
                                  '__wab_instance',
                                  sty.login,
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rLoGi,
                                    )}
                                  >
                                    {'Se connecter'}
                                  </div>
                                }
                                onClick={async (event) => {
                                  const $steps = {};

                                  $steps['runActionOnConsoleProvider'] = true
                                    ? (() => {
                                        const actionArgs = {
                                          tplRef: 'consoleProvider',
                                          action: 'signin',
                                        };
                                        return (({ tplRef, action, args }) => {
                                          return $refs?.[tplRef]?.[action]?.(
                                            ...(args ?? []),
                                          );
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps['runActionOnConsoleProvider'] !=
                                      null &&
                                    typeof $steps[
                                      'runActionOnConsoleProvider'
                                    ] === 'object' &&
                                    typeof $steps['runActionOnConsoleProvider']
                                      .then === 'function'
                                  ) {
                                    $steps['runActionOnConsoleProvider'] =
                                      await $steps[
                                        'runActionOnConsoleProvider'
                                      ];
                                  }
                                }}
                              />

                              <FormButton
                                data-plasmic-name={'login2'}
                                data-plasmic-override={overrides.login2}
                                className={classNames(
                                  '__wab_instance',
                                  sty.login2,
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fkIl4,
                                    )}
                                  >
                                    {'Se connecter avec Gitlab'}
                                  </div>
                                }
                                onClick={async (event) => {
                                  const $steps = {};

                                  $steps['runActionOnConsoleProvider'] = true
                                    ? (() => {
                                        const actionArgs = {
                                          tplRef: 'consoleProvider',
                                          action: 'signin',
                                        };
                                        return (({ tplRef, action, args }) => {
                                          return $refs?.[tplRef]?.[action]?.(
                                            ...(args ?? []),
                                          );
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps['runActionOnConsoleProvider'] !=
                                      null &&
                                    typeof $steps[
                                      'runActionOnConsoleProvider'
                                    ] === 'object' &&
                                    typeof $steps['runActionOnConsoleProvider']
                                      .then === 'function'
                                  ) {
                                    $steps['runActionOnConsoleProvider'] =
                                      await $steps[
                                        'runActionOnConsoleProvider'
                                      ];
                                  }
                                }}
                              />

                              <Stack__
                                as={'div'}
                                data-plasmic-name={'logIn'}
                                data-plasmic-override={overrides.logIn}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.logIn,
                                )}
                              >
                                <FormText
                                  data-plasmic-name={'noAccount'}
                                  data-plasmic-override={overrides.noAccount}
                                  className={classNames(
                                    '__wab_instance',
                                    sty.noAccount,
                                  )}
                                  text={"Vous n'avez pas encore de compte ?"}
                                />

                                <FormLink
                                  data-plasmic-name={'signUpLink'}
                                  data-plasmic-override={overrides.signUpLink}
                                  className={classNames(
                                    '__wab_instance',
                                    sty.signUpLink,
                                  )}
                                  content={"S'inscrire"}
                                  destination={`/signup`}
                                />
                              </Stack__>
                            </React.Fragment>
                          }
                        />
                      </React.Fragment>
                    }
                  />
                }
              />
            )}
          </DataCtxReader__>
        </ConsoleProvider>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  consoleProvider: [
    'consoleProvider',
    'consoleBackground',
    'formCard',
    'formTitle',
    'formInputGroup',
    'email',
    'password',
    'forgotPassword',
    'login',
    'login2',
    'logIn',
    'noAccount',
    'signUpLink',
  ],
  consoleBackground: [
    'consoleBackground',
    'formCard',
    'formTitle',
    'formInputGroup',
    'email',
    'password',
    'forgotPassword',
    'login',
    'login2',
    'logIn',
    'noAccount',
    'signUpLink',
  ],
  formCard: [
    'formCard',
    'formTitle',
    'formInputGroup',
    'email',
    'password',
    'forgotPassword',
    'login',
    'login2',
    'logIn',
    'noAccount',
    'signUpLink',
  ],
  formTitle: ['formTitle'],
  formInputGroup: [
    'formInputGroup',
    'email',
    'password',
    'forgotPassword',
    'login',
    'login2',
    'logIn',
    'noAccount',
    'signUpLink',
  ],
  email: ['email'],
  password: ['password'],
  forgotPassword: ['forgotPassword'],
  login: ['login'],
  login2: ['login2'],
  logIn: ['logIn', 'noAccount', 'signUpLink'],
  noAccount: ['noAccount'],
  signUpLink: ['signUpLink'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  consoleProvider: typeof ConsoleProvider;
  consoleBackground: typeof ConsoleBackground;
  formCard: typeof FormCard;
  formTitle: typeof FormTitle;
  formInputGroup: typeof FormInputGroup;
  email: typeof FormTextInput;
  password: typeof FormTextInput;
  forgotPassword: typeof FormLink;
  login: typeof FormButton;
  login2: typeof FormButton;
  logIn: 'div';
  noAccount: typeof FormText;
  signUpLink: typeof FormLink;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'consoleProvider') {
    func.displayName = 'PlasmicLogin';
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent('consoleProvider'),
  {
    // Helper components rendering sub-elements
    consoleBackground: makeNodeComponent('consoleBackground'),
    formCard: makeNodeComponent('formCard'),
    formTitle: makeNodeComponent('formTitle'),
    formInputGroup: makeNodeComponent('formInputGroup'),
    email: makeNodeComponent('email'),
    password: makeNodeComponent('password'),
    forgotPassword: makeNodeComponent('forgotPassword'),
    login: makeNodeComponent('login'),
    login2: makeNodeComponent('login2'),
    logIn: makeNodeComponent('logIn'),
    noAccount: makeNodeComponent('noAccount'),
    signUpLink: makeNodeComponent('signUpLink'),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: 'Se connecter à France nuage',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  },
);

export default PlasmicLogin;
/* prettier-ignore-end */
