/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: 7igOedWgPhE0
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import { BaseListBoxItem } from '@plasmicpkgs/react-aria/skinny/registerListBoxItem';
import { BaseText } from '@plasmicpkgs/react-aria/skinny/registerText';
import { BaseText as BaseText2 } from '@plasmicpkgs/react-aria/skinny/registerText';
import * as React from 'react';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicNavigationMenuItem.module.css';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: 7igOedWgPhE0/css

createPlasmicElementProxy;

export type PlasmicNavigationMenuItem__VariantMembers = {};
export type PlasmicNavigationMenuItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationMenuItem__VariantsArgs;
export const PlasmicNavigationMenuItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavigationMenuItem__ArgsType = {
  value?: string;
  label?: string;
  description?: string;
};
type ArgPropType = keyof PlasmicNavigationMenuItem__ArgsType;
export const PlasmicNavigationMenuItem__ArgProps = new Array<ArgPropType>(
  'value',
  'label',
  'description',
);

export type PlasmicNavigationMenuItem__OverridesType = {
  root?: Flex__<typeof BaseListBoxItem>;
  ariaText?: Flex__<typeof BaseText>;
  ariaDescription?: Flex__<typeof BaseText2>;
};

export interface DefaultNavigationMenuItemProps {
  value?: string;
  label?: string;
  description?: string;
  className?: string;
}

const $$ = {};

function PlasmicNavigationMenuItem__RenderFunc(props: {
  variants: PlasmicNavigationMenuItem__VariantsArgs;
  args: PlasmicNavigationMenuItem__ArgsType;
  overrides: PlasmicNavigationMenuItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          value: ``,
          label: 'Item 1',
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    hovered: false,
    pressed: false,
    focused: false,
    focusVisible: false,
    selected: false,
    disabled: false,
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants((prev) => {
        if (!Object.keys(changes).some((k) => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    [],
  );

  return (
    <BaseListBoxItem
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        '__wab_instance',
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
      )}
      id={args.value}
      plasmicUpdateVariant={updateVariant}
      textValue={args.label}
    >
      <Stack__
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__zNeU)}
      >
        <BaseText
          data-plasmic-name={'ariaText'}
          data-plasmic-override={overrides.ariaText}
          className={classNames('__wab_instance', sty.ariaText)}
          slot={'label'}
        >
          <div className={classNames(projectcss.all, sty.freeBox__xxfrO)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rcOm,
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === 'PlasmicUndefinedDataError'
                    ) {
                      return 'Item 1';
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </BaseText>
        {(() => {
          try {
            return $props.description;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === 'PlasmicUndefinedDataError'
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <BaseText2
            data-plasmic-name={'ariaDescription'}
            data-plasmic-override={overrides.ariaDescription}
            className={classNames('__wab_instance', sty.ariaDescription)}
            slot={'description'}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g4WZp,
              )}
            >
              <React.Fragment>{$props.description}</React.Fragment>
            </div>
          </BaseText2>
        ) : null}
      </Stack__>
    </BaseListBoxItem>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'ariaText', 'ariaDescription'],
  ariaText: ['ariaText'],
  ariaDescription: ['ariaDescription'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseListBoxItem;
  ariaText: typeof BaseText;
  ariaDescription: typeof BaseText2;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationMenuItem__VariantsArgs;
    args?: PlasmicNavigationMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigationMenuItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationMenuItem__ArgProps,
          internalVariantPropNames: PlasmicNavigationMenuItem__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicNavigationMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNavigationMenuItem';
  } else {
    func.displayName = `PlasmicNavigationMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationMenuItem = Object.assign(
  // Top-level PlasmicNavigationMenuItem renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    ariaText: makeNodeComponent('ariaText'),
    ariaDescription: makeNodeComponent('ariaDescription'),

    // Metadata about props expected for PlasmicNavigationMenuItem
    internalVariantProps: PlasmicNavigationMenuItem__VariantProps,
    internalArgProps: PlasmicNavigationMenuItem__ArgProps,
  },
);

export default PlasmicNavigationMenuItem;
/* prettier-ignore-end */
