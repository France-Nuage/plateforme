/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: 1VSU1092sLjX
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import { BaseButton } from '@plasmicpkgs/react-aria/skinny/registerButton';
import { BaseComboBox } from '@plasmicpkgs/react-aria/skinny/registerComboBox';
// plasmic-import: u-FGr4L8Yprh/component
import { BaseInput } from '@plasmicpkgs/react-aria/skinny/registerInput';
import { inputHelpers as BaseInput_Helpers } from '@plasmicpkgs/react-aria/skinny/registerInput';
import * as React from 'react';

import FormDescription from '../../FormDescription';
import FormLabel from '../../FormLabel';
// plasmic-import: w32J7NYCC69P/component
import NavigationMenuItem from '../../NavigationMenuItem';
// plasmic-import: lV6eYbXtJGqM/component
import NavigationMenuPopover from '../../NavigationMenuPopover';
// plasmic-import: 7igOedWgPhE0/component
import NavigationMenuSection from '../../NavigationMenuSection';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicFormSelect2.module.css';
// plasmic-import: KPbEJV0fyfV4/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: 1VSU1092sLjX/css

import ChevronDownIcon from './icons/PlasmicIcon__ChevronDown';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicFormSelect2__VariantMembers = {
  type: 'soft' | 'plain';
};
export type PlasmicFormSelect2__VariantsArgs = {
  type?: SingleChoiceArg<'soft' | 'plain'>;
};
type VariantPropType = keyof PlasmicFormSelect2__VariantsArgs;
export const PlasmicFormSelect2__VariantProps = new Array<VariantPropType>(
  'type',
);

export type PlasmicFormSelect2__ArgsType = {
  isOpen?: boolean;
  onOpenChange?: (val: boolean) => void;
  value?: string;
  placeholder?: string;
  showLabel?: boolean;
  showDescription?: boolean;
  onChange?: (val: string) => void;
  autoFocus?: boolean;
  inputDisplayValue?: string;
  disabled?: boolean;
  ariaLabel?: string;
  readOnly?: boolean;
  label?: React.ReactNode;
  description?: React.ReactNode;
  items?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFormSelect2__ArgsType;
export const PlasmicFormSelect2__ArgProps = new Array<ArgPropType>(
  'isOpen',
  'onOpenChange',
  'value',
  'placeholder',
  'showLabel',
  'showDescription',
  'onChange',
  'autoFocus',
  'inputDisplayValue',
  'disabled',
  'ariaLabel',
  'readOnly',
  'label',
  'description',
  'items',
);

export type PlasmicFormSelect2__OverridesType = {
  ariaComboBox?: Flex__<typeof BaseComboBox>;
  formLabel?: Flex__<typeof FormLabel>;
  freeBox?: Flex__<'div'>;
  ariaInput?: Flex__<typeof BaseInput>;
  ariaButton?: Flex__<typeof BaseButton>;
  svg?: Flex__<'svg'>;
  formDescription?: Flex__<typeof FormDescription>;
  navigationMenuPopover?: Flex__<typeof NavigationMenuPopover>;
};

export interface DefaultFormSelect2Props {
  isOpen?: boolean;
  onOpenChange?: (val: boolean) => void;
  value?: string;
  placeholder?: string;
  showLabel?: boolean;
  showDescription?: boolean;
  onChange?: (val: string) => void;
  autoFocus?: boolean;
  inputDisplayValue?: string;
  disabled?: boolean;
  ariaLabel?: string;
  readOnly?: boolean;
  label?: React.ReactNode;
  description?: React.ReactNode;
  items?: React.ReactNode;
  type?: SingleChoiceArg<'soft' | 'plain'>;
  className?: string;
}

const $$ = {};

function PlasmicFormSelect2__RenderFunc(props: {
  variants: PlasmicFormSelect2__VariantsArgs;
  args: PlasmicFormSelect2__ArgsType;
  overrides: PlasmicFormSelect2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: 'Select an item',
          showLabel: true,
          showDescription: false,
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'ariaComboBox.isOpen',
        type: 'writable',
        variableType: 'boolean',

        valueProp: 'isOpen',
        onChangeProp: 'onOpenChange',
      },
      {
        path: 'ariaComboBox.selectedValue',
        type: 'writable',
        variableType: 'text',

        valueProp: 'value',
        onChangeProp: 'onChange',
      },
      {
        path: 'type',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: 'ariaInput.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec('value', BaseInput_Helpers),
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    disabled: false,
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants((prev) => {
        if (!Object.keys(changes).some((k) => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    [],
  );

  return (
    <BaseComboBox
      data-plasmic-name={'ariaComboBox'}
      data-plasmic-override={overrides.ariaComboBox}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        '__wab_instance',
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.ariaComboBox,
        {
          [sty.ariaComboBoxtype_plain]: hasVariant($state, 'type', 'plain'),
          [sty.ariaComboBoxtype_soft]: hasVariant($state, 'type', 'soft'),
        },
      )}
      isDisabled={args.disabled}
      isOpen={generateStateValueProp($state, ['ariaComboBox', 'isOpen'])}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ['ariaComboBox', 'isOpen']).apply(
          null,
          eventArgs,
        );
      }}
      onSelectionChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, [
          'ariaComboBox',
          'selectedValue',
        ]).apply(null, eventArgs);
      }}
      plasmicUpdateVariant={updateVariant}
      selectedKey={generateStateValueProp($state, [
        'ariaComboBox',
        'selectedValue',
      ])}
    >
      {$props.showLabel ? (
        <FormLabel
          data-plasmic-name={'formLabel'}
          data-plasmic-override={overrides.formLabel}
          className={classNames('__wab_instance', sty.formLabel)}
        >
          {renderPlasmicSlot({
            defaultContents: 'Label',
            value: args.label,
          })}
        </FormLabel>
      ) : null}
      <div
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(() => {
          const child$Props = {
            className: classNames('__wab_instance', sty.ariaInput),
            disabled: false,
            inputMode: 'numeric',
            onChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                'value',
                ['ariaInput', 'value'],
                BaseInput_Helpers,
              ).apply(null, eventArgs);
            },
            placeholder: args.placeholder,
            value: generateStateValueProp($state, ['ariaInput', 'value']),
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: 'value',
                plasmicStateName: 'ariaInput.value',
              },
            ],
            [],
            BaseInput_Helpers ?? {},
            child$Props,
          );

          return (
            <BaseInput
              data-plasmic-name={'ariaInput'}
              data-plasmic-override={overrides.ariaInput}
              {...child$Props}
            />
          );
        })()}
        <BaseButton
          data-plasmic-name={'ariaButton'}
          data-plasmic-override={overrides.ariaButton}
          className={classNames('__wab_instance', sty.ariaButton)}
        >
          <ChevronDownIcon
            data-plasmic-name={'svg'}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={'img'}
          />
        </BaseButton>
      </div>
      {$props.showDescription ? (
        <FormDescription
          data-plasmic-name={'formDescription'}
          data-plasmic-override={overrides.formDescription}
          className={classNames('__wab_instance', sty.formDescription)}
        >
          {renderPlasmicSlot({
            defaultContents: 'Description...',
            value: args.description,
          })}
        </FormDescription>
      ) : null}
      <NavigationMenuPopover
        data-plasmic-name={'navigationMenuPopover'}
        data-plasmic-override={overrides.navigationMenuPopover}
        menuItems={renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <NavigationMenuItem label={'Item 1'} value={'item1'} />

              <NavigationMenuItem label={'Item 2'} value={'item2'} />

              <NavigationMenuItem label={'Item 3'} value={'item3'} />

              <NavigationMenuSection
                header={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c7R7I,
                    )}
                  >
                    {'Section'}
                  </div>
                }
                items={
                  <React.Fragment>
                    <NavigationMenuItem
                      label={'Section Item 1'}
                      value={'section-item-1'}
                    />

                    <NavigationMenuItem
                      label={'Section Item 2'}
                      value={'section-item-2'}
                    />

                    <NavigationMenuItem
                      label={'Section Item 3'}
                      value={'section-item-3'}
                    />
                  </React.Fragment>
                }
              />
            </React.Fragment>
          ),
          value: args.items,
        })}
        offset={2}
      />
    </BaseComboBox>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaComboBox: [
    'ariaComboBox',
    'formLabel',
    'freeBox',
    'ariaInput',
    'ariaButton',
    'svg',
    'formDescription',
    'navigationMenuPopover',
  ],
  formLabel: ['formLabel'],
  freeBox: ['freeBox', 'ariaInput', 'ariaButton', 'svg'],
  ariaInput: ['ariaInput'],
  ariaButton: ['ariaButton', 'svg'],
  svg: ['svg'],
  formDescription: ['formDescription'],
  navigationMenuPopover: ['navigationMenuPopover'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaComboBox: typeof BaseComboBox;
  formLabel: typeof FormLabel;
  freeBox: 'div';
  ariaInput: typeof BaseInput;
  ariaButton: typeof BaseButton;
  svg: 'svg';
  formDescription: typeof FormDescription;
  navigationMenuPopover: typeof NavigationMenuPopover;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormSelect2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormSelect2__VariantsArgs;
    args?: PlasmicFormSelect2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormSelect2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormSelect2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormSelect2__ArgProps,
          internalVariantPropNames: PlasmicFormSelect2__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicFormSelect2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'ariaComboBox') {
    func.displayName = 'PlasmicFormSelect2';
  } else {
    func.displayName = `PlasmicFormSelect2.${nodeName}`;
  }
  return func;
}

export const PlasmicFormSelect2 = Object.assign(
  // Top-level PlasmicFormSelect2 renders the root element
  makeNodeComponent('ariaComboBox'),
  {
    // Helper components rendering sub-elements
    formLabel: makeNodeComponent('formLabel'),
    freeBox: makeNodeComponent('freeBox'),
    ariaInput: makeNodeComponent('ariaInput'),
    ariaButton: makeNodeComponent('ariaButton'),
    svg: makeNodeComponent('svg'),
    formDescription: makeNodeComponent('formDescription'),
    navigationMenuPopover: makeNodeComponent('navigationMenuPopover'),

    // Metadata about props expected for PlasmicFormSelect2
    internalVariantProps: PlasmicFormSelect2__VariantProps,
    internalArgProps: PlasmicFormSelect2__ArgProps,
  },
);

export default PlasmicFormSelect2;
/* prettier-ignore-end */
