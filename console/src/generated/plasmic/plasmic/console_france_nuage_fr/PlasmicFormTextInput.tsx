/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: hFREyvMXF-HZ
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
// plasmic-import: u-FGr4L8Yprh/component
import { BaseInput } from '@plasmicpkgs/react-aria/skinny/registerInput';
import { inputHelpers as BaseInput_Helpers } from '@plasmicpkgs/react-aria/skinny/registerInput';
import * as React from 'react';

import FormLabel from '../../FormLabel';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicFormTextInput.module.css';
import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: hFREyvMXF-HZ/css

createPlasmicElementProxy;

export type PlasmicFormTextInput__VariantMembers = {
  type: 'soft' | 'plain';
  flat: 'top' | 'right' | 'bottom' | 'left';
  padded: 'left' | 'right';
  contour: 'contour';
};
export type PlasmicFormTextInput__VariantsArgs = {
  type?: SingleChoiceArg<'soft' | 'plain'>;
  flat?: MultiChoiceArg<'top' | 'right' | 'bottom' | 'left'>;
  padded?: MultiChoiceArg<'left' | 'right'>;
  contour?: SingleBooleanChoiceArg<'contour'>;
};
type VariantPropType = keyof PlasmicFormTextInput__VariantsArgs;
export const PlasmicFormTextInput__VariantProps = new Array<VariantPropType>(
  'type',
  'flat',
  'padded',
  'contour',
);

export type PlasmicFormTextInput__ArgsType = {
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  inputType?: 'text' | 'search' | 'url' | 'tel' | 'email' | 'password';
  inputMode?:
    | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
  autoComplete?:
    | 'on'
    | 'off'
    | 'name'
    | 'honorific-prefix'
    | 'given-name'
    | 'additional-name'
    | 'family-name'
    | 'honorific-suffix'
    | 'nickname'
    | 'email'
    | 'username'
    | 'new-password'
    | 'current-password'
    | 'one-time-code'
    | 'organization-title'
    | 'organization'
    | 'street-address'
    | 'shipping'
    | 'billing'
    | 'address-line1'
    | 'address-line2'
    | 'address-line3'
    | 'address-level4'
    | 'address-level3'
    | 'address-level2'
    | 'address-level1'
    | 'country'
    | 'country-name'
    | 'postal-code'
    | 'cc-name'
    | 'cc-given-name'
    | 'cc-additional-name'
    | 'cc-family-name'
    | 'cc-number'
    | 'cc-exp'
    | 'cc-exp-month'
    | 'cc-exp-year'
    | 'cc-csc'
    | 'cc-type'
    | 'transaction-currency'
    | 'transaction-amount'
    | 'language'
    | 'bday'
    | 'bday-day'
    | 'bday-month'
    | 'bday-year'
    | 'sex'
    | 'tel'
    | 'tel-country-code'
    | 'tel-national'
    | 'tel-area-code'
    | 'tel-local'
    | 'tel-local-suffix'
    | 'tel-local-prefix'
    | 'tel-extension'
    | 'impp'
    | 'url'
    | 'photo'
    | 'webauthn';
  ariaLabel?: string;
  onChange?: (val: string) => void;
  label?: string;
};
type ArgPropType = keyof PlasmicFormTextInput__ArgsType;
export const PlasmicFormTextInput__ArgProps = new Array<ArgPropType>(
  'placeholder',
  'value',
  'disabled',
  'readOnly',
  'autoFocus',
  'inputType',
  'inputMode',
  'autoComplete',
  'ariaLabel',
  'onChange',
  'label',
);

export type PlasmicFormTextInput__OverridesType = {
  root?: Flex__<'div'>;
  formLabel?: Flex__<typeof FormLabel>;
  text?: Flex__<'div'>;
  ariaInput?: Flex__<typeof BaseInput>;
};

export interface DefaultFormTextInputProps {
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  inputType?: 'text' | 'search' | 'url' | 'tel' | 'email' | 'password';
  inputMode?:
    | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
  autoComplete?:
    | 'on'
    | 'off'
    | 'name'
    | 'honorific-prefix'
    | 'given-name'
    | 'additional-name'
    | 'family-name'
    | 'honorific-suffix'
    | 'nickname'
    | 'email'
    | 'username'
    | 'new-password'
    | 'current-password'
    | 'one-time-code'
    | 'organization-title'
    | 'organization'
    | 'street-address'
    | 'shipping'
    | 'billing'
    | 'address-line1'
    | 'address-line2'
    | 'address-line3'
    | 'address-level4'
    | 'address-level3'
    | 'address-level2'
    | 'address-level1'
    | 'country'
    | 'country-name'
    | 'postal-code'
    | 'cc-name'
    | 'cc-given-name'
    | 'cc-additional-name'
    | 'cc-family-name'
    | 'cc-number'
    | 'cc-exp'
    | 'cc-exp-month'
    | 'cc-exp-year'
    | 'cc-csc'
    | 'cc-type'
    | 'transaction-currency'
    | 'transaction-amount'
    | 'language'
    | 'bday'
    | 'bday-day'
    | 'bday-month'
    | 'bday-year'
    | 'sex'
    | 'tel'
    | 'tel-country-code'
    | 'tel-national'
    | 'tel-area-code'
    | 'tel-local'
    | 'tel-local-suffix'
    | 'tel-local-prefix'
    | 'tel-extension'
    | 'impp'
    | 'url'
    | 'photo'
    | 'webauthn';
  ariaLabel?: string;
  onChange?: (val: string) => void;
  label?: string;
  type?: SingleChoiceArg<'soft' | 'plain'>;
  flat?: MultiChoiceArg<'top' | 'right' | 'bottom' | 'left'>;
  padded?: MultiChoiceArg<'left' | 'right'>;
  contour?: SingleBooleanChoiceArg<'contour'>;
  className?: string;
}

const $$ = {};

function PlasmicFormTextInput__RenderFunc(props: {
  variants: PlasmicFormTextInput__VariantsArgs;
  args: PlasmicFormTextInput__ArgsType;
  overrides: PlasmicFormTextInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'ariaInput.value',
        type: 'writable',
        variableType: 'text',

        valueProp: 'value',
        onChangeProp: 'onChange',

        onMutate: generateOnMutateForSpec('value', BaseInput_Helpers),
      },
      {
        path: 'type',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: 'flat',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.flat,
      },
      {
        path: 'padded',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.padded,
      },
      {
        path: 'contour',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.contour,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <Stack__
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcontour]: hasVariant($state, 'contour', 'contour'),
          [sty.rootflat_bottom]: hasVariant($state, 'flat', 'bottom'),
          [sty.rootflat_left]: hasVariant($state, 'flat', 'left'),
          [sty.rootflat_right]: hasVariant($state, 'flat', 'right'),
          [sty.rootflat_top]: hasVariant($state, 'flat', 'top'),
          [sty.rootpadded_left]: hasVariant($state, 'padded', 'left'),
          [sty.rootpadded_right]: hasVariant($state, 'padded', 'right'),
          [sty.roottype_plain]: hasVariant($state, 'type', 'plain'),
          [sty.roottype_soft]: hasVariant($state, 'type', 'soft'),
        },
      )}
    >
      {(() => {
        try {
          return $props.label;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === 'PlasmicUndefinedDataError'
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <FormLabel
          data-plasmic-name={'formLabel'}
          data-plasmic-override={overrides.formLabel}
          className={classNames('__wab_instance', sty.formLabel)}
        >
          <div
            data-plasmic-name={'text'}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === 'PlasmicUndefinedDataError'
                  ) {
                    return 'Label';
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </FormLabel>
      ) : null}
      {(() => {
        const child$Props = {
          'aria-label': args.ariaLabel,
          autoComplete: args.autoComplete,
          autoFocus: args.autoFocus,
          className: classNames('__wab_instance', sty.ariaInput, {
            [sty.ariaInputcontour]: hasVariant($state, 'contour', 'contour'),
            [sty.ariaInputflat_bottom]: hasVariant($state, 'flat', 'bottom'),
            [sty.ariaInputflat_left]: hasVariant($state, 'flat', 'left'),
            [sty.ariaInputflat_right]: hasVariant($state, 'flat', 'right'),
            [sty.ariaInputflat_top]: hasVariant($state, 'flat', 'top'),
            [sty.ariaInputpadded_left]: hasVariant($state, 'padded', 'left'),
            [sty.ariaInputpadded_right]: hasVariant($state, 'padded', 'right'),
            [sty.ariaInputtype_plain]: hasVariant($state, 'type', 'plain'),
            [sty.ariaInputtype_soft]: hasVariant($state, 'type', 'soft'),
          }),
          disabled: args.disabled,
          inputMode: args.inputMode,
          onChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              'value',
              ['ariaInput', 'value'],
              BaseInput_Helpers,
            ).apply(null, eventArgs);
          },
          placeholder: args.placeholder,
          readOnly: args.readOnly,
          type: args.inputType,
          value: generateStateValueProp($state, ['ariaInput', 'value']),
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: 'value',
              plasmicStateName: 'ariaInput.value',
            },
          ],
          [],
          BaseInput_Helpers ?? {},
          child$Props,
        );

        return (
          <BaseInput
            data-plasmic-name={'ariaInput'}
            data-plasmic-override={overrides.ariaInput}
            {...child$Props}
          />
        );
      })()}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'formLabel', 'text', 'ariaInput'],
  formLabel: ['formLabel', 'text'],
  text: ['text'],
  ariaInput: ['ariaInput'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  formLabel: typeof FormLabel;
  text: 'div';
  ariaInput: typeof BaseInput;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormTextInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormTextInput__VariantsArgs;
    args?: PlasmicFormTextInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormTextInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormTextInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormTextInput__ArgProps,
          internalVariantPropNames: PlasmicFormTextInput__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicFormTextInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicFormTextInput';
  } else {
    func.displayName = `PlasmicFormTextInput.${nodeName}`;
  }
  return func;
}

export const PlasmicFormTextInput = Object.assign(
  // Top-level PlasmicFormTextInput renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    formLabel: makeNodeComponent('formLabel'),
    text: makeNodeComponent('text'),
    ariaInput: makeNodeComponent('ariaInput'),

    // Metadata about props expected for PlasmicFormTextInput
    internalVariantProps: PlasmicFormTextInput__VariantProps,
    internalArgProps: PlasmicFormTextInput__ArgProps,
  },
);

export default PlasmicFormTextInput;
/* prettier-ignore-end */
