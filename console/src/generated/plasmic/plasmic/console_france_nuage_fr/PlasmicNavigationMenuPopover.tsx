/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: w32J7NYCC69P
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import { BaseListBox } from '@plasmicpkgs/react-aria/skinny/registerListBox';
import { listboxHelpers as BaseListBox_Helpers } from '@plasmicpkgs/react-aria/skinny/registerListBox';
import { BasePopover } from '@plasmicpkgs/react-aria/skinny/registerPopover';
import * as React from 'react';

import NavigationMenuItem from '../../NavigationMenuItem';
// plasmic-import: 7igOedWgPhE0/component
import NavigationMenuSection from '../../NavigationMenuSection';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: KPbEJV0fyfV4/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicNavigationMenuPopover.module.css';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: w32J7NYCC69P/css

createPlasmicElementProxy;

export type PlasmicNavigationMenuPopover__VariantMembers = {};
export type PlasmicNavigationMenuPopover__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationMenuPopover__VariantsArgs;
export const PlasmicNavigationMenuPopover__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavigationMenuPopover__ArgsType = {
  offset?: number;
  menuItems?: React.ReactNode;
  initialSelectedKey?: 'Dynamic options';
};
type ArgPropType = keyof PlasmicNavigationMenuPopover__ArgsType;
export const PlasmicNavigationMenuPopover__ArgProps = new Array<ArgPropType>(
  'offset',
  'menuItems',
  'initialSelectedKey',
);

export type PlasmicNavigationMenuPopover__OverridesType = {
  root?: Flex__<typeof BasePopover>;
  ariaListBox?: Flex__<typeof BaseListBox>;
};

export interface DefaultNavigationMenuPopoverProps {
  offset?: number;
  menuItems?: React.ReactNode;
  initialSelectedKey?: 'Dynamic options';
  className?: string;
}

const $$ = {};

function PlasmicNavigationMenuPopover__RenderFunc(props: {
  variants: PlasmicNavigationMenuPopover__VariantsArgs;
  args: PlasmicNavigationMenuPopover__ArgsType;
  overrides: PlasmicNavigationMenuPopover__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          offset: 2,
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'ariaListBox.selectedValue',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props['initialSelectedKey'],

        onMutate: generateOnMutateForSpec('selectedValue', BaseListBox_Helpers),
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <BasePopover
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        '__wab_instance',
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
      )}
      matchTriggerWidth={true}
      offset={args.offset}
      placement={'bottom'}
      resetClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
      )}
      shouldFlip={true}
    >
      {(() => {
        const child$Props = {
          className: classNames('__wab_instance', sty.ariaListBox),
          defaultSelectedKeys: args.initialSelectedKey,
          onSelectionChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              'selectedValue',
              ['ariaListBox', 'selectedValue'],
              BaseListBox_Helpers,
            ).apply(null, eventArgs);
          },
          selectedKeys: generateStateValueProp($state, [
            'ariaListBox',
            'selectedValue',
          ]),
          selectionMode: 'single',
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: 'selectedValue',
              plasmicStateName: 'ariaListBox.selectedValue',
            },
          ],
          [],
          BaseListBox_Helpers ?? {},
          child$Props,
        );

        return (
          <BaseListBox
            data-plasmic-name={'ariaListBox'}
            data-plasmic-override={overrides.ariaListBox}
            {...child$Props}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavigationMenuItem
                    className={classNames(
                      '__wab_instance',
                      sty.navigationMenuItem__vK6D4,
                    )}
                    value={'item1'}
                  />

                  <NavigationMenuItem
                    className={classNames(
                      '__wab_instance',
                      sty.navigationMenuItem__vvpH2,
                    )}
                    label={'Item 2'}
                    value={'item2'}
                  />

                  <NavigationMenuItem
                    className={classNames(
                      '__wab_instance',
                      sty.navigationMenuItem__hvulP,
                    )}
                    label={'Item 3'}
                    value={'item3'}
                  />

                  <NavigationMenuSection
                    className={classNames(
                      '__wab_instance',
                      sty.navigationMenuSection__fvfba,
                    )}
                    items={
                      <React.Fragment>
                        <NavigationMenuItem
                          label={'Section Item 1'}
                          value={'section-item-1'}
                        />

                        <NavigationMenuItem
                          label={'Section Item 2'}
                          value={'section-item-2'}
                        />

                        <NavigationMenuItem
                          label={'Section Item 3'}
                          value={'section-item-3'}
                        />
                      </React.Fragment>
                    }
                  />
                </React.Fragment>
              ),
              value: args.menuItems,
            })}
          </BaseListBox>
        );
      })()}
    </BasePopover>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'ariaListBox'],
  ariaListBox: ['ariaListBox'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BasePopover;
  ariaListBox: typeof BaseListBox;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationMenuPopover__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationMenuPopover__VariantsArgs;
    args?: PlasmicNavigationMenuPopover__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationMenuPopover__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigationMenuPopover__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationMenuPopover__ArgProps,
          internalVariantPropNames: PlasmicNavigationMenuPopover__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicNavigationMenuPopover__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNavigationMenuPopover';
  } else {
    func.displayName = `PlasmicNavigationMenuPopover.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationMenuPopover = Object.assign(
  // Top-level PlasmicNavigationMenuPopover renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    ariaListBox: makeNodeComponent('ariaListBox'),

    // Metadata about props expected for PlasmicNavigationMenuPopover
    internalVariantProps: PlasmicNavigationMenuPopover__VariantProps,
    internalArgProps: PlasmicNavigationMenuPopover__ArgProps,
  },
);

export default PlasmicNavigationMenuPopover;
/* prettier-ignore-end */
