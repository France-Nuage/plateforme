/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: orxAMMfZ74Z0
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as React from 'react';

import { ConsoleProvider } from '../../../../providers/ConsoleProvider';
// plasmic-import: vWN9dmdYefpY/codeComponent
import ConsoleBreadcrumb from '../../ConsoleBreadcrumb';
// plasmic-import: tYFejTQb0c1A/component
import FormButton from '../../FormButton';
// plasmic-import: hFREyvMXF-HZ/component
import FormSelect2 from '../../FormSelect2';
// plasmic-import: BPkDJbnqSOZ0/component
import FormTextInput from '../../FormTextInput';
// plasmic-import: WgBKdGHdVFBy/component
import Modal from '../../Modal';
// plasmic-import: PEgOxZRQTA56/component
import NavigationDrawer from '../../NavigationDrawer';
// plasmic-import: 1VSU1092sLjX/component
import NavigationMenuItem from '../../NavigationMenuItem';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: 7igOedWgPhE0/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicInstances.module.css';
// plasmic-import: INMXktOfIWiD/icon
import ChevronDownIcon from './icons/PlasmicIcon__ChevronDown';
// plasmic-import: orxAMMfZ74Z0/css

import CircleIcon from './icons/PlasmicIcon__Circle';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicInstances__VariantMembers = {};
export type PlasmicInstances__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstances__VariantsArgs;
export const PlasmicInstances__VariantProps = new Array<VariantPropType>();

export type PlasmicInstances__ArgsType = {};
type ArgPropType = keyof PlasmicInstances__ArgsType;
export const PlasmicInstances__ArgProps = new Array<ArgPropType>();

export type PlasmicInstances__OverridesType = {
  root?: Flex__<'div'>;
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  consoleBreadcrumb?: Flex__<typeof ConsoleBreadcrumb>;
  dessous?: Flex__<'div'>;
  navigationDrawer?: Flex__<typeof NavigationDrawer>;
  instances?: Flex__<'div'>;
  nameLabel?: Flex__<'div'>;
  dcLabel?: Flex__<'div'>;
  zeroTrustNetworkLabel?: Flex__<'div'>;
  organizationLabel?: Flex__<'div'>;
  projectLabel?: Flex__<'div'>;
  ipAddressLabel?: Flex__<'div'>;
  statusLabel?: Flex__<'div'>;
  cpuMaxLabel?: Flex__<'div'>;
  cpuUsageLabel?: Flex__<'div'>;
  memoryMaxLabel?: Flex__<'div'>;
  memoryUsageLabel?: Flex__<'div'>;
  diskMaxLabel?: Flex__<'div'>;
  diskUsageLabel?: Flex__<'div'>;
  createdAtLabel?: Flex__<'div'>;
  updatedAtLabel?: Flex__<'div'>;
  actionsLabel?: Flex__<'div'>;
  name?: Flex__<'div'>;
  datacenter?: Flex__<'div'>;
  zeroTrustNetwork?: Flex__<'div'>;
  organization?: Flex__<'div'>;
  project?: Flex__<'div'>;
  ipAddress?: Flex__<'div'>;
  status?: Flex__<'div'>;
  cpuMax?: Flex__<'div'>;
  cpuUsage?: Flex__<'div'>;
  memoryMax?: Flex__<'div'>;
  memoryUsage?: Flex__<'div'>;
  diskMax?: Flex__<'div'>;
  diskUsage?: Flex__<'div'>;
  createdAt?: Flex__<'div'>;
  updatedAt?: Flex__<'div'>;
  actions?: Flex__<'div'>;
  modal?: Flex__<typeof Modal>;
  h3?: Flex__<'h3'>;
  nom?: Flex__<typeof FormTextInput>;
  cpu?: Flex__<typeof FormSelect2>;
  memoire?: Flex__<typeof FormSelect2>;
};

export interface DefaultInstancesProps {
  className?: string;
}

const $$ = {};

function PlasmicInstances__RenderFunc(props: {
  variants: PlasmicInstances__VariantsArgs;
  args: PlasmicInstances__ArgsType;
  overrides: PlasmicInstances__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'instanceDraft',
        type: 'private',
        variableType: 'object',
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          name: '',
          cpu: '',
          memory: '',
        }),
      },
      {
        path: 'modal.isOpen',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'nom.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.instanceDraft.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
      },
      {
        path: 'cpu.isOpen',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },
      {
        path: 'cpu.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.instanceDraft.cpu;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return 'item1';
              }
              throw e;
            }
          })(),
      },
      {
        path: 'memoire.isOpen',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },
      {
        path: 'memoire.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.instanceDraft.memory;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return 'item1';
              }
              throw e;
            }
          })(),
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
          )}
        >
          <ConsoleProvider
            data-plasmic-name={'consoleProvider'}
            data-plasmic-override={overrides.consoleProvider}
            className={classNames('__wab_instance', sty.consoleProvider)}
            ref={(ref) => {
              $refs['consoleProvider'] = ref;
            }}
          >
            <DataCtxReader__>
              {($ctx) => (
                <React.Fragment>
                  <ConsoleBreadcrumb
                    data-plasmic-name={'consoleBreadcrumb'}
                    data-plasmic-override={overrides.consoleBreadcrumb}
                    className={classNames(
                      '__wab_instance',
                      sty.consoleBreadcrumb,
                    )}
                  />

                  <div
                    data-plasmic-name={'dessous'}
                    data-plasmic-override={overrides.dessous}
                    className={classNames(projectcss.all, sty.dessous)}
                  >
                    <NavigationDrawer
                      data-plasmic-name={'navigationDrawer'}
                      data-plasmic-override={overrides.navigationDrawer}
                      className={classNames(
                        '__wab_instance',
                        sty.navigationDrawer,
                      )}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__n4Wjl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ddeos,
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bDrMz,
                          )}
                        >
                          {'VM Instances'}
                        </div>
                      </div>
                      <Stack__
                        as={'div'}
                        data-plasmic-name={'instances'}
                        data-plasmic-override={overrides.instances}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.instances)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zOu2Q,
                          )}
                        >
                          <Stack__
                            as={'div'}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__b46J9,
                            )}
                          >
                            <div
                              data-plasmic-name={'nameLabel'}
                              data-plasmic-override={overrides.nameLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.nameLabel,
                              )}
                            >
                              {'Nom'}
                            </div>
                            <div
                              data-plasmic-name={'dcLabel'}
                              data-plasmic-override={overrides.dcLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.dcLabel,
                              )}
                            >
                              {'DC'}
                            </div>
                            <div
                              data-plasmic-name={'zeroTrustNetworkLabel'}
                              data-plasmic-override={
                                overrides.zeroTrustNetworkLabel
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.zeroTrustNetworkLabel,
                              )}
                            >
                              {'ZTN'}
                            </div>
                            <div
                              data-plasmic-name={'organizationLabel'}
                              data-plasmic-override={
                                overrides.organizationLabel
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.organizationLabel,
                              )}
                            >
                              {'Orga'}
                            </div>
                            <div
                              data-plasmic-name={'projectLabel'}
                              data-plasmic-override={overrides.projectLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.projectLabel,
                              )}
                            >
                              {'Projet'}
                            </div>
                            <div
                              data-plasmic-name={'ipAddressLabel'}
                              data-plasmic-override={overrides.ipAddressLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.ipAddressLabel,
                              )}
                            >
                              {'IP'}
                            </div>
                            <div
                              data-plasmic-name={'statusLabel'}
                              data-plasmic-override={overrides.statusLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.statusLabel,
                              )}
                            >
                              {'Status'}
                            </div>
                            <div
                              data-plasmic-name={'cpuMaxLabel'}
                              data-plasmic-override={overrides.cpuMaxLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.cpuMaxLabel,
                              )}
                            >
                              {'CPU max'}
                            </div>
                            <div
                              data-plasmic-name={'cpuUsageLabel'}
                              data-plasmic-override={overrides.cpuUsageLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.cpuUsageLabel,
                              )}
                            >
                              {'CPU usage'}
                            </div>
                            <div
                              data-plasmic-name={'memoryMaxLabel'}
                              data-plasmic-override={overrides.memoryMaxLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.memoryMaxLabel,
                              )}
                            >
                              {'RAM max'}
                            </div>
                            <div
                              data-plasmic-name={'memoryUsageLabel'}
                              data-plasmic-override={overrides.memoryUsageLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.memoryUsageLabel,
                              )}
                            >
                              {'RAM usage'}
                            </div>
                            <div
                              data-plasmic-name={'diskMaxLabel'}
                              data-plasmic-override={overrides.diskMaxLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.diskMaxLabel,
                              )}
                            >
                              {'disk max'}
                            </div>
                            <div
                              data-plasmic-name={'diskUsageLabel'}
                              data-plasmic-override={overrides.diskUsageLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.diskUsageLabel,
                              )}
                            >
                              {'disk usage'}
                            </div>
                            <div
                              data-plasmic-name={'createdAtLabel'}
                              data-plasmic-override={overrides.createdAtLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.createdAtLabel,
                              )}
                            >
                              {'created at'}
                            </div>
                            <div
                              data-plasmic-name={'updatedAtLabel'}
                              data-plasmic-override={overrides.updatedAtLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.updatedAtLabel,
                              )}
                            >
                              {'updated at'}
                            </div>
                            <div
                              data-plasmic-name={'actionsLabel'}
                              data-plasmic-override={overrides.actionsLabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.actionsLabel,
                              )}
                            >
                              {'actions'}
                            </div>
                          </Stack__>
                          {((_par) =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $ctx['France Nuage'].instances;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === 'PlasmicUndefinedDataError'
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <Stack__
                                as={'div'}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hGzJl,
                                )}
                                key={currentIndex}
                              >
                                <div
                                  data-plasmic-name={'name'}
                                  data-plasmic-override={overrides.name}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.name,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'datacenter'}
                                  data-plasmic-override={overrides.datacenter}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.datacenter,
                                  )}
                                >
                                  {'-'}
                                </div>
                                <div
                                  data-plasmic-name={'zeroTrustNetwork'}
                                  data-plasmic-override={
                                    overrides.zeroTrustNetwork
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.zeroTrustNetwork,
                                  )}
                                >
                                  {'-'}
                                </div>
                                <div
                                  data-plasmic-name={'organization'}
                                  data-plasmic-override={overrides.organization}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.organization,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const project = $ctx[
                                            'France Nuage'
                                          ].projects.find(
                                            (project) =>
                                              (project.id =
                                                currentItem.projectId),
                                          );
                                          const organization = $ctx[
                                            'France Nuage'
                                          ].organizations.find(
                                            (organization) =>
                                              (organization.id =
                                                project.organizationId),
                                          );
                                          return organization.name;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '-';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'project'}
                                  data-plasmic-override={overrides.project}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.project,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx[
                                          'France Nuage'
                                        ].projects.find(
                                          (project) =>
                                            (project.id =
                                              currentItem.projectId),
                                        ).name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '-';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'ipAddress'}
                                  data-plasmic-override={overrides.ipAddress}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.ipAddress,
                                  )}
                                >
                                  {'-'}
                                </div>
                                <div
                                  data-plasmic-name={'status'}
                                  data-plasmic-override={overrides.status}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.status,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.status;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '-';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'cpuMax'}
                                  data-plasmic-override={overrides.cpuMax}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.cpuMax,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.maxCpuCores;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '-';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'cpuUsage'}
                                  data-plasmic-override={overrides.cpuUsage}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.cpuUsage,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `${currentItem.cpuUsagePercent}%`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '-';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'memoryMax'}
                                  data-plasmic-override={overrides.memoryMax}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.memoryMax,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `${
                                          Math.round(
                                            (currentItem.maxMemoryBytes /
                                              1024 ** 3) *
                                              1000,
                                          ) / 1000
                                        }GB`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '-';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'memoryUsage'}
                                  data-plasmic-override={overrides.memoryUsage}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.memoryUsage,
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `${
                                          Math.round(
                                            (currentItem.memoryUsageBytes /
                                              1024 ** 3) *
                                              1000,
                                          ) / 1000
                                        }GB`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            'PlasmicUndefinedDataError'
                                        ) {
                                          return '-';
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={'diskMax'}
                                  data-plasmic-override={overrides.diskMax}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.diskMax,
                                  )}
                                >
                                  {'-'}
                                </div>
                                <div
                                  data-plasmic-name={'diskUsage'}
                                  data-plasmic-override={overrides.diskUsage}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.diskUsage,
                                  )}
                                >
                                  {'-'}
                                </div>
                                <div
                                  data-plasmic-name={'createdAt'}
                                  data-plasmic-override={overrides.createdAt}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.createdAt,
                                  )}
                                >
                                  {'-'}
                                </div>
                                <div
                                  data-plasmic-name={'updatedAt'}
                                  data-plasmic-override={overrides.updatedAt}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.updatedAt,
                                  )}
                                >
                                  {'-'}
                                </div>
                                <div
                                  data-plasmic-name={'actions'}
                                  data-plasmic-override={overrides.actions}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.actions,
                                  )}
                                >
                                  {'start - delete'}
                                </div>
                              </Stack__>
                            );
                          })}
                        </div>
                        <Modal
                          data-plasmic-name={'modal'}
                          data-plasmic-override={overrides.modal}
                          className={classNames('__wab_instance', sty.modal)}
                          closeOnBackdropClick={true}
                          content={
                            <Stack__
                              as={'div'}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kAy2X,
                              )}
                            >
                              <Stack__
                                as={'div'}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pEQk6,
                                )}
                              >
                                <FormTextInput
                                  data-plasmic-name={'nom'}
                                  data-plasmic-override={overrides.nom}
                                  ariaLabel={``}
                                  autoComplete={[]}
                                  className={classNames(
                                    '__wab_instance',
                                    sty.nom,
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      'nom',
                                      'value',
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }

                                    (async (val) => {
                                      const $steps = {};

                                      $steps['updateInstanceDraft'] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ['instanceDraft'],
                                              },
                                              operation: 0,
                                              value: $state.nom.value,
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount,
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value,
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps['updateInstanceDraft'] != null &&
                                        typeof $steps['updateInstanceDraft'] ===
                                          'object' &&
                                        typeof $steps['updateInstanceDraft']
                                          .then === 'function'
                                      ) {
                                        $steps['updateInstanceDraft'] =
                                          await $steps['updateInstanceDraft'];
                                      }
                                    }).apply(null, eventArgs);
                                  }}
                                  placeholder={'Nom'}
                                  value={generateStateValueProp($state, [
                                    'nom',
                                    'value',
                                  ])}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wkl9V,
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        'plasmic_default__all plasmic_default__span'
                                      }
                                      style={{
                                        color: 'var(--token-9DYAKh_l4jQS)',
                                      }}
                                    >
                                      {
                                        'Le nom de votre instance ne peut contenir que des caract\u00e8res alphanum\u00e9riques, des points et des tirets.'
                                      }
                                    </span>
                                  </React.Fragment>
                                </div>
                              </Stack__>
                              <FormSelect2
                                data-plasmic-name={'cpu'}
                                data-plasmic-override={overrides.cpu}
                                className={classNames(
                                  '__wab_instance',
                                  sty.cpu,
                                )}
                                disabled={false}
                                inputDisplayValue={(() => {
                                  try {
                                    return $state.instanceDraft.cpu;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        'PlasmicUndefinedDataError'
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                isOpen={generateStateValueProp($state, [
                                  'cpu',
                                  'isOpen',
                                ])}
                                items={
                                  <React.Fragment>
                                    <NavigationMenuItem
                                      className={classNames(
                                        '__wab_instance',
                                        sty.navigationMenuItem__gmYsG,
                                      )}
                                      label={'2'}
                                      value={'2'}
                                    />

                                    <NavigationMenuItem
                                      label={'4'}
                                      value={'4'}
                                    />

                                    <NavigationMenuItem
                                      label={'8'}
                                      value={'8'}
                                    />
                                  </React.Fragment>
                                }
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    'cpu',
                                    'value',
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }

                                  (async (val) => {
                                    const $steps = {};

                                    $steps['updateInstanceDraft'] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ['instanceDraft'],
                                            },
                                            operation: 0,
                                            value: $state.cpu.value,
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount,
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value,
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps['updateInstanceDraft'] != null &&
                                      typeof $steps['updateInstanceDraft'] ===
                                        'object' &&
                                      typeof $steps['updateInstanceDraft']
                                        .then === 'function'
                                    ) {
                                      $steps['updateInstanceDraft'] =
                                        await $steps['updateInstanceDraft'];
                                    }
                                  }).apply(null, eventArgs);
                                }}
                                onOpenChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    'cpu',
                                    'isOpen',
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={'CPU '}
                                readOnly={false}
                                showLabel={false}
                                value={generateStateValueProp($state, [
                                  'cpu',
                                  'value',
                                ])}
                              />

                              <FormSelect2
                                data-plasmic-name={'memoire'}
                                data-plasmic-override={overrides.memoire}
                                className={classNames(
                                  '__wab_instance',
                                  sty.memoire,
                                )}
                                inputDisplayValue={(() => {
                                  try {
                                    return $state.instanceDraft.memory;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        'PlasmicUndefinedDataError'
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                isOpen={generateStateValueProp($state, [
                                  'memoire',
                                  'isOpen',
                                ])}
                                items={
                                  <React.Fragment>
                                    <NavigationMenuItem
                                      className={classNames(
                                        '__wab_instance',
                                        sty.navigationMenuItem__po29M,
                                      )}
                                      label={'4 Go'}
                                      value={'4'}
                                    />

                                    <NavigationMenuItem
                                      label={'8 Go'}
                                      value={'8'}
                                    />

                                    <NavigationMenuItem
                                      label={'16 Go'}
                                      value={'16'}
                                    />
                                  </React.Fragment>
                                }
                                label={'Label'}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    'memoire',
                                    'value',
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }

                                  (async (val) => {
                                    const $steps = {};

                                    $steps['updateInstanceDraft'] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ['instanceDraft'],
                                            },
                                            operation: 0,
                                            value: $state.memoire.value,
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount,
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value,
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps['updateInstanceDraft'] != null &&
                                      typeof $steps['updateInstanceDraft'] ===
                                        'object' &&
                                      typeof $steps['updateInstanceDraft']
                                        .then === 'function'
                                    ) {
                                      $steps['updateInstanceDraft'] =
                                        await $steps['updateInstanceDraft'];
                                    }
                                  }).apply(null, eventArgs);
                                }}
                                onOpenChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    'memoire',
                                    'isOpen',
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={'Memory'}
                                showLabel={false}
                                value={generateStateValueProp($state, [
                                  'memoire',
                                  'value',
                                ])}
                              />
                            </Stack__>
                          }
                          footer={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tHnNw,
                              )}
                            >
                              <FormButton
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___0RZa6,
                                    )}
                                  >
                                    {'Go'}
                                  </div>
                                }
                                onClick={async (event) => {
                                  const $steps = {};

                                  $steps['runActionOnConsoleProvider'] = true
                                    ? (() => {
                                        const actionArgs = {
                                          tplRef: 'consoleProvider',
                                          action: 'createInstance',
                                          args: [
                                            (() => {
                                              try {
                                                return $state.cpu.value;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    'PlasmicUndefinedDataError'
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $state.memoire.value;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    'PlasmicUndefinedDataError'
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $state.nom.value;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    'PlasmicUndefinedDataError'
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                          ],
                                        };
                                        return (({ tplRef, action, args }) => {
                                          return $refs?.[tplRef]?.[action]?.(
                                            ...(args ?? []),
                                          );
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps['runActionOnConsoleProvider'] !=
                                      null &&
                                    typeof $steps[
                                      'runActionOnConsoleProvider'
                                    ] === 'object' &&
                                    typeof $steps['runActionOnConsoleProvider']
                                      .then === 'function'
                                  ) {
                                    $steps['runActionOnConsoleProvider'] =
                                      await $steps[
                                        'runActionOnConsoleProvider'
                                      ];
                                  }

                                  $steps['updateModalIsOpen'] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ['modal', 'isOpen'],
                                          },
                                          operation: 0,
                                          value: false,
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount,
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value,
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps['updateModalIsOpen'] != null &&
                                    typeof $steps['updateModalIsOpen'] ===
                                      'object' &&
                                    typeof $steps['updateModalIsOpen'].then ===
                                      'function'
                                  ) {
                                    $steps['updateModalIsOpen'] =
                                      await $steps['updateModalIsOpen'];
                                  }
                                }}
                                type={'bordered'}
                              />
                            </div>
                          }
                          heading={
                            <h3
                              data-plasmic-name={'h3'}
                              data-plasmic-override={overrides.h3}
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3,
                              )}
                            >
                              {'Configurer votre instance'}
                            </h3>
                          }
                          isKeyboardDismissDisabled={false}
                          isOpen={generateStateValueProp($state, [
                            'modal',
                            'isOpen',
                          ])}
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              'modal',
                              'isOpen',
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showFooter={true}
                          showHeader={true}
                          trigger={
                            <FormButton
                              label={'Ajouter une instance'}
                              onClick={async (event) => {
                                const $steps = {};

                                $steps['runActionOnConsoleProvider'] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: 'consoleProvider',
                                        action: 'createInstance',
                                        args: [
                                          (() => {
                                            try {
                                              return $state.instanceDraft.cpu;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  'PlasmicUndefinedDataError'
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          (() => {
                                            try {
                                              return $state.instanceDraft
                                                .memory;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  'PlasmicUndefinedDataError'
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          (() => {
                                            try {
                                              return $state.instanceDraft.name;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  'PlasmicUndefinedDataError'
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                        ],
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? []),
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps['runActionOnConsoleProvider'] !=
                                    null &&
                                  typeof $steps[
                                    'runActionOnConsoleProvider'
                                  ] === 'object' &&
                                  typeof $steps['runActionOnConsoleProvider']
                                    .then === 'function'
                                ) {
                                  $steps['runActionOnConsoleProvider'] =
                                    await $steps['runActionOnConsoleProvider'];
                                }
                              }}
                            />
                          }
                        />
                      </Stack__>
                    </div>
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ConsoleProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'consoleProvider',
    'consoleBreadcrumb',
    'dessous',
    'navigationDrawer',
    'instances',
    'nameLabel',
    'dcLabel',
    'zeroTrustNetworkLabel',
    'organizationLabel',
    'projectLabel',
    'ipAddressLabel',
    'statusLabel',
    'cpuMaxLabel',
    'cpuUsageLabel',
    'memoryMaxLabel',
    'memoryUsageLabel',
    'diskMaxLabel',
    'diskUsageLabel',
    'createdAtLabel',
    'updatedAtLabel',
    'actionsLabel',
    'name',
    'datacenter',
    'zeroTrustNetwork',
    'organization',
    'project',
    'ipAddress',
    'status',
    'cpuMax',
    'cpuUsage',
    'memoryMax',
    'memoryUsage',
    'diskMax',
    'diskUsage',
    'createdAt',
    'updatedAt',
    'actions',
    'modal',
    'h3',
    'nom',
    'cpu',
    'memoire',
  ],
  consoleProvider: [
    'consoleProvider',
    'consoleBreadcrumb',
    'dessous',
    'navigationDrawer',
    'instances',
    'nameLabel',
    'dcLabel',
    'zeroTrustNetworkLabel',
    'organizationLabel',
    'projectLabel',
    'ipAddressLabel',
    'statusLabel',
    'cpuMaxLabel',
    'cpuUsageLabel',
    'memoryMaxLabel',
    'memoryUsageLabel',
    'diskMaxLabel',
    'diskUsageLabel',
    'createdAtLabel',
    'updatedAtLabel',
    'actionsLabel',
    'name',
    'datacenter',
    'zeroTrustNetwork',
    'organization',
    'project',
    'ipAddress',
    'status',
    'cpuMax',
    'cpuUsage',
    'memoryMax',
    'memoryUsage',
    'diskMax',
    'diskUsage',
    'createdAt',
    'updatedAt',
    'actions',
    'modal',
    'h3',
    'nom',
    'cpu',
    'memoire',
  ],
  consoleBreadcrumb: ['consoleBreadcrumb'],
  dessous: [
    'dessous',
    'navigationDrawer',
    'instances',
    'nameLabel',
    'dcLabel',
    'zeroTrustNetworkLabel',
    'organizationLabel',
    'projectLabel',
    'ipAddressLabel',
    'statusLabel',
    'cpuMaxLabel',
    'cpuUsageLabel',
    'memoryMaxLabel',
    'memoryUsageLabel',
    'diskMaxLabel',
    'diskUsageLabel',
    'createdAtLabel',
    'updatedAtLabel',
    'actionsLabel',
    'name',
    'datacenter',
    'zeroTrustNetwork',
    'organization',
    'project',
    'ipAddress',
    'status',
    'cpuMax',
    'cpuUsage',
    'memoryMax',
    'memoryUsage',
    'diskMax',
    'diskUsage',
    'createdAt',
    'updatedAt',
    'actions',
    'modal',
    'h3',
    'nom',
    'cpu',
    'memoire',
  ],
  navigationDrawer: ['navigationDrawer'],
  instances: [
    'instances',
    'nameLabel',
    'dcLabel',
    'zeroTrustNetworkLabel',
    'organizationLabel',
    'projectLabel',
    'ipAddressLabel',
    'statusLabel',
    'cpuMaxLabel',
    'cpuUsageLabel',
    'memoryMaxLabel',
    'memoryUsageLabel',
    'diskMaxLabel',
    'diskUsageLabel',
    'createdAtLabel',
    'updatedAtLabel',
    'actionsLabel',
    'name',
    'datacenter',
    'zeroTrustNetwork',
    'organization',
    'project',
    'ipAddress',
    'status',
    'cpuMax',
    'cpuUsage',
    'memoryMax',
    'memoryUsage',
    'diskMax',
    'diskUsage',
    'createdAt',
    'updatedAt',
    'actions',
    'modal',
    'h3',
    'nom',
    'cpu',
    'memoire',
  ],
  nameLabel: ['nameLabel'],
  dcLabel: ['dcLabel'],
  zeroTrustNetworkLabel: ['zeroTrustNetworkLabel'],
  organizationLabel: ['organizationLabel'],
  projectLabel: ['projectLabel'],
  ipAddressLabel: ['ipAddressLabel'],
  statusLabel: ['statusLabel'],
  cpuMaxLabel: ['cpuMaxLabel'],
  cpuUsageLabel: ['cpuUsageLabel'],
  memoryMaxLabel: ['memoryMaxLabel'],
  memoryUsageLabel: ['memoryUsageLabel'],
  diskMaxLabel: ['diskMaxLabel'],
  diskUsageLabel: ['diskUsageLabel'],
  createdAtLabel: ['createdAtLabel'],
  updatedAtLabel: ['updatedAtLabel'],
  actionsLabel: ['actionsLabel'],
  name: ['name'],
  datacenter: ['datacenter'],
  zeroTrustNetwork: ['zeroTrustNetwork'],
  organization: ['organization'],
  project: ['project'],
  ipAddress: ['ipAddress'],
  status: ['status'],
  cpuMax: ['cpuMax'],
  cpuUsage: ['cpuUsage'],
  memoryMax: ['memoryMax'],
  memoryUsage: ['memoryUsage'],
  diskMax: ['diskMax'],
  diskUsage: ['diskUsage'],
  createdAt: ['createdAt'],
  updatedAt: ['updatedAt'],
  actions: ['actions'],
  modal: ['modal', 'h3', 'nom', 'cpu', 'memoire'],
  h3: ['h3'],
  nom: ['nom'],
  cpu: ['cpu'],
  memoire: ['memoire'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  consoleProvider: typeof ConsoleProvider;
  consoleBreadcrumb: typeof ConsoleBreadcrumb;
  dessous: 'div';
  navigationDrawer: typeof NavigationDrawer;
  instances: 'div';
  nameLabel: 'div';
  dcLabel: 'div';
  zeroTrustNetworkLabel: 'div';
  organizationLabel: 'div';
  projectLabel: 'div';
  ipAddressLabel: 'div';
  statusLabel: 'div';
  cpuMaxLabel: 'div';
  cpuUsageLabel: 'div';
  memoryMaxLabel: 'div';
  memoryUsageLabel: 'div';
  diskMaxLabel: 'div';
  diskUsageLabel: 'div';
  createdAtLabel: 'div';
  updatedAtLabel: 'div';
  actionsLabel: 'div';
  name: 'div';
  datacenter: 'div';
  zeroTrustNetwork: 'div';
  organization: 'div';
  project: 'div';
  ipAddress: 'div';
  status: 'div';
  cpuMax: 'div';
  cpuUsage: 'div';
  memoryMax: 'div';
  memoryUsage: 'div';
  diskMax: 'div';
  diskUsage: 'div';
  createdAt: 'div';
  updatedAt: 'div';
  actions: 'div';
  modal: typeof Modal;
  h3: 'h3';
  nom: typeof FormTextInput;
  cpu: typeof FormSelect2;
  memoire: typeof FormSelect2;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstances__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstances__VariantsArgs;
    args?: PlasmicInstances__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstances__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstances__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstances__ArgProps,
          internalVariantPropNames: PlasmicInstances__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicInstances__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicInstances';
  } else {
    func.displayName = `PlasmicInstances.${nodeName}`;
  }
  return func;
}

export const PlasmicInstances = Object.assign(
  // Top-level PlasmicInstances renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    consoleProvider: makeNodeComponent('consoleProvider'),
    consoleBreadcrumb: makeNodeComponent('consoleBreadcrumb'),
    dessous: makeNodeComponent('dessous'),
    navigationDrawer: makeNodeComponent('navigationDrawer'),
    instances: makeNodeComponent('instances'),
    nameLabel: makeNodeComponent('nameLabel'),
    dcLabel: makeNodeComponent('dcLabel'),
    zeroTrustNetworkLabel: makeNodeComponent('zeroTrustNetworkLabel'),
    organizationLabel: makeNodeComponent('organizationLabel'),
    projectLabel: makeNodeComponent('projectLabel'),
    ipAddressLabel: makeNodeComponent('ipAddressLabel'),
    statusLabel: makeNodeComponent('statusLabel'),
    cpuMaxLabel: makeNodeComponent('cpuMaxLabel'),
    cpuUsageLabel: makeNodeComponent('cpuUsageLabel'),
    memoryMaxLabel: makeNodeComponent('memoryMaxLabel'),
    memoryUsageLabel: makeNodeComponent('memoryUsageLabel'),
    diskMaxLabel: makeNodeComponent('diskMaxLabel'),
    diskUsageLabel: makeNodeComponent('diskUsageLabel'),
    createdAtLabel: makeNodeComponent('createdAtLabel'),
    updatedAtLabel: makeNodeComponent('updatedAtLabel'),
    actionsLabel: makeNodeComponent('actionsLabel'),
    _name: makeNodeComponent('name'),
    datacenter: makeNodeComponent('datacenter'),
    zeroTrustNetwork: makeNodeComponent('zeroTrustNetwork'),
    organization: makeNodeComponent('organization'),
    project: makeNodeComponent('project'),
    ipAddress: makeNodeComponent('ipAddress'),
    status: makeNodeComponent('status'),
    cpuMax: makeNodeComponent('cpuMax'),
    cpuUsage: makeNodeComponent('cpuUsage'),
    memoryMax: makeNodeComponent('memoryMax'),
    memoryUsage: makeNodeComponent('memoryUsage'),
    diskMax: makeNodeComponent('diskMax'),
    diskUsage: makeNodeComponent('diskUsage'),
    createdAt: makeNodeComponent('createdAt'),
    updatedAt: makeNodeComponent('updatedAt'),
    actions: makeNodeComponent('actions'),
    modal: makeNodeComponent('modal'),
    h3: makeNodeComponent('h3'),
    nom: makeNodeComponent('nom'),
    cpu: makeNodeComponent('cpu'),
    memoire: makeNodeComponent('memoire'),

    // Metadata about props expected for PlasmicInstances
    internalVariantProps: PlasmicInstances__VariantProps,
    internalArgProps: PlasmicInstances__ArgProps,

    // Page metadata
    pageMetadata: {
      title: 'Instances',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  },
);

export default PlasmicInstances;
/* prettier-ignore-end */
