/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: orxAMMfZ74Z0

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ConsoleProvider } from "../../../../providers/ConsoleProvider"; // plasmic-import: vWN9dmdYefpY/codeComponent
import ConsoleLayout from "../../ConsoleLayout"; // plasmic-import: p-wD1wOjqe01/component
import Modal from "../../Modal"; // plasmic-import: tYFejTQb0c1A/component
import Button from "../../Button"; // plasmic-import: BPkDJbnqSOZ0/component
import TextInput from "../../TextInput"; // plasmic-import: hFREyvMXF-HZ/component
import Combobox from "../../Combobox"; // plasmic-import: 1VSU1092sLjX/component
import MenuItem from "../../MenuItem"; // plasmic-import: 7igOedWgPhE0/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eEvMBXdv1ZEe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from "./PlasmicInstances.module.css"; // plasmic-import: orxAMMfZ74Z0/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: INMXktOfIWiD/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicInstances__VariantMembers = {};
export type PlasmicInstances__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstances__VariantsArgs;
export const PlasmicInstances__VariantProps = new Array<VariantPropType>();

export type PlasmicInstances__ArgsType = {};
type ArgPropType = keyof PlasmicInstances__ArgsType;
export const PlasmicInstances__ArgProps = new Array<ArgPropType>();

export type PlasmicInstances__OverridesType = {
  root?: Flex__<"div">;
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  consoleLayout?: Flex__<typeof ConsoleLayout>;
  modal?: Flex__<typeof Modal>;
  h3?: Flex__<"h3">;
  nom?: Flex__<typeof TextInput>;
  cpu?: Flex__<typeof Combobox>;
  memoire?: Flex__<typeof Combobox>;
};

export interface DefaultInstancesProps {
  className?: string;
}

const $$ = {};

function PlasmicInstances__RenderFunc(props: {
  variants: PlasmicInstances__VariantsArgs;
  args: PlasmicInstances__ArgsType;
  overrides: PlasmicInstances__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "nom.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.instanceDraft.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "instanceDraft",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          name: "",
          cpu: "",
          memory: ""
        })
      },
      {
        path: "cpu.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cpu.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.instanceDraft.cpu;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "item1";
              }
              throw e;
            }
          })()
      },
      {
        path: "memoire.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "memoire.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.instanceDraft.memory;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "item1";
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <ConsoleProvider
            data-plasmic-name={"consoleProvider"}
            data-plasmic-override={overrides.consoleProvider}
            className={classNames("__wab_instance", sty.consoleProvider)}
            ref={ref => {
              $refs["consoleProvider"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <ConsoleLayout
                  data-plasmic-name={"consoleLayout"}
                  data-plasmic-override={overrides.consoleLayout}
                  className={classNames("__wab_instance", sty.consoleLayout)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___75YEu)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fHjmA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jOUi
                        )}
                      >
                        {"Nom"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fS6D
                        )}
                      >
                        {"Status"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vcQG
                        )}
                      >
                        {"% CPU utilis\u00e9"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6K4Qr
                        )}
                      >
                        {"Max m\u00e9moire"}
                      </div>
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx["France Nuage"].instances;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hsVu2
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__esS5T
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n94CP
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.status;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rhlXq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.cpuUsagePercent;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nZdJy
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.maxMemoryBytes;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      );
                    })}
                    <Modal
                      data-plasmic-name={"modal"}
                      data-plasmic-override={overrides.modal}
                      className={classNames("__wab_instance", sty.modal)}
                      closeOnBackdropClick={true}
                      content={
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xF0OW
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__paX97
                            )}
                          >
                            <TextInput
                              data-plasmic-name={"nom"}
                              data-plasmic-override={overrides.nom}
                              ariaLabel={``}
                              autoComplete={[]}
                              className={classNames("__wab_instance", sty.nom)}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "nom",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateInstanceDraft"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["instanceDraft"]
                                          },
                                          operation: 0,
                                          value: $state.nom.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateInstanceDraft"] != null &&
                                    typeof $steps["updateInstanceDraft"] ===
                                      "object" &&
                                    typeof $steps["updateInstanceDraft"]
                                      .then === "function"
                                  ) {
                                    $steps["updateInstanceDraft"] =
                                      await $steps["updateInstanceDraft"];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"Nom"}
                              value={generateStateValueProp($state, [
                                "nom",
                                "value"
                              ])}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0NfFd
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "var(--token-9DYAKh_l4jQS)" }}
                                >
                                  {
                                    "Le nom de votre instance ne peut contenir que des caract\u00e8res alphanum\u00e9riques, des points et des tirets."
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                          </Stack__>
                          <Combobox
                            data-plasmic-name={"cpu"}
                            data-plasmic-override={overrides.cpu}
                            className={classNames("__wab_instance", sty.cpu)}
                            disabled={false}
                            inputDisplayValue={(() => {
                              try {
                                return $state.instanceDraft.cpu;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            isOpen={generateStateValueProp($state, [
                              "cpu",
                              "isOpen"
                            ])}
                            items={
                              <React.Fragment>
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem___4Zrrn
                                  )}
                                  label={"2"}
                                  value={"2"}
                                />

                                <MenuItem label={"4"} value={"4"} />

                                <MenuItem label={"8"} value={"8"} />
                              </React.Fragment>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "cpu",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }

                              (async val => {
                                const $steps = {};

                                $steps["updateInstanceDraft"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["instanceDraft"]
                                        },
                                        operation: 0,
                                        value: $state.cpu.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInstanceDraft"] != null &&
                                  typeof $steps["updateInstanceDraft"] ===
                                    "object" &&
                                  typeof $steps["updateInstanceDraft"].then ===
                                    "function"
                                ) {
                                  $steps["updateInstanceDraft"] = await $steps[
                                    "updateInstanceDraft"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "cpu",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"CPU "}
                            readOnly={false}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "cpu",
                              "value"
                            ])}
                          />

                          <Combobox
                            data-plasmic-name={"memoire"}
                            data-plasmic-override={overrides.memoire}
                            className={classNames(
                              "__wab_instance",
                              sty.memoire
                            )}
                            inputDisplayValue={(() => {
                              try {
                                return $state.instanceDraft.memory;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            isOpen={generateStateValueProp($state, [
                              "memoire",
                              "isOpen"
                            ])}
                            items={
                              <React.Fragment>
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__e8XK7
                                  )}
                                  label={"4 Go"}
                                  value={"4"}
                                />

                                <MenuItem label={"8 Go"} value={"8"} />

                                <MenuItem label={"16 Go"} value={"16"} />
                              </React.Fragment>
                            }
                            label={"Label"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "memoire",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }

                              (async val => {
                                const $steps = {};

                                $steps["updateInstanceDraft"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["instanceDraft"]
                                        },
                                        operation: 0,
                                        value: $state.memoire.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInstanceDraft"] != null &&
                                  typeof $steps["updateInstanceDraft"] ===
                                    "object" &&
                                  typeof $steps["updateInstanceDraft"].then ===
                                    "function"
                                ) {
                                  $steps["updateInstanceDraft"] = await $steps[
                                    "updateInstanceDraft"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "memoire",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Memory"}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "memoire",
                              "value"
                            ])}
                          />
                        </Stack__>
                      }
                      footer={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qsCuz
                          )}
                        >
                          <Button
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zymnf
                                )}
                              >
                                {"Go"}
                              </div>
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["runActionOnConsoleProvider"] = true
                                ? (() => {
                                    const actionArgs = {
                                      tplRef: "consoleProvider",
                                      action: "createInstance",
                                      args: [
                                        (() => {
                                          try {
                                            return $state.cpu.value;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return $state.memoire.value;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return $state.nom.value;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? [])
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runActionOnConsoleProvider"] != null &&
                                typeof $steps["runActionOnConsoleProvider"] ===
                                  "object" &&
                                typeof $steps["runActionOnConsoleProvider"]
                                  .then === "function"
                              ) {
                                $steps["runActionOnConsoleProvider"] =
                                  await $steps["runActionOnConsoleProvider"];
                              }

                              $steps["updateModalIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal", "isOpen"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalIsOpen"] != null &&
                                typeof $steps["updateModalIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateModalIsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModalIsOpen"] = await $steps[
                                  "updateModalIsOpen"
                                ];
                              }
                            }}
                            type={"bordered"}
                          />
                        </div>
                      }
                      heading={
                        <h3
                          data-plasmic-name={"h3"}
                          data-plasmic-override={overrides.h3}
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3
                          )}
                        >
                          {"Configurer votre instance"}
                        </h3>
                      }
                      isKeyboardDismissDisabled={false}
                      isOpen={generateStateValueProp($state, [
                        "modal",
                        "isOpen"
                      ])}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "modal",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showFooter={true}
                      showHeader={true}
                      trigger={
                        <Button
                          label={"Ajouter une instance"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnConsoleProvider"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "consoleProvider",
                                    action: "createInstance",
                                    args: [
                                      (() => {
                                        try {
                                          return $state.instanceDraft.cpu;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return $state.instanceDraft.memory;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return $state.instanceDraft.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnConsoleProvider"] != null &&
                              typeof $steps["runActionOnConsoleProvider"] ===
                                "object" &&
                              typeof $steps["runActionOnConsoleProvider"]
                                .then === "function"
                            ) {
                              $steps["runActionOnConsoleProvider"] =
                                await $steps["runActionOnConsoleProvider"];
                            }
                          }}
                        />
                      }
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__foejO)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ikiPb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zPbUy
                        )}
                      >
                        {"Choisissez un service"}
                      </div>
                    </div>
                  </Stack__>
                </ConsoleLayout>
              )}
            </DataCtxReader__>
          </ConsoleProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "consoleProvider",
    "consoleLayout",
    "modal",
    "h3",
    "nom",
    "cpu",
    "memoire"
  ],
  consoleProvider: [
    "consoleProvider",
    "consoleLayout",
    "modal",
    "h3",
    "nom",
    "cpu",
    "memoire"
  ],
  consoleLayout: ["consoleLayout", "modal", "h3", "nom", "cpu", "memoire"],
  modal: ["modal", "h3", "nom", "cpu", "memoire"],
  h3: ["h3"],
  nom: ["nom"],
  cpu: ["cpu"],
  memoire: ["memoire"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  consoleProvider: typeof ConsoleProvider;
  consoleLayout: typeof ConsoleLayout;
  modal: typeof Modal;
  h3: "h3";
  nom: typeof TextInput;
  cpu: typeof Combobox;
  memoire: typeof Combobox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstances__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstances__VariantsArgs;
    args?: PlasmicInstances__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstances__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstances__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstances__ArgProps,
          internalVariantPropNames: PlasmicInstances__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstances__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstances";
  } else {
    func.displayName = `PlasmicInstances.${nodeName}`;
  }
  return func;
}

export const PlasmicInstances = Object.assign(
  // Top-level PlasmicInstances renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    consoleProvider: makeNodeComponent("consoleProvider"),
    consoleLayout: makeNodeComponent("consoleLayout"),
    modal: makeNodeComponent("modal"),
    h3: makeNodeComponent("h3"),
    nom: makeNodeComponent("nom"),
    cpu: makeNodeComponent("cpu"),
    memoire: makeNodeComponent("memoire"),

    // Metadata about props expected for PlasmicInstances
    internalVariantProps: PlasmicInstances__VariantProps,
    internalArgProps: PlasmicInstances__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstances;
/* prettier-ignore-end */
