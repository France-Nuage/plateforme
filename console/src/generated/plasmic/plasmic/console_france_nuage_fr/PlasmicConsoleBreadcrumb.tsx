/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: PEgOxZRQTA56
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
// plasmic-import: vWN9dmdYefpY/codeComponent
import { AntdBreadcrumb } from '@plasmicpkgs/antd5/skinny/registerBreadcrumb';
import { AntdBreadcrumbItem } from '@plasmicpkgs/antd5/skinny/registerBreadcrumb';
import * as React from 'react';

import { ConsoleProvider } from '../../../../providers/ConsoleProvider';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicConsoleBreadcrumb.module.css';
import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: PEgOxZRQTA56/css

import ChevronDownIcon from './icons/PlasmicIcon__ChevronDown';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicConsoleBreadcrumb__VariantMembers = {};
export type PlasmicConsoleBreadcrumb__VariantsArgs = {};
type VariantPropType = keyof PlasmicConsoleBreadcrumb__VariantsArgs;
export const PlasmicConsoleBreadcrumb__VariantProps =
  new Array<VariantPropType>();

export type PlasmicConsoleBreadcrumb__ArgsType = {};
type ArgPropType = keyof PlasmicConsoleBreadcrumb__ArgsType;
export const PlasmicConsoleBreadcrumb__ArgProps = new Array<ArgPropType>();

export type PlasmicConsoleBreadcrumb__OverridesType = {
  root?: Flex__<'div'>;
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  img?: Flex__<typeof PlasmicImg__>;
  section?: Flex__<'section'>;
  breadcrumb?: Flex__<typeof AntdBreadcrumb>;
  svg?: Flex__<'svg'>;
};

export interface DefaultConsoleBreadcrumbProps {
  className?: string;
}

const $$ = {};

function PlasmicConsoleBreadcrumb__RenderFunc(props: {
  variants: PlasmicConsoleBreadcrumb__VariantsArgs;
  args: PlasmicConsoleBreadcrumb__ArgsType;
  overrides: PlasmicConsoleBreadcrumb__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
      )}
    >
      <ConsoleProvider
        data-plasmic-name={'consoleProvider'}
        data-plasmic-override={overrides.consoleProvider}
        className={classNames('__wab_instance', sty.consoleProvider)}
        ref={(ref) => {
          $refs['consoleProvider'] = ref;
        }}
      >
        <DataCtxReader__>
          {($ctx) => (
            <Stack__
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cJl75)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__cRNeO)}>
                <PlasmicImg__
                  data-plasmic-name={'img'}
                  data-plasmic-override={overrides.img}
                  alt={''}
                  className={classNames(sty.img)}
                  displayHeight={'40px'}
                  displayMaxHeight={'none'}
                  displayMaxWidth={'none'}
                  displayMinHeight={'0'}
                  displayMinWidth={'0'}
                  displayWidth={'40px'}
                  src={{
                    src: '/plasmic/console_france_nuage_fr/images/cloudModelSvg.svg',
                    fullWidth: 28,
                    fullHeight: 16,
                    aspectRatio: 1.75,
                  }}
                />
              </div>
              <section
                data-plasmic-name={'section'}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              />

              <AntdBreadcrumb
                data-plasmic-name={'breadcrumb'}
                data-plasmic-override={overrides.breadcrumb}
                className={classNames('__wab_instance', sty.breadcrumb)}
                itemsRaw={
                  <React.Fragment>
                    <AntdBreadcrumbItem
                      className={classNames(
                        '__wab_instance',
                        sty.breadcrumbItem__cMjl4,
                      )}
                    >
                      <Stack__
                        as={'div'}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__huRb,
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0Gnvt,
                          )}
                          onClick={async (event) => {
                            const $steps = {};

                            $steps['runElementAction'] = true
                              ? (() => {
                                  const actionArgs = {};
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? []),
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps['runElementAction'] != null &&
                              typeof $steps['runElementAction'] === 'object' &&
                              typeof $steps['runElementAction'].then ===
                                'function'
                            ) {
                              $steps['runElementAction'] =
                                await $steps['runElementAction'];
                            }
                          }}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx['France Nuage'].application
                                  .activeOrganization.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === 'PlasmicUndefinedDataError'
                                ) {
                                  return "Nom de l'organisation";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1AwU0,
                          )}
                        >
                          <ChevronDownIcon
                            data-plasmic-name={'svg'}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={'img'}
                          />
                        </div>
                      </Stack__>
                    </AntdBreadcrumbItem>
                    <AntdBreadcrumbItem
                      className={classNames(
                        '__wab_instance',
                        sty.breadcrumbItem__jydZx,
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gL1OR,
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx['France Nuage'].application
                                .activeProject.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === 'PlasmicUndefinedDataError'
                              ) {
                                return 'Nom du projet';
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdBreadcrumbItem>
                  </React.Fragment>
                }
                separator={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bamdb,
                    )}
                  >
                    {'/'}
                  </div>
                }
              />
            </Stack__>
          )}
        </DataCtxReader__>
      </ConsoleProvider>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'consoleProvider', 'img', 'section', 'breadcrumb', 'svg'],
  consoleProvider: ['consoleProvider', 'img', 'section', 'breadcrumb', 'svg'],
  img: ['img'],
  section: ['section'],
  breadcrumb: ['breadcrumb', 'svg'],
  svg: ['svg'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  consoleProvider: typeof ConsoleProvider;
  img: typeof PlasmicImg__;
  section: 'section';
  breadcrumb: typeof AntdBreadcrumb;
  svg: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConsoleBreadcrumb__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConsoleBreadcrumb__VariantsArgs;
    args?: PlasmicConsoleBreadcrumb__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConsoleBreadcrumb__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConsoleBreadcrumb__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConsoleBreadcrumb__ArgProps,
          internalVariantPropNames: PlasmicConsoleBreadcrumb__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicConsoleBreadcrumb__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicConsoleBreadcrumb';
  } else {
    func.displayName = `PlasmicConsoleBreadcrumb.${nodeName}`;
  }
  return func;
}

export const PlasmicConsoleBreadcrumb = Object.assign(
  // Top-level PlasmicConsoleBreadcrumb renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    consoleProvider: makeNodeComponent('consoleProvider'),
    img: makeNodeComponent('img'),
    section: makeNodeComponent('section'),
    breadcrumb: makeNodeComponent('breadcrumb'),
    svg: makeNodeComponent('svg'),

    // Metadata about props expected for PlasmicConsoleBreadcrumb
    internalVariantProps: PlasmicConsoleBreadcrumb__VariantProps,
    internalArgProps: PlasmicConsoleBreadcrumb__ArgProps,
  },
);

export default PlasmicConsoleBreadcrumb;
/* prettier-ignore-end */
