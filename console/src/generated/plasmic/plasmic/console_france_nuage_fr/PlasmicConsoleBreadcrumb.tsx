/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: PEgOxZRQTA56
import {
  get as $stateGet,
  set as $stateSet,
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from '@plasmicapp/react-web';
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from '@plasmicapp/react-web/lib/host';
// plasmic-import: eEvMBXdv1ZEe/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
// plasmic-import: vWN9dmdYefpY/codeComponent
import { AntdBreadcrumb } from '@plasmicpkgs/antd5/skinny/registerBreadcrumb';
import { AntdBreadcrumbItem } from '@plasmicpkgs/antd5/skinny/registerBreadcrumb';
import * as React from 'react';

import { ConsoleProvider } from '../../../../providers/ConsoleProvider';
import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic.module.css';
// plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from './PlasmicConsoleBreadcrumb.module.css';
import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from './PlasmicGlobalVariant__Screen';
// plasmic-import: PEgOxZRQTA56/css

import ChevronDownIcon from './icons/PlasmicIcon__ChevronDown';
// plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic.module.css';

// plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicConsoleBreadcrumb__VariantMembers = {};
export type PlasmicConsoleBreadcrumb__VariantsArgs = {};
type VariantPropType = keyof PlasmicConsoleBreadcrumb__VariantsArgs;
export const PlasmicConsoleBreadcrumb__VariantProps =
  new Array<VariantPropType>();

export type PlasmicConsoleBreadcrumb__ArgsType = {};
type ArgPropType = keyof PlasmicConsoleBreadcrumb__ArgsType;
export const PlasmicConsoleBreadcrumb__ArgProps = new Array<ArgPropType>();

export type PlasmicConsoleBreadcrumb__OverridesType = {
  root?: Flex__<'div'>;
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  img?: Flex__<typeof PlasmicImg__>;
  section?: Flex__<'section'>;
  breadcrumb?: Flex__<typeof AntdBreadcrumb>;
};

export interface DefaultConsoleBreadcrumbProps {
  className?: string;
}

const $$ = {};

function PlasmicConsoleBreadcrumb__RenderFunc(props: {
  variants: PlasmicConsoleBreadcrumb__VariantsArgs;
  args: PlasmicConsoleBreadcrumb__ArgsType;
  overrides: PlasmicConsoleBreadcrumb__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'isVisibleOrg',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },
      {
        path: 'isVisiblePro',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe(),
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
      )}
    >
      <ConsoleProvider
        data-plasmic-name={'consoleProvider'}
        data-plasmic-override={overrides.consoleProvider}
        className={classNames('__wab_instance', sty.consoleProvider)}
        ref={(ref) => {
          $refs['consoleProvider'] = ref;
        }}
      >
        <DataCtxReader__>
          {($ctx) => (
            <React.Fragment>
              <Stack__
                as={'div'}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cJl75)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__cRNeO)}>
                  <PlasmicImg__
                    data-plasmic-name={'img'}
                    data-plasmic-override={overrides.img}
                    alt={''}
                    className={classNames(sty.img)}
                    displayHeight={'40px'}
                    displayMaxHeight={'none'}
                    displayMaxWidth={'none'}
                    displayMinHeight={'0'}
                    displayMinWidth={'0'}
                    displayWidth={'40px'}
                    src={{
                      src: '/plasmic/console_france_nuage_fr/images/cloudModelSvg.svg',
                      fullWidth: 28,
                      fullHeight: 16,
                      aspectRatio: 1.75,
                    }}
                  />
                </div>
                <section
                  data-plasmic-name={'section'}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                />

                <AntdBreadcrumb
                  data-plasmic-name={'breadcrumb'}
                  data-plasmic-override={overrides.breadcrumb}
                  className={classNames('__wab_instance', sty.breadcrumb)}
                  itemsRaw={
                    <React.Fragment>
                      <AntdBreadcrumbItem
                        className={classNames(
                          '__wab_instance',
                          sty.breadcrumbItem__cMjl4,
                        )}
                      >
                        <Stack__
                          as={'div'}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__huRb,
                          )}
                          onClick={async (event) => {
                            const $steps = {};

                            $steps['updateIsVisibleOrg'] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ['isVisibleOrg'],
                                    },
                                    operation: 4,
                                    value: true,
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount,
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath,
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps['updateIsVisibleOrg'] != null &&
                              typeof $steps['updateIsVisibleOrg'] ===
                                'object' &&
                              typeof $steps['updateIsVisibleOrg'].then ===
                                'function'
                            ) {
                              $steps['updateIsVisibleOrg'] =
                                await $steps['updateIsVisibleOrg'];
                            }

                            $steps['updateIsVisibleOrg2'] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ['isVisiblePro'],
                                    },
                                    operation: 0,
                                    value: false,
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount,
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps['updateIsVisibleOrg2'] != null &&
                              typeof $steps['updateIsVisibleOrg2'] ===
                                'object' &&
                              typeof $steps['updateIsVisibleOrg2'].then ===
                                'function'
                            ) {
                              $steps['updateIsVisibleOrg2'] =
                                await $steps['updateIsVisibleOrg2'];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Gnvt,
                            )}
                            onClick={async (event) => {
                              const $steps = {};

                              $steps['runElementAction'] = true
                                ? (() => {
                                    const actionArgs = {};
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? []),
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps['runElementAction'] != null &&
                                typeof $steps['runElementAction'] ===
                                  'object' &&
                                typeof $steps['runElementAction'].then ===
                                  'function'
                              ) {
                                $steps['runElementAction'] =
                                  await $steps['runElementAction'];
                              }
                            }}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx['France Nuage'].application
                                    .activeOrganization.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      'PlasmicUndefinedDataError'
                                  ) {
                                    return "Nom de l'organisation";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1AwU0,
                            )}
                          >
                            {(() => {
                              try {
                                return $state.isVisibleOrg === false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === 'PlasmicUndefinedDataError'
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__m84M5,
                                )}
                                role={'img'}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.isVisibleOrg;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === 'PlasmicUndefinedDataError'
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__j59Gz,
                                )}
                                role={'img'}
                              />
                            ) : null}
                          </div>
                        </Stack__>
                      </AntdBreadcrumbItem>
                      <AntdBreadcrumbItem
                        className={classNames(
                          '__wab_instance',
                          sty.breadcrumbItem__jydZx,
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___167NA,
                          )}
                          onClick={async (event) => {
                            const $steps = {};

                            $steps['updateIsVisiblePro'] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ['isVisiblePro'],
                                    },
                                    operation: 4,
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount,
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath,
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps['updateIsVisiblePro'] != null &&
                              typeof $steps['updateIsVisiblePro'] ===
                                'object' &&
                              typeof $steps['updateIsVisiblePro'].then ===
                                'function'
                            ) {
                              $steps['updateIsVisiblePro'] =
                                await $steps['updateIsVisiblePro'];
                            }

                            $steps['updateIsVisiblePro2'] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ['isVisibleOrg'],
                                    },
                                    operation: 0,
                                    value: false,
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount,
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps['updateIsVisiblePro2'] != null &&
                              typeof $steps['updateIsVisiblePro2'] ===
                                'object' &&
                              typeof $steps['updateIsVisiblePro2'].then ===
                                'function'
                            ) {
                              $steps['updateIsVisiblePro2'] =
                                await $steps['updateIsVisiblePro2'];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gL1OR,
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx['France Nuage'].application
                                    .activeProject.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      'PlasmicUndefinedDataError'
                                  ) {
                                    return 'Nom du projet';
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mIBn4,
                            )}
                          >
                            {(() => {
                              try {
                                return $state.isVisiblePro === false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === 'PlasmicUndefinedDataError'
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__u6Spq,
                                )}
                                role={'img'}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.isVisiblePro;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === 'PlasmicUndefinedDataError'
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rdb8A,
                                )}
                                role={'img'}
                              />
                            ) : null}
                          </div>
                        </div>
                      </AntdBreadcrumbItem>
                    </React.Fragment>
                  }
                  separator={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bamdb,
                      )}
                    >
                      {'/'}
                    </div>
                  }
                />
              </Stack__>
              {(() => {
                try {
                  return $state.isVisibleOrg;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === 'PlasmicUndefinedDataError'
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={'div'}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5Lmof)}
                >
                  {((_par) =>
                    !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                    (() => {
                      try {
                        return $ctx['France Nuage'].organizations;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === 'PlasmicUndefinedDataError'
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })(),
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__pVbaB,
                        )}
                        key={currentIndex}
                        platform={'react'}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === 'PlasmicUndefinedDataError'
                              ) {
                                return '';
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </PlasmicLink__>
                    );
                  })}
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.isVisiblePro;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === 'PlasmicUndefinedDataError'
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={'div'}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mQmx)}
                >
                  {((_par) =>
                    !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                    (() => {
                      try {
                        return $ctx['France Nuage'].projects;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === 'PlasmicUndefinedDataError'
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })(),
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__kvs4L,
                        )}
                        key={currentIndex}
                        platform={'react'}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === 'PlasmicUndefinedDataError'
                              ) {
                                return '';
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </PlasmicLink__>
                    );
                  })}
                </Stack__>
              ) : null}
            </React.Fragment>
          )}
        </DataCtxReader__>
      </ConsoleProvider>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'consoleProvider', 'img', 'section', 'breadcrumb'],
  consoleProvider: ['consoleProvider', 'img', 'section', 'breadcrumb'],
  img: ['img'],
  section: ['section'],
  breadcrumb: ['breadcrumb'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  consoleProvider: typeof ConsoleProvider;
  img: typeof PlasmicImg__;
  section: 'section';
  breadcrumb: typeof AntdBreadcrumb;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConsoleBreadcrumb__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConsoleBreadcrumb__VariantsArgs;
    args?: PlasmicConsoleBreadcrumb__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConsoleBreadcrumb__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConsoleBreadcrumb__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConsoleBreadcrumb__ArgProps,
          internalVariantPropNames: PlasmicConsoleBreadcrumb__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicConsoleBreadcrumb__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicConsoleBreadcrumb';
  } else {
    func.displayName = `PlasmicConsoleBreadcrumb.${nodeName}`;
  }
  return func;
}

export const PlasmicConsoleBreadcrumb = Object.assign(
  // Top-level PlasmicConsoleBreadcrumb renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    consoleProvider: makeNodeComponent('consoleProvider'),
    img: makeNodeComponent('img'),
    section: makeNodeComponent('section'),
    breadcrumb: makeNodeComponent('breadcrumb'),

    // Metadata about props expected for PlasmicConsoleBreadcrumb
    internalVariantProps: PlasmicConsoleBreadcrumb__VariantProps,
    internalArgProps: PlasmicConsoleBreadcrumb__ArgProps,
  },
);

export default PlasmicConsoleBreadcrumb;
/* prettier-ignore-end */
