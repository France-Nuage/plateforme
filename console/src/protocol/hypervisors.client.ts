// @generated by protobuf-ts 2.9.6 with parameter optimize_code_size
// @generated from protobuf file "hypervisors.proto" (package "francenuage.fr.api.controlplane.v1.hypervisors", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Hypervisors } from "./hypervisors";
import type { RegisterHypervisorResponse } from "./hypervisors";
import type { RegisterHypervisorRequest } from "./hypervisors";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListHypervisorsResponse } from "./hypervisors";
import type { ListHypervisorsRequest } from "./hypervisors";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Hypervisors service provides operations to manage hypervisors.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.hypervisors.Hypervisors
 */
export interface IHypervisorsClient {
    /**
     * @generated from protobuf rpc: ListHypervisors(francenuage.fr.api.controlplane.v1.hypervisors.ListHypervisorsRequest) returns (francenuage.fr.api.controlplane.v1.hypervisors.ListHypervisorsResponse);
     */
    listHypervisors(input: ListHypervisorsRequest, options?: RpcOptions): UnaryCall<ListHypervisorsRequest, ListHypervisorsResponse>;
    /**
     * @generated from protobuf rpc: RegisterHypervisor(francenuage.fr.api.controlplane.v1.hypervisors.RegisterHypervisorRequest) returns (francenuage.fr.api.controlplane.v1.hypervisors.RegisterHypervisorResponse);
     */
    registerHypervisor(input: RegisterHypervisorRequest, options?: RpcOptions): UnaryCall<RegisterHypervisorRequest, RegisterHypervisorResponse>;
}
/**
 * Hypervisors service provides operations to manage hypervisors.
 *
 * @generated from protobuf service francenuage.fr.api.controlplane.v1.hypervisors.Hypervisors
 */
export class HypervisorsClient implements IHypervisorsClient, ServiceInfo {
    typeName = Hypervisors.typeName;
    methods = Hypervisors.methods;
    options = Hypervisors.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListHypervisors(francenuage.fr.api.controlplane.v1.hypervisors.ListHypervisorsRequest) returns (francenuage.fr.api.controlplane.v1.hypervisors.ListHypervisorsResponse);
     */
    listHypervisors(input: ListHypervisorsRequest, options?: RpcOptions): UnaryCall<ListHypervisorsRequest, ListHypervisorsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListHypervisorsRequest, ListHypervisorsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterHypervisor(francenuage.fr.api.controlplane.v1.hypervisors.RegisterHypervisorRequest) returns (francenuage.fr.api.controlplane.v1.hypervisors.RegisterHypervisorResponse);
     */
    registerHypervisor(input: RegisterHypervisorRequest, options?: RpcOptions): UnaryCall<RegisterHypervisorRequest, RegisterHypervisorResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterHypervisorRequest, RegisterHypervisorResponse>("unary", this._transport, method, opt, input);
    }
}
