/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: H_HoE5avRiQs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ConsoleProvider } from "../../../providers/ConsoleProvider"; // plasmic-import: vWN9dmdYefpY/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: hFREyvMXF-HZ/component
import Radio from "../../Radio"; // plasmic-import: TeN_RMngOPqj/component
import Button from "../../Button"; // plasmic-import: BPkDJbnqSOZ0/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eEvMBXdv1ZEe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../react_aria/plasmic.module.css"; // plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: H_HoE5avRiQs/css

import CircleIcon from "../console/icons/PlasmicIcon__Circle"; // plasmic-import: INMXktOfIWiD/icon
import ChevronDownIcon from "../console/icons/PlasmicIcon__ChevronDown"; // plasmic-import: BMAZvJUkowiF/icon
import GitLabLogoSvgIcon from "./icons/PlasmicIcon__GitLabLogoSvg"; // plasmic-import: XegYPrYvUV2e/icon

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: Flex__<"div">;
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  frNLoginDesktopNunitoSans?: Flex__<"div">;
  left?: Flex__<"div">;
  logoName?: Flex__<"div">;
  form?: Flex__<"div">;
  heading?: Flex__<"div">;
  text?: Flex__<"div">;
  copy?: Flex__<"h1">;
  text2?: Flex__<"div">;
  copy2?: Flex__<"div">;
  formAndButton?: Flex__<"div">;
  form2?: Flex__<"div">;
  textInputDefaultTrue?: Flex__<"div">;
  text4?: Flex__<"div">;
  label?: Flex__<"div">;
  label2?: Flex__<"dd">;
  hint?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  password?: Flex__<"div">;
  textInput?: Flex__<"div">;
  text5?: Flex__<"div">;
  label3?: Flex__<"div">;
  label4?: Flex__<"dd">;
  hint2?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  textLink?: Flex__<"div">;
  label5?: Flex__<"div">;
  terms?: Flex__<"div">;
  radio?: Flex__<typeof Radio>;
  button2?: Flex__<typeof Button>;
  logIn?: Flex__<"div">;
  text6?: Flex__<"div">;
  copy4?: Flex__<"div">;
  textLink2?: Flex__<"div">;
  label6?: Flex__<"div">;
  dividerWithText?: Flex__<"div">;
  divider?: Flex__<"div">;
  line?: Flex__<"div">;
  text3?: Flex__<"div">;
  copy3?: Flex__<"div">;
  gitlab?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  google?: Flex__<typeof Button>;
  logIn2?: Flex__<"div">;
  text7?: Flex__<"div">;
  copy5?: Flex__<"div">;
  textLink3?: Flex__<"div">;
  label7?: Flex__<"div">;
};

export interface DefaultLoginProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <ConsoleProvider
            data-plasmic-name={"consoleProvider"}
            data-plasmic-override={overrides.consoleProvider}
            className={classNames("__wab_instance", sty.consoleProvider)}
            ref={ref => {
              $refs["consoleProvider"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <div
                  data-plasmic-name={"frNLoginDesktopNunitoSans"}
                  data-plasmic-override={overrides.frNLoginDesktopNunitoSans}
                  className={classNames(
                    projectcss.all,
                    sty.frNLoginDesktopNunitoSans
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"left"}
                    data-plasmic-override={overrides.left}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.left)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"logoName"}
                      data-plasmic-override={overrides.logoName}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.logoName)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___0Lo6O)}
                        displayHeight={"28px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"54.26356506347656px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/console_france_nuage_fr/images/cloudLogo.svg",
                          fullWidth: 54.26356506347656,
                          fullHeight: 28,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wrLGa
                        )}
                      >
                        {"France nuage"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.form)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"heading"}
                        data-plasmic-override={overrides.heading}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.heading)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.text)}
                        >
                          <h1
                            data-plasmic-name={"copy"}
                            data-plasmic-override={overrides.copy}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.copy
                            )}
                          >
                            {"Se connecter"}
                          </h1>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"text2"}
                          data-plasmic-override={overrides.text2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.text2)}
                        >
                          <div
                            data-plasmic-name={"copy2"}
                            data-plasmic-override={overrides.copy2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.copy2
                            )}
                          >
                            {"Acc\u00e9der \u00e0 votre espace France nuage"}
                          </div>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"formAndButton"}
                        data-plasmic-override={overrides.formAndButton}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.formAndButton
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"form2"}
                          data-plasmic-override={overrides.form2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.form2)}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vgz9W
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textInputDefaultTrue"}
                              data-plasmic-override={
                                overrides.textInputDefaultTrue
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textInputDefaultTrue
                              )}
                            >
                              <div
                                data-plasmic-name={"text4"}
                                data-plasmic-override={overrides.text4}
                                className={classNames(
                                  projectcss.all,
                                  sty.text4
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"label"}
                                  data-plasmic-override={overrides.label}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.label
                                  )}
                                >
                                  <dd
                                    data-plasmic-name={"label2"}
                                    data-plasmic-override={overrides.label2}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.label2
                                    )}
                                  >
                                    {"Email"}
                                  </dd>
                                  {false ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jwxyc
                                      )}
                                    >
                                      {"*"}
                                    </div>
                                  ) : null}
                                  {false ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__lbxA2
                                      )}
                                    >
                                      {"(optional)"}
                                    </div>
                                  ) : null}
                                </Stack__>
                                {false ? (
                                  <div
                                    data-plasmic-name={"hint"}
                                    data-plasmic-override={overrides.hint}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.hint
                                    )}
                                  >
                                    {"Hint text"}
                                  </div>
                                ) : null}
                              </div>
                              <TextInput
                                data-plasmic-name={"textInput2"}
                                data-plasmic-override={overrides.textInput2}
                                autoComplete={["email"]}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput2
                                )}
                                inputMode={"email"}
                                inputType={"email"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput2",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={``}
                                value={generateStateValueProp($state, [
                                  "textInput2",
                                  "value"
                                ])}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"password"}
                              data-plasmic-override={overrides.password}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.password
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"textInput"}
                                data-plasmic-override={overrides.textInput}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.textInput
                                )}
                              >
                                <div
                                  data-plasmic-name={"text5"}
                                  data-plasmic-override={overrides.text5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.text5
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"label3"}
                                    data-plasmic-override={overrides.label3}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.label3
                                    )}
                                  >
                                    <dd
                                      data-plasmic-name={"label4"}
                                      data-plasmic-override={overrides.label4}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.label4
                                      )}
                                    >
                                      {"Mot de passe"}
                                    </dd>
                                    {false ? (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pGaiO
                                        )}
                                      >
                                        {"*"}
                                      </div>
                                    ) : null}
                                    {false ? (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__iqlkL
                                        )}
                                      >
                                        {"(optional)"}
                                      </div>
                                    ) : null}
                                  </Stack__>
                                  {false ? (
                                    <div
                                      data-plasmic-name={"hint2"}
                                      data-plasmic-override={overrides.hint2}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.hint2
                                      )}
                                    >
                                      {"Hint text"}
                                    </div>
                                  ) : null}
                                </div>
                              </Stack__>
                              <TextInput
                                data-plasmic-name={"textInput3"}
                                data-plasmic-override={overrides.textInput3}
                                autoComplete={["new-password"]}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput3
                                )}
                                inputMode={"none"}
                                inputType={"password"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput3",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={``}
                                value={generateStateValueProp($state, [
                                  "textInput3",
                                  "value"
                                ])}
                              />

                              <Stack__
                                as={"div"}
                                data-plasmic-name={"textLink"}
                                data-plasmic-override={overrides.textLink}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.textLink
                                )}
                              >
                                {false ? (
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__t3Zo3)}
                                    displayHeight={"20px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"20px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/console_france_nuage_fr/images/iconLeft2.svg",
                                      fullWidth: 20,
                                      fullHeight: 20,
                                      aspectRatio: undefined
                                    }}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"label5"}
                                  data-plasmic-override={overrides.label5}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.label5
                                  )}
                                >
                                  {"Mot de passe oubli\u00e9 ?"}
                                </div>
                                {false ? (
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__giA1G)}
                                    displayHeight={"20px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"20px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/console_france_nuage_fr/images/iconLeft2.svg",
                                      fullWidth: 20,
                                      fullHeight: 20,
                                      aspectRatio: undefined
                                    }}
                                  />
                                ) : null}
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"terms"}
                            data-plasmic-override={overrides.terms}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.terms)}
                          >
                            <Radio
                              data-plasmic-name={"radio"}
                              data-plasmic-override={overrides.radio}
                              className={classNames(
                                "__wab_instance",
                                sty.radio
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__svrR
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {"Accepter les "}
                                    </React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        textDecorationLine: "underline",
                                        color: "var(--token-PKw3mKbzBr62)"
                                      }}
                                    >
                                      {"conditions d'utilisation"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              }
                            />
                          </Stack__>
                          <Button
                            data-plasmic-name={"button2"}
                            data-plasmic-override={overrides.button2}
                            className={classNames(
                              "__wab_instance",
                              sty.button2
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___365QZ
                                )}
                              >
                                {"Se connecter"}
                              </div>
                            }
                            linkTo={`/`}
                          />

                          <Stack__
                            as={"div"}
                            data-plasmic-name={"logIn"}
                            data-plasmic-override={overrides.logIn}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.logIn)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"text6"}
                              data-plasmic-override={overrides.text6}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.text6)}
                            >
                              <div
                                data-plasmic-name={"copy4"}
                                data-plasmic-override={overrides.copy4}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.copy4
                                )}
                              >
                                {"Vous n\u2019avez pas encore de compte ?"}
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"textLink2"}
                              data-plasmic-override={overrides.textLink2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.textLink2
                              )}
                            >
                              {false ? (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__jHrR0)}
                                  displayHeight={"20px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"20px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/console_france_nuage_fr/images/iconLeft2.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: undefined
                                  }}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"label6"}
                                data-plasmic-override={overrides.label6}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.label6
                                )}
                              >
                                {"S\u2019inscrire"}
                              </div>
                              {false ? (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__dgHod)}
                                  displayHeight={"20px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"20px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/console_france_nuage_fr/images/iconLeft2.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: undefined
                                  }}
                                />
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"dividerWithText"}
                          data-plasmic-override={overrides.dividerWithText}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.dividerWithText
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"divider"}
                            data-plasmic-override={overrides.divider}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.divider)}
                          >
                            <div
                              data-plasmic-name={"line"}
                              data-plasmic-override={overrides.line}
                              className={classNames(projectcss.all, sty.line)}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"text3"}
                            data-plasmic-override={overrides.text3}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.text3)}
                          >
                            <div
                              data-plasmic-name={"copy3"}
                              data-plasmic-override={overrides.copy3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.copy3
                              )}
                            >
                              {"OU"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ajbps
                          )}
                        >
                          <Button
                            data-plasmic-name={"gitlab"}
                            data-plasmic-override={overrides.gitlab}
                            className={classNames("__wab_instance", sty.gitlab)}
                            contour={true}
                            iconStart={true}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__x4Hy1
                                )}
                              >
                                {"Se connecter avec Gitlab"}
                              </div>
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["runActionOnConsoleProvider"] = true
                                ? (() => {
                                    const actionArgs = {
                                      tplRef: "consoleProvider"
                                    };
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? [])
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runActionOnConsoleProvider"] != null &&
                                typeof $steps["runActionOnConsoleProvider"] ===
                                  "object" &&
                                typeof $steps["runActionOnConsoleProvider"]
                                  .then === "function"
                              ) {
                                $steps["runActionOnConsoleProvider"] =
                                  await $steps["runActionOnConsoleProvider"];
                              }
                            }}
                            start={
                              <GitLabLogoSvgIcon
                                data-plasmic-name={"svg"}
                                data-plasmic-override={overrides.svg}
                                className={classNames(projectcss.all, sty.svg)}
                                role={"img"}
                              />
                            }
                          />

                          <Button
                            data-plasmic-name={"google"}
                            data-plasmic-override={overrides.google}
                            className={classNames("__wab_instance", sty.google)}
                            contour={true}
                            disabled={true}
                            iconStart={true}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vTgBd
                                )}
                              >
                                {"Se connecter avec Google"}
                              </div>
                            }
                            linkTo={`/`}
                            start={
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___97FMu)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"20px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/console_france_nuage_fr/images/image2.png",
                                  fullWidth: 1280,
                                  fullHeight: 1280,
                                  aspectRatio: undefined
                                }}
                              />
                            }
                          />
                        </Stack__>
                      </Stack__>
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : false
                      ) ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"logIn2"}
                          data-plasmic-override={overrides.logIn2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.logIn2)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"text7"}
                            data-plasmic-override={overrides.text7}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.text7)}
                          >
                            <div
                              data-plasmic-name={"copy5"}
                              data-plasmic-override={overrides.copy5}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.copy5
                              )}
                            >
                              {"Vous n\u2019avez pas encore de compte ?"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"textLink3"}
                            data-plasmic-override={overrides.textLink3}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.textLink3
                            )}
                          >
                            {false ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__mdb98)}
                                displayHeight={"20px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"20px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/console_france_nuage_fr/images/iconLeft2.svg",
                                  fullWidth: 20,
                                  fullHeight: 20,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"label7"}
                              data-plasmic-override={overrides.label7}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.label7
                              )}
                            >
                              {"S\u2019inscrire"}
                            </div>
                            {false ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___4BEzb)}
                                displayHeight={"20px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"20px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/console_france_nuage_fr/images/iconLeft2.svg",
                                  fullWidth: 20,
                                  fullHeight: 20,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      ) : null}
                    </Stack__>
                  </Stack__>
                </div>
              )}
            </DataCtxReader__>
          </ConsoleProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "consoleProvider",
    "frNLoginDesktopNunitoSans",
    "left",
    "logoName",
    "form",
    "heading",
    "text",
    "copy",
    "text2",
    "copy2",
    "formAndButton",
    "form2",
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2",
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5",
    "terms",
    "radio",
    "button2",
    "logIn",
    "text6",
    "copy4",
    "textLink2",
    "label6",
    "dividerWithText",
    "divider",
    "line",
    "text3",
    "copy3",
    "gitlab",
    "svg",
    "google",
    "logIn2",
    "text7",
    "copy5",
    "textLink3",
    "label7"
  ],
  consoleProvider: [
    "consoleProvider",
    "frNLoginDesktopNunitoSans",
    "left",
    "logoName",
    "form",
    "heading",
    "text",
    "copy",
    "text2",
    "copy2",
    "formAndButton",
    "form2",
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2",
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5",
    "terms",
    "radio",
    "button2",
    "logIn",
    "text6",
    "copy4",
    "textLink2",
    "label6",
    "dividerWithText",
    "divider",
    "line",
    "text3",
    "copy3",
    "gitlab",
    "svg",
    "google",
    "logIn2",
    "text7",
    "copy5",
    "textLink3",
    "label7"
  ],
  frNLoginDesktopNunitoSans: [
    "frNLoginDesktopNunitoSans",
    "left",
    "logoName",
    "form",
    "heading",
    "text",
    "copy",
    "text2",
    "copy2",
    "formAndButton",
    "form2",
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2",
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5",
    "terms",
    "radio",
    "button2",
    "logIn",
    "text6",
    "copy4",
    "textLink2",
    "label6",
    "dividerWithText",
    "divider",
    "line",
    "text3",
    "copy3",
    "gitlab",
    "svg",
    "google",
    "logIn2",
    "text7",
    "copy5",
    "textLink3",
    "label7"
  ],
  left: [
    "left",
    "logoName",
    "form",
    "heading",
    "text",
    "copy",
    "text2",
    "copy2",
    "formAndButton",
    "form2",
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2",
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5",
    "terms",
    "radio",
    "button2",
    "logIn",
    "text6",
    "copy4",
    "textLink2",
    "label6",
    "dividerWithText",
    "divider",
    "line",
    "text3",
    "copy3",
    "gitlab",
    "svg",
    "google",
    "logIn2",
    "text7",
    "copy5",
    "textLink3",
    "label7"
  ],
  logoName: ["logoName"],
  form: [
    "form",
    "heading",
    "text",
    "copy",
    "text2",
    "copy2",
    "formAndButton",
    "form2",
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2",
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5",
    "terms",
    "radio",
    "button2",
    "logIn",
    "text6",
    "copy4",
    "textLink2",
    "label6",
    "dividerWithText",
    "divider",
    "line",
    "text3",
    "copy3",
    "gitlab",
    "svg",
    "google",
    "logIn2",
    "text7",
    "copy5",
    "textLink3",
    "label7"
  ],
  heading: ["heading", "text", "copy", "text2", "copy2"],
  text: ["text", "copy"],
  copy: ["copy"],
  text2: ["text2", "copy2"],
  copy2: ["copy2"],
  formAndButton: [
    "formAndButton",
    "form2",
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2",
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5",
    "terms",
    "radio",
    "button2",
    "logIn",
    "text6",
    "copy4",
    "textLink2",
    "label6",
    "dividerWithText",
    "divider",
    "line",
    "text3",
    "copy3",
    "gitlab",
    "svg",
    "google"
  ],
  form2: [
    "form2",
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2",
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5",
    "terms",
    "radio",
    "button2",
    "logIn",
    "text6",
    "copy4",
    "textLink2",
    "label6"
  ],
  textInputDefaultTrue: [
    "textInputDefaultTrue",
    "text4",
    "label",
    "label2",
    "hint",
    "textInput2"
  ],
  text4: ["text4", "label", "label2", "hint"],
  label: ["label", "label2"],
  label2: ["label2"],
  hint: ["hint"],
  textInput2: ["textInput2"],
  password: [
    "password",
    "textInput",
    "text5",
    "label3",
    "label4",
    "hint2",
    "textInput3",
    "textLink",
    "label5"
  ],
  textInput: ["textInput", "text5", "label3", "label4", "hint2"],
  text5: ["text5", "label3", "label4", "hint2"],
  label3: ["label3", "label4"],
  label4: ["label4"],
  hint2: ["hint2"],
  textInput3: ["textInput3"],
  textLink: ["textLink", "label5"],
  label5: ["label5"],
  terms: ["terms", "radio"],
  radio: ["radio"],
  button2: ["button2"],
  logIn: ["logIn", "text6", "copy4", "textLink2", "label6"],
  text6: ["text6", "copy4"],
  copy4: ["copy4"],
  textLink2: ["textLink2", "label6"],
  label6: ["label6"],
  dividerWithText: ["dividerWithText", "divider", "line", "text3", "copy3"],
  divider: ["divider", "line"],
  line: ["line"],
  text3: ["text3", "copy3"],
  copy3: ["copy3"],
  gitlab: ["gitlab", "svg"],
  svg: ["svg"],
  google: ["google"],
  logIn2: ["logIn2", "text7", "copy5", "textLink3", "label7"],
  text7: ["text7", "copy5"],
  copy5: ["copy5"],
  textLink3: ["textLink3", "label7"],
  label7: ["label7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  consoleProvider: typeof ConsoleProvider;
  frNLoginDesktopNunitoSans: "div";
  left: "div";
  logoName: "div";
  form: "div";
  heading: "div";
  text: "div";
  copy: "h1";
  text2: "div";
  copy2: "div";
  formAndButton: "div";
  form2: "div";
  textInputDefaultTrue: "div";
  text4: "div";
  label: "div";
  label2: "dd";
  hint: "div";
  textInput2: typeof TextInput;
  password: "div";
  textInput: "div";
  text5: "div";
  label3: "div";
  label4: "dd";
  hint2: "div";
  textInput3: typeof TextInput;
  textLink: "div";
  label5: "div";
  terms: "div";
  radio: typeof Radio;
  button2: typeof Button;
  logIn: "div";
  text6: "div";
  copy4: "div";
  textLink2: "div";
  label6: "div";
  dividerWithText: "div";
  divider: "div";
  line: "div";
  text3: "div";
  copy3: "div";
  gitlab: typeof Button;
  svg: "svg";
  google: typeof Button;
  logIn2: "div";
  text7: "div";
  copy5: "div";
  textLink3: "div";
  label7: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    consoleProvider: makeNodeComponent("consoleProvider"),
    frNLoginDesktopNunitoSans: makeNodeComponent("frNLoginDesktopNunitoSans"),
    left: makeNodeComponent("left"),
    logoName: makeNodeComponent("logoName"),
    form: makeNodeComponent("form"),
    heading: makeNodeComponent("heading"),
    text: makeNodeComponent("text"),
    copy: makeNodeComponent("copy"),
    text2: makeNodeComponent("text2"),
    copy2: makeNodeComponent("copy2"),
    formAndButton: makeNodeComponent("formAndButton"),
    form2: makeNodeComponent("form2"),
    textInputDefaultTrue: makeNodeComponent("textInputDefaultTrue"),
    text4: makeNodeComponent("text4"),
    label: makeNodeComponent("label"),
    label2: makeNodeComponent("label2"),
    hint: makeNodeComponent("hint"),
    textInput2: makeNodeComponent("textInput2"),
    password: makeNodeComponent("password"),
    textInput: makeNodeComponent("textInput"),
    text5: makeNodeComponent("text5"),
    label3: makeNodeComponent("label3"),
    label4: makeNodeComponent("label4"),
    hint2: makeNodeComponent("hint2"),
    textInput3: makeNodeComponent("textInput3"),
    textLink: makeNodeComponent("textLink"),
    label5: makeNodeComponent("label5"),
    terms: makeNodeComponent("terms"),
    radio: makeNodeComponent("radio"),
    button2: makeNodeComponent("button2"),
    logIn: makeNodeComponent("logIn"),
    text6: makeNodeComponent("text6"),
    copy4: makeNodeComponent("copy4"),
    textLink2: makeNodeComponent("textLink2"),
    label6: makeNodeComponent("label6"),
    dividerWithText: makeNodeComponent("dividerWithText"),
    divider: makeNodeComponent("divider"),
    line: makeNodeComponent("line"),
    text3: makeNodeComponent("text3"),
    copy3: makeNodeComponent("copy3"),
    gitlab: makeNodeComponent("gitlab"),
    svg: makeNodeComponent("svg"),
    google: makeNodeComponent("google"),
    logIn2: makeNodeComponent("logIn2"),
    text7: makeNodeComponent("text7"),
    copy5: makeNodeComponent("copy5"),
    textLink3: makeNodeComponent("textLink3"),
    label7: makeNodeComponent("label7"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
