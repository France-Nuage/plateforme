/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: PEgOxZRQTA56

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdBreadcrumb } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { AntdBreadcrumbItem } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../react_aria/plasmic.module.css"; // plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from "./PlasmicBreadcrumbs.module.css"; // plasmic-import: PEgOxZRQTA56/css

import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: Wuq7R1xx4mKS/icon

createPlasmicElementProxy;

export type PlasmicBreadcrumbs__VariantMembers = {};
export type PlasmicBreadcrumbs__VariantsArgs = {};
type VariantPropType = keyof PlasmicBreadcrumbs__VariantsArgs;
export const PlasmicBreadcrumbs__VariantProps = new Array<VariantPropType>();

export type PlasmicBreadcrumbs__ArgsType = {};
type ArgPropType = keyof PlasmicBreadcrumbs__ArgsType;
export const PlasmicBreadcrumbs__ArgProps = new Array<ArgPropType>();

export type PlasmicBreadcrumbs__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  section?: Flex__<"section">;
  breadcrumb?: Flex__<typeof AntdBreadcrumb>;
};

export interface DefaultBreadcrumbsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBreadcrumbs__RenderFunc(props: {
  variants: PlasmicBreadcrumbs__VariantsArgs;
  args: PlasmicBreadcrumbs__ArgsType;
  overrides: PlasmicBreadcrumbs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rlGYo)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__rrVko)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            src={{
              src: "/plasmic/console/images/cloudModelSvg.svg",
              fullWidth: 28,
              fullHeight: 16,
              aspectRatio: 1.75
            }}
          />
        </div>
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
        />

        <AntdBreadcrumb
          data-plasmic-name={"breadcrumb"}
          data-plasmic-override={overrides.breadcrumb}
          className={classNames("__wab_instance", sty.breadcrumb)}
          itemsRaw={
            <React.Fragment>
              <AntdBreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem___40Wa
                )}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hbMzg)}
                >
                  <Icon12Icon
                    className={classNames(projectcss.all, sty.svg___1Tihh)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iCly5
                    )}
                  >
                    {"Nom de l'organisation"}
                  </div>
                </Stack__>
              </AntdBreadcrumbItem>
              <AntdBreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__mxEBl
                )}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__atuiJ)}
                >
                  <Icon12Icon
                    className={classNames(projectcss.all, sty.svg__qgkOx)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___77Af
                    )}
                  >
                    {"Nom de la filiale"}
                  </div>
                </Stack__>
              </AntdBreadcrumbItem>
              <AntdBreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__du1Un
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xDbC
                  )}
                >
                  {"Nom du projet"}
                </div>
              </AntdBreadcrumbItem>
            </React.Fragment>
          }
          separator={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__loFWx
              )}
            >
              {"/"}
            </div>
          }
        />
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "section", "breadcrumb"],
  img: ["img"],
  section: ["section"],
  breadcrumb: ["breadcrumb"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  section: "section";
  breadcrumb: typeof AntdBreadcrumb;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBreadcrumbs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBreadcrumbs__VariantsArgs;
    args?: PlasmicBreadcrumbs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBreadcrumbs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBreadcrumbs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBreadcrumbs__ArgProps,
          internalVariantPropNames: PlasmicBreadcrumbs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBreadcrumbs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBreadcrumbs";
  } else {
    func.displayName = `PlasmicBreadcrumbs.${nodeName}`;
  }
  return func;
}

export const PlasmicBreadcrumbs = Object.assign(
  // Top-level PlasmicBreadcrumbs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    section: makeNodeComponent("section"),
    breadcrumb: makeNodeComponent("breadcrumb"),

    // Metadata about props expected for PlasmicBreadcrumbs
    internalVariantProps: PlasmicBreadcrumbs__VariantProps,
    internalArgProps: PlasmicBreadcrumbs__ArgProps
  }
);

export default PlasmicBreadcrumbs;
/* prettier-ignore-end */
