/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aqt4bw2qhfo7d76ADZhQFo
// Component: d1MlGr7C5K9L

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Breadcrumbs from "../../Breadcrumbs"; // plasmic-import: PEgOxZRQTA56/component
import SideBar from "../../SideBar"; // plasmic-import: WgBKdGHdVFBy/component
import { ConsoleProvider } from "../../../providers/ConsoleProvider"; // plasmic-import: vWN9dmdYefpY/codeComponent
import Button from "../../Button"; // plasmic-import: BPkDJbnqSOZ0/component

import { useScreenVariants as useScreenVariantseEvMbXdv1ZEe } from "../console_france_nuage_fr/PlasmicGlobalVariant__Screen"; // plasmic-import: eEvMBXdv1ZEe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../react_aria/plasmic.module.css"; // plasmic-import: aqt4bw2qhfo7d76ADZhQFo/projectcss
import sty from "./PlasmicAccueil.module.css"; // plasmic-import: d1MlGr7C5K9L/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: INMXktOfIWiD/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: BMAZvJUkowiF/icon

createPlasmicElementProxy;

export type PlasmicAccueil__VariantMembers = {};
export type PlasmicAccueil__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccueil__VariantsArgs;
export const PlasmicAccueil__VariantProps = new Array<VariantPropType>();

export type PlasmicAccueil__ArgsType = {};
type ArgPropType = keyof PlasmicAccueil__ArgsType;
export const PlasmicAccueil__ArgProps = new Array<ArgPropType>();

export type PlasmicAccueil__OverridesType = {
  root?: Flex__<"div">;
  breadcrumbs?: Flex__<typeof Breadcrumbs>;
  sideBar?: Flex__<typeof SideBar>;
  consoleProvider?: Flex__<typeof ConsoleProvider>;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultAccueilProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccueil__RenderFunc(props: {
  variants: PlasmicAccueil__VariantsArgs;
  args: PlasmicAccueil__ArgsType;
  overrides: PlasmicAccueil__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseEvMbXdv1ZEe()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Breadcrumbs
            data-plasmic-name={"breadcrumbs"}
            data-plasmic-override={overrides.breadcrumbs}
            className={classNames("__wab_instance", sty.breadcrumbs)}
          />

          <SideBar
            data-plasmic-name={"sideBar"}
            data-plasmic-override={overrides.sideBar}
            className={classNames("__wab_instance", sty.sideBar)}
          />

          <ConsoleProvider
            data-plasmic-name={"consoleProvider"}
            data-plasmic-override={overrides.consoleProvider}
            className={classNames("__wab_instance", sty.consoleProvider)}
            ref={ref => {
              $refs["consoleProvider"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $ctx["France Nuage"].instances;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        data-plasmic-name={"freeBox"}
                        data-plasmic-override={overrides.freeBox}
                        className={classNames(projectcss.all, sty.freeBox)}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bjM18
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    );
                  })}
                  <Button
                    className={classNames("__wab_instance", sty.button__aFuXe)}
                    end={
                      <ChevronDownIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ytmnk
                        )}
                      >
                        {"Ajouter une instance hard-cod\u00e9e \u00e0 la prod"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["runActionOnConsoleProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "consoleProvider",
                              action: "createInstance",
                              args: [
                                4,
                                (() => {
                                  try {
                                    return 4 * 2 ** 30;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "Mon instance hard-cod\u00e9e"
                              ]
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnConsoleProvider"] != null &&
                        typeof $steps["runActionOnConsoleProvider"] ===
                          "object" &&
                        typeof $steps["runActionOnConsoleProvider"].then ===
                          "function"
                      ) {
                        $steps["runActionOnConsoleProvider"] = await $steps[
                          "runActionOnConsoleProvider"
                        ];
                      }
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a5S3
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `Application mode: ${$ctx["France Nuage"].application.mode}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__qZXmK)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jtoai
                        )}
                      >
                        {"Change application mode"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["runActionOnConsoleProvider"] = true
                        ? (() => {
                            const actionArgs = { tplRef: "consoleProvider" };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnConsoleProvider"] != null &&
                        typeof $steps["runActionOnConsoleProvider"] ===
                          "object" &&
                        typeof $steps["runActionOnConsoleProvider"].then ===
                          "function"
                      ) {
                        $steps["runActionOnConsoleProvider"] = await $steps[
                          "runActionOnConsoleProvider"
                        ];
                      }
                    }}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ConsoleProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "breadcrumbs", "sideBar", "consoleProvider", "freeBox", "svg"],
  breadcrumbs: ["breadcrumbs"],
  sideBar: ["sideBar"],
  consoleProvider: ["consoleProvider", "freeBox", "svg"],
  freeBox: ["freeBox"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  breadcrumbs: typeof Breadcrumbs;
  sideBar: typeof SideBar;
  consoleProvider: typeof ConsoleProvider;
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccueil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccueil__VariantsArgs;
    args?: PlasmicAccueil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccueil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccueil__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccueil__ArgProps,
          internalVariantPropNames: PlasmicAccueil__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccueil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccueil";
  } else {
    func.displayName = `PlasmicAccueil.${nodeName}`;
  }
  return func;
}

export const PlasmicAccueil = Object.assign(
  // Top-level PlasmicAccueil renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    breadcrumbs: makeNodeComponent("breadcrumbs"),
    sideBar: makeNodeComponent("sideBar"),
    consoleProvider: makeNodeComponent("consoleProvider"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAccueil
    internalVariantProps: PlasmicAccueil__VariantProps,
    internalArgProps: PlasmicAccueil__ArgProps,

    // Key-value metadata
    metadata: { role: "user" },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccueil;
/* prettier-ignore-end */
