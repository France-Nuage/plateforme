// @generated by protobuf-ts 2.11.1 with parameter optimize_code_size
// @generated from protobuf file "resourcemanager.proto" (package "francenuage.fr.resourcemanager.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';

import { Projects } from './resourcemanager';
import type { CreateProjectResponse } from './resourcemanager';
import type { CreateProjectRequest } from './resourcemanager';
import type { ListProjectsResponse } from './resourcemanager';
import type { ListProjectsRequest } from './resourcemanager';
import { Organizations } from './resourcemanager';
import type { CreateOrganizationResponse } from './resourcemanager';
import type { CreateOrganizationRequest } from './resourcemanager';
import type { ListOrganizationsResponse } from './resourcemanager';
import type { ListOrganizationsRequest } from './resourcemanager';

/**
 * @generated from protobuf service francenuage.fr.resourcemanager.v1.Organizations
 */
export interface IOrganizationsClient {
  /**
   * @generated from protobuf rpc: List
   */
  list(
    input: ListOrganizationsRequest,
    options?: RpcOptions,
  ): UnaryCall<ListOrganizationsRequest, ListOrganizationsResponse>;
  /**
   * @generated from protobuf rpc: Create
   */
  create(
    input: CreateOrganizationRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateOrganizationRequest, CreateOrganizationResponse>;
}
/**
 * @generated from protobuf service francenuage.fr.resourcemanager.v1.Organizations
 */
export class OrganizationsClient implements IOrganizationsClient, ServiceInfo {
  typeName = Organizations.typeName;
  methods = Organizations.methods;
  options = Organizations.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: List
   */
  list(
    input: ListOrganizationsRequest,
    options?: RpcOptions,
  ): UnaryCall<ListOrganizationsRequest, ListOrganizationsResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListOrganizationsRequest, ListOrganizationsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: Create
   */
  create(
    input: CreateOrganizationRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateOrganizationRequest, CreateOrganizationResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      CreateOrganizationRequest,
      CreateOrganizationResponse
    >('unary', this._transport, method, opt, input);
  }
}
/**
 * @generated from protobuf service francenuage.fr.resourcemanager.v1.Projects
 */
export interface IProjectsClient {
  /**
   * @generated from protobuf rpc: List
   */
  list(
    input: ListProjectsRequest,
    options?: RpcOptions,
  ): UnaryCall<ListProjectsRequest, ListProjectsResponse>;
  /**
   * @generated from protobuf rpc: Create
   */
  create(
    input: CreateProjectRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateProjectRequest, CreateProjectResponse>;
}
/**
 * @generated from protobuf service francenuage.fr.resourcemanager.v1.Projects
 */
export class ProjectsClient implements IProjectsClient, ServiceInfo {
  typeName = Projects.typeName;
  methods = Projects.methods;
  options = Projects.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: List
   */
  list(
    input: ListProjectsRequest,
    options?: RpcOptions,
  ): UnaryCall<ListProjectsRequest, ListProjectsResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListProjectsRequest, ListProjectsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: Create
   */
  create(
    input: CreateProjectRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateProjectRequest, CreateProjectResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateProjectRequest, CreateProjectResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
