# Define the pipeline stages
stages:
  - security
  - build
  - code-style
  - unit-tests
  - integration-tests
  - deploy
  - release

# Define the default image
image: docker:27-cli

# Define the docker-dind service that is started for each job
services:
  - name: docker:27-dind

# Define the preliminary scripts to run before every job
before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Secret detection job using trufflehog
secrets-detection:
  stage: security
  image: trufflesecurity/trufflehog:latest
  before_script: []  # Override the default before_script
  script:
    - trufflehog git file://$CI_PROJECT_DIR --json > trufflehog_results.json
    - |
      if [ -s trufflehog_results.json ]; then
        echo "ðŸš¨ ATTENTION: Des secrets potentiels ont Ã©tÃ© dÃ©tectÃ©s dans votre code!"
        cat trufflehog_results.json
        exit 1
      else
        echo "âœ… Aucun secret dÃ©tectÃ©"
      fi
  artifacts:
    paths:
      - trufflehog_results.json
    when: on_failure
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'

build:
  stage: build
  script:
    - docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
    - docker compose push

"code style / controlplane":
  stage: code-style
  script:
    - docker compose run --no-deps controlplane cargo fmt --check
    - docker compose run --no-deps controlplane cargo clippy

"unit tests / controlplane":
  stage: unit-tests
  script:
    - docker compose run --no-deps controlplane cargo test --workspace
    - docker compose run --no-deps controlplane grcov . --binary-path ./target/debug/deps/ -s . -t cobertura --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o target/cobertura.xml
    - >
      docker compose run --build --no-deps --remove-orphans controlplane sh -c "xmllint --xpath \"concat('Coverage: ', 100 * string(//coverage/@line-rate), '%')\" target/cobertura.xml"
  coverage: '/Coverage: \d+(?:\.\d+)?/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: controlplane/target/cobertura.xml

"Release":
  image: node:22-alpine
  stage: release
  variables:
    CI: "true"
  before_script:
    - git remote set-url origin "https://oauth2:${GITLAB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git"
    - npm install
  script:
    - npx semantic-release
  only:
    - master