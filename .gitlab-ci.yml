# Define the pipeline stages
stages:
  - security
  - build
  - code-style
  - unit-tests
  - system-tests
  - documentation
  - release
  - deploy

image: docker:cli

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker compose down --volumes --remove-orphans

after_script:
  - docker compose down --volumes

variables:
  DOCKER_HOST: unix:///var/run/docker.sock
  GIT_DEPTH: 0
  GIT_STRATEGY: clone

gitleaks:
  stage: security
  image:
    name: zricethezav/gitleaks:v8.24.2
    entrypoint: [""]
  before_script: []
  script:
    - >
      gitleaks detect
      --source .
      --verbose
      --report-format json
      --report-path gitleaks-report.json
      --exit-code 1
  artifacts:
    paths:
      - gitleaks-report.json
    when: always
    expire_in: 1 week

"build / development":
  stage: build
  variables:
    TARGET: development
  script:
    - docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
    - docker compose push

"build / release":
  stage: build
  variables:
    TARGET: release
  script:
    - docker compose build
    - docker compose push

"code style / controlplane":
  stage: code-style
  variables:
    SQLX_OFFLINE: true
  script:
    - docker compose run --no-deps --remove-orphans controlplane cargo fmt --check
    - docker compose run --no-deps --remove-orphans controlplane cargo clippy

"code style / console":
  stage: code-style
  script:
    - docker compose run --no-deps --remove-orphans console npm run lint
    - docker compose run --no-deps --remove-orphans console npx prettier --check .

"code style / node-sdk":
  stage: code-style
  script:
    - docker compose run --no-deps --remove-orphans node-sdk npm run lint
    - docker compose run --no-deps --remove-orphans node-sdk npx prettier --check .

"code style / markdown":
  stage: code-style
  script:
    - docker compose run --remove-orphans markdown-lint

"unit tests / authz":
  stage: "unit-tests"
  script:
    - docker compose run zed validate authz/tests.yaml

"unit tests / migration linting":
  stage: "unit-tests"
  script:
    - docker compose run atlas login --token=$ATLAS_TOKEN
    - docker compose run atlas migrate lint --dev-url="postgres://postgres:postgres@atlas-dev-database:5432?sslmode=disable" --dir="file://controlplane/migrations" --git-base=origin/master

"unit tests / controlplane":
  stage: unit-tests
  variables:
    CARGO_INCREMENTAL: "0"
    LLVM_PROFILE_FILE: "cargo-test-%p-%m.profraw"
    RUSTFLAGS: "-Cinstrument-coverage"
    SQLX_OFFLINE: true
  script:
    - docker compose run --remove-orphans controlplane cargo test --workspace
    - docker compose run --remove-orphans --no-deps controlplane grcov . --binary-path ./target/debug/deps/ -s . -t cobertura --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o cobertura.xml
    - >
      docker compose run --remove-orphans --no-deps controlplane sh -c "xmllint --xpath \"concat('Coverage: ', 100 * string(//coverage/@line-rate), '%')\" cobertura.xml"
  coverage: '/Coverage: \d+(?:\.\d+)?/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: controlplane/cobertura.xml

"system tests / console":
  stage: system-tests
  variables:
    TARGET: release
    VITE_APPLICATION_DEFAULT_MODE: rpc
  after_script:
    - docker compose logs > docker-compose-logs.txt
  script:
    - docker compose run --remove-orphans system-tests npm run test:ci
  artifacts:
    when: always
    paths:
      - system-tests/playwright-report/
      - docker-compose-logs.txt
    expire_in: 1 week

"deploy / apply migrations":
  stage: deploy
  script:
    - docker compose run atlas login --token=$ATLAS_TOKEN
    - docker compose run atlas migrate apply --url="$PRODUCTION_DATABASE_URL" --dir="file://controlplane/migrations"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

"deploy / apply authz schema":
  stage: deploy
  script:
    - docker compose run zed schema write --endpoint 100.96.0.50:50051 --insecure --token $SPICEDB_TOKEN authz/schema.zed
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

"deploy / controlplane":
  stage: deploy
  script:
    - docker build --target=release --tag=${CI_REGISTRY_IMAGE}/controlplane:release --push controlplane
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

"deploy / console":
  stage: deploy
  script:
    - docker build --target=release --tag=${CI_REGISTRY_IMAGE}/console:release --push console
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

"deploy / synchronizer":
  stage: deploy
  script:
    - docker build --target=release --tag=${CI_REGISTRY_IMAGE}/synchronizer:release --file=controlplane/Dockerfile.synchronizer --push controlplane
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

"documentation / controlplane":
  stage: documentation
  script:
    - docker build -f controlplane/Dockerfile.docs -t ${CI_REGISTRY_IMAGE}/docs:${CI_COMMIT_REF_SLUG} controlplane
    - >
      docker run
      -e CLOUDFLARE_API_TOKEN=$CF_API_TOKEN 
      -e CLOUDFLARE_ACCOUNT_ID=$CF_ACCOUNT_ID 
      ${CI_REGISTRY_IMAGE}/docs:${CI_COMMIT_REF_SLUG}
      --branch ${CI_COMMIT_REF_NAME}
      --commit-hash ${CI_COMMIT_SHA}
      --commit-message="Documentation mise Ã  jour - ${CI_COMMIT_MESSAGE}"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

"release":
  image: node:22-alpine
  stage: release
  variables:
    CI: true
    HUSKY: 0
  before_script:
    - apk add --no-cache git
    - git remote set-url origin "https://oauth2:${GITLAB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git"
    - npm ci
  script:
    - npx semantic-release
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never
