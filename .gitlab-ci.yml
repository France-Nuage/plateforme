# Define the pipeline stages
stages:
  - security
  - build
  - code-style
  - unit-tests
  - system-tests
  - deploy
  - release

# Define the default image
image: docker:27-cli

# Define the docker-dind service that is started for each job
services:
  - name: docker:27-dind

# Define the preliminary scripts to run before every job
before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

gitleaks:
  stage: security
  script:
    - docker run --rm -v $(pwd):/src zricethezav/gitleaks:v8.24.2 detect --source /src --verbose --report-format json --report-path /src/gitleaks-report.json --exit-code 1
  artifacts:
    paths:
      - gitleaks-report.json
    when: always
    expire_in: 1 week

build:
  stage: build
  script:
    - docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
    - docker compose push

"code style / controlplane":
  stage: code-style
  variables:
    SQLX_OFFLINE: true
  script:
    - docker compose run --no-deps controlplane cargo fmt --check
    - docker compose run --no-deps controlplane cargo clippy

"code style / console":
  stage: code-style
  script:
    - docker compose run --no-deps console npx eslint
    - docker compose run --no-deps console npx prettier --check .

"unit tests / controlplane":
  stage: unit-tests
  variables:
    CARGO_INCREMENTAL: "0"
    LLVM_PROFILE_FILE: "cargo-test-%p-%m.profraw"
    RUSTFLAGS: "-Cinstrument-coverage"
    SQLX_OFFLINE: true
  script:
    - docker compose run controlplane cargo test --workspace
    - docker compose run controlplane grcov . --binary-path ./target/debug/deps/ -s . -t cobertura --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o target/cobertura.xml
    - >
      docker compose run --build --no-deps --remove-orphans controlplane sh -c "xmllint --xpath \"concat('Coverage: ', 100 * string(//coverage/@line-rate), '%')\" target/cobertura.xml"
  coverage: '/Coverage: \d+(?:\.\d+)?/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: controlplane/target/cobertura.xml

"system tests / console":
  stage: system-tests
  variables:
    TARGET: release
  script:
    - docker compose run system-tests npm run test:ci
  artifacts:
    when: always
    paths:
      - system-tests/playwright-report/
    expire_in: 1 week

"deploy / controlplane":
  stage: deploy
  script:
    - docker build --target=release --tag=${CI_REGISTRY_IMAGE}/controlplane:release --push controlplane
  only:
    - master

"deploy / console":
  stage: deploy
  script:
    - docker build --target=release --tag=${CI_REGISTRY_IMAGE}/console:release --push console
  only:
    - master
    - plasmic-console

"release":
  image: node:22-alpine
  stage: release
  variables:
    CI: "true"
  before_script:
    - apk add --no-cache git
    - corepack enable
    - SHA_SUM=$(npm view pnpm@10.1.0 dist.shasum) && corepack install -g pnpm@10.1.0+sha1.$SHA_SUM #https://github.com/pnpm/pnpm/issues/9014
    - corepack prepare pnpm@10.1.0 --activate
    - pnpm config set store-dir .pnpm-store
    - export SHELL=/bin/bash
    - pnpm setup
    - source /root/.bashrc
    - git remote set-url origin "https://oauth2:${GITLAB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git"
    - pnpm install --ignore-scripts
  script:
    - npx semantic-release
  only:
    - master
