services:
  control-plane:
    image: "${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}control-plane:${CI_COMMIT_REF_SLUG:-latest}"
    build:
      cache_from:
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}control-plane:${CI_COMMIT_REF_SLUG:-latest}
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}control-plane:staging
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}control-plane:production
      context: .
      dockerfile: apps/control-plane/Dockerfile
      target: ${TARGET:-development}
    container_name: control-plane
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      playwright:
        condition: service_healthy
    environment:
      # Application
      NODE_ENV: development
      APP_KEY: ${APP_KEY:-vUfHvIvSHtNNsRYrD-PfTm1pUc1L_4zd}
      TZ: UTC
      HOST: 0.0.0.0
      PORT: 3333
      API_URL: http://localhost:3333
      PLATFORM_URL: http://localhost:3001
      STRIPE_SECRET_KEY: plop
      # Database
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      # Dev
      DEV_CLUSTER_HOST: ${DEV_CLUSTER_HOST:-dummy-host}
      DEV_CLUSTER_TOKEN_ID: ${DEV_CLUSTER_TOKEN_ID:-dummy-id}
      DEV_CLUSTER_TOKEN_SECRET: ${DEV_CLUSTER_TOKEN_SECRET:-dummy-secret}
      # Redis
      REDIS_HOST: redis
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    ports:
      - "3333:3333"
    volumes:
      - ./apps/control-plane:/app/apps/control-plane
      - /app/apps/control-plane/node_modules
      - /app/node_modules
    working_dir: /app/apps/control-plane
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://control-plane:3333/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  control-plane-setup:
    image: docker:27-cli
    depends_on:
      - control-plane
    command: >
      sh -c "docker exec control-plane node ace migration:run && 
             docker exec control-plane node ace db:seed"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  platform:
    image: "${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}platform:${CI_COMMIT_REF_SLUG:-latest}"
    build:
      cache_from:
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}platform:${CI_COMMIT_REF_SLUG:-latest}
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}platform:staging
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}platform:production
      context: .
      dockerfile: apps/platform/Dockerfile
      target: ${TARGET:-development}
    container_name: platform
    depends_on:
      control-plane:
        condition: service_healthy
      control-plane-setup:
        condition: service_started
      playwright:
        condition: service_healthy
    environment:
      API_URL: http://control-plane:3333
      BASE_URL: http://platform:3000
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    ports:
      - "3000:3000"
      - "39709:39709"
    volumes:
      - ./apps/platform:/app/apps/platform
      - /app/apps/platform/node_modules
      - /app/node_modules
    working_dir: /app/apps/platform
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://platform:3000/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  tests:
    image: "${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}tests:${CI_COMMIT_REF_SLUG:-latest}"
    build:
      context: .
      dockerfile: apps/tests/Dockerfile
    container_name: tests
    depends_on:
      control-plane:
        condition: service_healthy
      platform:
        condition: service_healthy
      playwright:
        condition: service_healthy
      control-plane-setup:
        condition: service_completed_successfully
    environment:
      API_URL: http://control-plane:3333
      PLATFORM_URL: http://platform:3000
      PW_TEST_CONNECT_WS_ENDPOINT: ws://playwright:4444
      PW_TEST_HTML_REPORT_OPEN: "never"
      WAIT_HOSTS: "platform:3000,control-plane:3333"
      INTEGRATION_TESTS_TIMEOUT: 30000
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    volumes:
      - ./apps/tests:/app/apps/tests
      - ./playwright-report:/app/playwright-report
    restart: on-failure:3

  playwright:
    image: mcr.microsoft.com/playwright:v1.51.0-noble
    command: /bin/sh -c "npx -y playwright@1.51.0 run-server --port 4444 --host 0.0.0.0"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    ports:
      - "4444:4444"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://0.0.0.0:4444"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    image: postgres:17
    ports:
      - "5432:5432"
    volumes:
      - france_nuage_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:7-alpine
    volumes:
      - france_nuage_redis:/data
    ports:
      - "6379:6379"

  worker:
    image: "${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}worker:${CI_COMMIT_REF_SLUG:-latest}"
    build:
      cache_from:
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}worker:${CI_COMMIT_REF_SLUG:-latest}
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}worker:staging
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}worker:production
      context: apps/worker-vm-status
      target: ${TARGET:-development}
    container_name: worker
    depends_on:
      - control-plane
    environment:
      API_URL: http://control-plane:3333
      API_TOKEN: ${WORKER_API_TOKEN:-oat_MQ.NERJdHV3QmlSbmpaUXlXd1dxSnZfb2tWcmVoRHpEQTF2WFZ6TjNnWTExMTcxMTMwMjU}
      RUSTFLAGS: -Dwarnings
    restart: always

volumes:
  france_nuage_postgres:
  france_nuage_redis:
