services:
  console:
    image: "${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}console:${CI_COMMIT_REF_SLUG:-latest}-${TARGET:-development}"
    build:
      args:
        VITE_OIDC_CLIENT_ID: ${OIDC_CLIENT_ID:-francenuage}
        VITE_OIDC_PROVIDER_NAME: ${OIDC_PROVIDER_NAME:-mock}
        VITE_OIDC_PROVIDER_URL: ${OIDC_PROVIDER_URL:-https://oidc}
        VITE_CONTROLPLANE_URL: ${CONTROLPLANE_URL:-https://controlplane}
      cache_from:
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}console:${CI_COMMIT_REF_SLUG:-latest}
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}console:master
      context: console
      target: ${TARGET:-development}
    depends_on:
      controlplane:
        condition: service_healthy
      oidc:
        condition: service_healthy
    environment:
      VITE_OIDC_CLIENT_ID: ${OIDC_CLIENT_ID:-francenuage}
      VITE_OIDC_PROVIDER_NAME: ${OIDC_PROVIDER_NAME:-mock}
      VITE_OIDC_PROVIDER_URL: ${OIDC_PROVIDER_URL:-https://oidc}
      VITE_CONTROLPLANE_URL: ${CONTROLPLANE_URL:-https://controlplane}
      PORT: 80
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 24
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.console.rule=Host(`console`)"
      - "traefik.http.routers.console.entrypoints=websecure"
      - "traefik.http.routers.console.tls=true"
      - "traefik.http.services.console.loadbalancer.server.port=80"
    volumes:
      - ./console:/app
      - /app/node_modules

  controlplane:
    image: "${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}controlplane:${CI_COMMIT_REF_SLUG:-latest}-${TARGET:-development}"
    build:
      cache_from:
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}controlplane:${CI_COMMIT_REF_SLUG:-latest}
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}controlplane:master
      context: controlplane
      target: ${TARGET:-development}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=localhost:80"]
      interval: 5s
      timeout: 5s
      retries: 24
    environment:
      CARGO_INCREMENTAL: ${CARGO_INCREMENTAL:-}
      CONSOLE_URL: ${CONSOLE_URL:-https://console}
      CONTROLPLANE_ADDR: 0.0.0.0:80
      DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/postgres}
      LLVM_PROFILE_FILE: ${LLVM_PROFILE_FILE:-}
      RUST_BACKTRACE: ${RUST_BACKTRACE:-1}
      RUST_LOG: ${RUST_LOG:-info}
      RUSTFLAGS: ${RUSTFLAGS:-}
      SQLX_OFFLINE: ${SQLX_OFFLINE:-true}
    expose:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.controlplane.rule=Host(`controlplane`)"
      - "traefik.http.routers.controlplane.entrypoints=websecure"
      - "traefik.http.routers.controlplane.tls=true"
      - "traefik.http.services.controlplane.loadbalancer.server.port=80"
    volumes:
      - ./controlplane:/app
      - /app/target
      - type: volume
        source: nfs-snippets
        target: /mnt/pve/nfs-snippets
        volume:
          nocopy: true

  oidc:
    build:
      context: oidc-server
    environment:
      CONSOLE_URL: ${CONSOLE_URL:-https://console}
      PORT: 80
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID:-francenuage}
    expose:
      - 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 5s
      retries: 24
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oidc.rule=Host(`oidc`)"
      - "traefik.http.routers.oidc.entrypoints=websecure"
      - "traefik.http.routers.oidc.tls=true"
      - "traefik.http.services.oidc.loadbalancer.server.port=80"

  playwright:
    image: mcr.microsoft.com/playwright:v1.51.1-noble
    command: /bin/sh -c "npx -y playwright@1.51.1 run-server --port 4444 --host 0.0.0.0"
    extra_hosts:
      - "console:host-gateway"
      - "oidc:host-gateway"
      - "controlplane:host-gateway"
    ports:
      - "4444:4444"
    profiles:
      - donotstart

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 24
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  system-tests:
    image: "${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}system-tests:${CI_COMMIT_REF_SLUG:-latest}-${TARGET:-development}"
    build:
      cache_from:
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}system-tests:${CI_COMMIT_REF_SLUG:-latest}
        - ${CI_REGISTRY_IMAGE:+$CI_REGISTRY_IMAGE/}system-tests:master
      context: system-tests
    depends_on:
      console:
        condition: service_healthy
      controlplane:
        condition: service_healthy
      playwright:
        condition: service_started
      traefik:
        condition: service_started
    environment:
      CONSOLE_URL: ${CONSOLE_URL:-https://console}
      CONTROLPLANE_URL: ${CONTROLPLANE_URL:-https://controlplane}
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID:-francenuage}
      OIDC_PROVIDER_URL: ${OIDC_PROVIDER_URL:-https://oidc}
      PROXMOX_DEV_AUTHORIZATION_TOKEN: ${PROXMOX_DEV_AUTHORIZATION_TOKEN}
      PROXMOX_DEV_STORAGE_NAME: ${PROXMOX_DEV_STORAGE_NAME:-local-lvm}
      PROXMOX_DEV_URL: ${PROXMOX_DEV_URL:-https://pvedev-dc03-internal.france-nuage.fr}
      PROXMOX_TEST_AUTHORIZATION_TOKEN: ${PROXMOX_TEST_AUTHORIZATION_TOKEN}
      PROXMOX_TEST_STORAGE_NAME: ${PROXMOX_TEST_STORAGE_NAME:-local-lvm}
      PROXMOX_TEST_URL: ${PROXMOX_TEST_URL:-https://pve01-test01.france-nuage.fr}
      PW_TEST_CONNECT_WS_ENDPOINT: ws://playwright:4444
      PW_TEST_HTML_REPORT_OPEN: never
    extra_hosts:
      - "console:host-gateway"
      - "oidc:host-gateway"
      - "controlplane:host-gateway"
    ports:
      - "9000:9000"
    profiles:
      - donotstart
    volumes:
      - ./system-tests:/app
      - /app/node_modules

  traefik:
    image: traefik:v3.0
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  cms-directus:
    image: directus/directus:11.7.2
    ports:
      - ${DIRECTUS_PORT}:8055
    volumes:
      - ./cms/directus/uploads:/uploads
      - .cms/directus/extensions:/extensions
    depends_on:
      database-cms-directus:
        condition: service_healthy
      cache-cms-directus:
        condition: service_healthy
    env_file: "/cms/directus/.env"
    environment:
      SECRET: ${DIRECTUS_SECRET}

      DB_CLIENT: "pg"
      DB_HOST: "database"
      DB_PORT: "5432"
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}

      CACHE_ENABLED: ${CACHE_ENABLED}
      CACHE_AUTO_PURGE: ${CACHE_AUTO_PURGE}
      CACHE_STORE: "redis"
      REDIS: "redis://cache:6379"

      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      WEBSOCKETS_ENABLED: ${WEBSOCKETS_ENABLED}

      PUBLIC_URL: ${PUBLIC_URL}

      CORS_ENABLED: ${CORS_ENABLED}
      CORS_ORIGIN: ${CORS_ORIGIN}

      REFRESH_TOKEN_COOKIE_SECURE: ${REFRESH_TOKEN_COOKIE_SECURE}
      REFRESH_TOKEN_COOKIE_SAME_SITE: ${REFRESH_TOKEN_COOKIE_SAME_SITE}
      REFRESH_TOKEN_DOMAIN: ${REFRESH_TOKEN_COOKIE_DOMAIN}

      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE}
      SESSION_COOKIE_SAME_SITE: ${SESSION_COOKIE_SAME_SITE}
      SESSION_COOKIE_DOMAIN: ${SESSION_COOKIE_DOMAIN}

      EXTENSIONS_PATH: ${EXTENSIONS_PATH}
      EXTENSIONS_AUTO_RELOAD: ${EXTENSIONS_AUTO_RELOAD}

      CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: ${CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC}

      EMAIL_TRANSPORT: ${EMAIL_TRANSPORT}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_SMTP_HOST: ${EMAIL_SMTP_HOST}
      EMAIL_SMTP_PORT: ${EMAIL_SMTP_PORT}
      EMAIL_SMTP_USER: ${EMAIL_SMTP_USER}
      EMAIL_SMTP_PASSWORD: ${EMAIL_SMTP_PASSWORD}


  cache-cms-directus:
    image: redis:6
    healthcheck:
      test: [ "CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  database-cms-directus:
    image: postgis/postgis:16-master
    platform: linux/amd64
    volumes:
      - ./cms/directus/data/database:/var/lib/postgresql/data
    env_file: "/cms/directus/.env"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_DATABASE}", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

volumes:
  nfs-snippets:
    driver: local
    driver_opts:
      type: nfs
      o: addr=nfs-snippets-dev.france-nuage.fr,rw,nfsvers=4
      device: ":/mnt/Apps/France-Nuage/nfs-snippets-proxmox-dev"
  postgres_data:
