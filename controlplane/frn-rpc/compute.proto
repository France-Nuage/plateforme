syntax = "proto3";

package francenuage.fr.v1.compute;

import "validate.proto";
import "google/protobuf/timestamp.proto";

// Hypervisors service provides operations to manage hypervisors.
service Hypervisors {
    // List retrieves information about all registered hypervisors.
    rpc List (ListHypervisorsRequest) returns (ListHypervisorsResponse);

    // Register adds a new hypervisor to the system.
    rpc Register (RegisterHypervisorRequest) returns (RegisterHypervisorResponse);

    // Detach removes a hypervisor from the system.
    rpc Detach (DetachHypervisorRequest) returns (DetachHypervisorResponse);
}

// Instances service provides operations to manage instances.
service Instances {
    // ListInstances retrieves information about all available instances.
    rpc ListInstances (ListInstancesRequest) returns (ListInstancesResponse);

    // CloneInstance provisions a new instance based on a given existing instance.
    rpc CloneInstance (CloneInstanceRequest) returns (Instance);
  
    // CreateInstance provisions a new instance based on the specified configuration.
    rpc CreateInstance (CreateInstanceRequest) returns (CreateInstanceResponse);

    // DeleteInstance deletes a given instance.
    rpc DeleteInstance (DeleteInstanceRequest) returns (DeleteInstanceResponse);

    // StartInstance initiates a specific instance identified by its unique ID.
    rpc StartInstance (StartInstanceRequest) returns (StartInstanceResponse);

    // StopInstance halts a specific instance identified by its unique ID.
    rpc StopInstance (StopInstanceRequest) returns (StopInstanceResponse);
}

// Hypervisors service provides operations to manage zones.
service Zones {
    // List retrieves information about all registered zones.
    rpc List (ListZonesRequest) returns (ListZonesResponse);
}

// ListHypervisorsRequest is an empty message for listing hypervisors.
message ListHypervisorsRequest {}

// ListHypervisorsResponse contains a collection of hypervisor information.
message ListHypervisorsResponse {
    // List of hypervisor details
    repeated Hypervisor hypervisors = 1;
}

// RegisterHypervisorRequest contains the necessary information to register a hypervisor.
message RegisterHypervisorRequest {
    // Authorization token for secure API access
    string authorization_token = 1;
 
    // Name of the storage to use for instances
    string storage_name = 2;

    // URL endpoint of the hypervisor API
    string url = 3;

    // Id of the zone this hypervisor belongs to
    string zone_id = 4;

    // Id of the organization this hypervisor belongs to
    string organization_id = 5;
}

// RegisterHypervisorResponse contains the result of a register hypervisor operation.
message RegisterHypervisorResponse {
    // The registered hypervisor.
    Hypervisor hypervisor = 1;
}

// DetachHypervisorRequest contains the necessary information to detach a hypervisor.
message DetachHypervisorRequest {
    // Id of the hypervisor
    string id = 1;
}

// DetachHypervisorResponse contains the result of a DetachHypervisor operation.
message DetachHypervisorResponse {}

// Hypervisor represents a virtualization platform that can host instances.
message Hypervisor {
    // Id of the hypervisor
    string id = 1;

    // Name of the storage to use for instances
    string storage_name = 2;

    // URL endpoint of the hypervisor API
    string url = 3;

    // Id of the zone the hypervisor belongs to
    string zone_id = 4;

    // Id of the organization the hypervisor belongs to
    string organization_id = 5;
}

// InstanceConfig contains basic configuration information for a virtual machine instance.
message InstanceConfig {
    // Unique identifier for the instance configuration
    string id = 1 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];

    // Display name of the instance configuration
    string name = 2 [(validate.rules).string = {
        min_len: 1,
        max_len: 64,
        pattern: "^[a-zA-Z0-9_\\- ]+$"  // Alphanumeric with spaces, underscores and hyphens
    }];
}

// Instance contains detailed information about a virtual machine instance.
message Instance {
    // Unique identifier for the instance
    string id = 1 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];
    
    // Current operational status of the instance
    InstanceStatus status = 2 [(validate.rules).enum = {
        defined_only: true  // Must be a defined enum value
    }];
    
    // Maximum CPU cores available to the instance (max 99)
    uint32 max_cpu_cores = 3 [(validate.rules).uint32 = {
        gt: 0,  // Must have at least 1 core
        lte: 99  // Maximum 99 cores
    }];
    
    // Current CPU utilization as a percentage (0.0-100.0)
    float cpu_usage_percent = 4 [(validate.rules).float = { 
        gte: 0.0, 
        lte: 100.0 
    }];
    
    // Maximum memory available to the instance (in bytes, max 64GB)
    uint64 max_memory_bytes = 5 [(validate.rules).uint64 = {
        gt: 0,  // Must have some memory
        lte: 68719476736,  // 64GB = 64 * 1024^3 = 68,719,476,736 bytes
    }];
    
    // Current memory utilization (in bytes, cannot exceed max_memory_bytes)
    uint64 memory_usage_bytes = 6 [(validate.rules).uint64 = {
        gte: 0,  // Cannot be negative
        lte: 68719476736  // 64GB = 64 * 1024^3 = 68,719,476,736 bytes
    }];

    // Maximum disk available to the instance (in bytes, max 64GB)
    uint64 max_disk_bytes = 7 [(validate.rules).uint64 = {
        gt: 0,  // Must have some disk space
        lte: 109951162777600  // 100TB = 100 * 1024^4 = 109,951,162,777,600 bytes
    }];

    // Current disk utilization (in bytes, cannot exceed max_disk_bytes)
    uint64 disk_usage_bytes = 8 [(validate.rules).uint64 = {
        gte: 0,  // Cannot be negative
        lte: 109951162777600  // 100TB = 100 * 1024^4 = 109,951,162,777,600 bytes
    }];

    // Human-readable name, defined on the instance
    string name = 9;

    // The IP v4 address of the instance
    string ip_v4 = 10 [(validate.rules).string = {
        pattern: "^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$"
    }];

    // Unique identifier for the instance hypervisor
    string hypervisor_id = 100 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];

    // Unique identifier for the instance project
    string project_id = 101 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];

    // Unique identifier for the instance zero trust network
    optional string zero_trust_network_id = 102 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];

    // Creation time of the instance
    google.protobuf.Timestamp created_at = 997;

    // Time of the instance last change
    google.protobuf.Timestamp updated_at = 998;

}

// InstanceStatus represents the possible states of a virtual machine instance.
enum InstanceStatus {
  // Instance status is undefined
  UNDEFINED_INSTANCE_STATUS = 0;
  
  // Instance is active and operational
  RUNNING = 1;
  
  // Instance is inactive
  STOPPED = 2;
  
  // Instance is in the process of stopping
  STOPPING = 3;
  
  // Instance is in the process of starting/provisioning
  PROVISIONING = 4;
  
  // Instance is in the staging phase before running
  STAGING = 5;
  
  // Instance is suspended (memory state preserved)
  SUSPENDED = 6;
  
  // Instance is in the process of suspending
  SUSPENDING = 7;
  
  // Instance is permanently terminated
  TERMINATED = 8;
  
  // Instance is in the process of being deprovisioned
  DEPROVISIONING = 9;
  
  // Instance is being repaired
  REPAIRING = 10;
}

// ListInstancesRequest is an empty message for listing instances.
message ListInstancesRequest {}

// ListInstancesResponse contains a collection of instance information.
message ListInstancesResponse {
    // List of instance details
    repeated Instance instances = 1;
}

// DeleteInstanceRequest defines the parameters needed to delete an existing instance.
message DeleteInstanceRequest {
    // The id of the instance to clone.
    string id = 1 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];
}

// DeleteInstanceResponse contains the result of a DeleteInstance operation.
message DeleteInstanceResponse {}

// CloneInstanceRequest defines the parameters needed to clone an existing instance.
message CloneInstanceRequest {
    // The id of the instance to clone.
    string id = 1 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];
}

// CreateInstanceRequest defines the parameters needed to provision a new instance.
message CreateInstanceRequest {
    // Base image identifier to use for the instance
    string image = 1;

    // Number of CPU cores to allocate to the instance
    uint32 cpu_cores = 2 [(validate.rules).uint32 = {
        gt: 0,  // Must have at least 1 core
        lte: 99  // Maximum 99 cores
    }];

    // Amount of memory in bytes to allocate to the instance
    uint64 memory_bytes = 3 [(validate.rules).uint64 = {
        gt: 536870912,  // Minimum 512MB (512 * 1024 * 1024)
        lte: 68719476736  // Maximum 64GB (64 * 1024 * 1024 * 1024)
    }];

    // User-defined name for the instance
    string name = 4 [(validate.rules).string = {
        min_len: 1,
        max_len: 128,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];

    // The snippet to use to bootstrap the instance
    string snippet = 5;

    // The id of the project the instance belongs to
    string project_id = 7 [(validate.rules).string = {
        min_len: 1, 
        max_len: 36, 
        pattern: "^[a-zA-Z0-9_-]+$"  // Alphanumeric with underscores and hyphens
    }];
}

// CreateInstanceResponse contains the result of a create instance operation.
message CreateInstanceResponse {
    // The created instance.
    Instance instance = 1;
}

// StartInstanceRequest identifies which instance to start.
message StartInstanceRequest {
    // Unique identifier of the instance to start
    string id = 1;
}

// StartInstanceResponse contains the result of a start instance operation.
message StartInstanceResponse {
}

// StopInstanceRequest identifies which instance to stop.
message StopInstanceRequest {
    // Unique identifier of the instance to stop
    string id = 1;
}

// StopInstanceResponse contains the result of a stop instance operation.
message StopInstanceResponse {
}

// ListZonesRequest is an empty message for listing zones.
message ListZonesRequest {}

// ListZonesResponse contains a collection of zone information.
message ListZonesResponse {
    // List of zone details
    repeated Zone zones = 1;
}

// Zone represents a zone.
message Zone {
    // Id of the zone
    string id = 1;

    // Name of the zone.
    string name = 2;
}
